import asm

asm.defun('@globals')
asm.glob('ht')
asm.dw(0)
asm.glob('ha')
asm.dw(0)
asm.glob('pvpc')
asm.dw('vPC')
asm.glob('sp')
asm.dw(0x06fe)
asm.glob('rv')
asm.dw(0)
asm.glob('thunk0')
asm.dw('@thunk0')
asm.glob('thunk1')
asm.dw('@thunk1')
asm.glob('thunk2')
asm.dw('@thunk2')
asm.glob('enter')
asm.dw('@enter')
asm.glob('leave')
asm.dw('@leave')
asm.glob('ldloc')
asm.dw('@ldloc')
asm.glob('stloc')
asm.dw('@stloc')
asm.glob('pusha')
asm.dw('@pusha')
asm.glob('lsh')
asm.dw('@lsh')
asm.glob('rsh')
asm.dw('@rsh')
asm.glob('mul')
asm.dw('@mul')
asm.glob('divu')
asm.dw('@divu')
asm.glob('div')
asm.dw('@div')
asm.glob('blkcopy')
asm.dw('@blkcopy')
asm.glob('stlocb')
asm.dw('@stlocb')
asm.glob('ldlocb')
asm.dw('@ldlocb')
asm.glob('tt')
asm.dw(0)

asm.defun('@start')
asm.ldwi('_main')
asm.call('vAC')
asm.label('halt')
asm.ldwi('halt')
asm.jr()

asm.defun('@ldloc')
asm.addw('sp')
asm.deek()
asm.ret()

asm.defun('@ldlocb')
asm.addw('sp')
asm.peek()
asm.ret()

asm.defun('@stloc')
asm.addw('sp')
asm.stw('ht')
asm.ldw('ha')
asm.doke('ht')
asm.ret()

asm.defun('@stlocb')
asm.addw('sp')
asm.stw('ht')
asm.ld('ha')
asm.poke('ht')
asm.ret()

asm.defun('@thunk0')
asm.stw('tt')
asm.inc('vLRH')
asm.ldi(0)
asm.st('vLR')
asm.ldw('tt')
asm.ret()

asm.defun('@thunk1')
asm.stw('tt')
asm.inc('vLRH')
asm.ldi(0xa0)
asm.st('vLR')
asm.ldw('tt')
asm.ret()

asm.defun('@thunk2')
asm.stw('tt')
asm.ldwi(0x08a0)
asm.stw('vLR')
asm.ldw('tt')
asm.ret()

# vAC = bitmask of registers to save. The highest-order bit represents r15.
asm.defun('@enter')
asm.stw('ha')
asm.ldi('r15')
asm.stw('ht')
asm.label('loop')
asm.ldw('ha')
asm.jeq('done')
asm.ldw('ha')
asm.jgt('next')
asm.ldw('ht')
asm.deek()
asm.doke('sp')
asm.ldw('sp')
asm.subi(2)
asm.stw('sp')
asm.label('next')
asm.ldw('ht')
asm.subi(2)
asm.stw('ht')
asm.ldw('ha')
asm.lslw()
asm.stw('ha')
asm.j('loop')
asm.label('done')
asm.ret()

# vAC = bitmask of registers to restore. The highest-order bit represents r1.
asm.defun('@leave')
asm.stw('ha')
asm.ldi('r1')
asm.stw('ht')
asm.label('loop')
asm.ldw('ha')
asm.jeq('done')
asm.ldw('ha')
asm.jgt('next')
asm.ldw('sp')
asm.addi(2)
asm.stw('sp')
asm.deek()
asm.doke('ht')
asm.label('next')
asm.inc('ht')
asm.inc('ht')
asm.ldw('ha')
asm.lslw()
asm.stw('ha')
asm.j('loop')
asm.label('done')
asm.ret()

# vAC = value to push
asm.defun('@pusha')
asm.doke('sp')
asm.ldw('sp')
asm.subi(2)
asm.stw('sp')
asm.ret()

# vAC = shift amount, r1 = value to shift
asm.defun('@lsh')
asm.andi(0x0f)
asm.jeq('done')
asm.stw('ha')
asm.label('loop')
asm.ldw('r1')
asm.lslw()
asm.stw('r1')
asm.ldw('ha')
asm.subi(1)
asm.stw('ha')
asm.jne('loop')
asm.label('done')
asm.ldw('r1')
asm.ret()

# vAC = shift amount, r1 = value to shift
asm.defun('@rsh')
asm.andi(0x0f)
asm.jeq('done')
asm.stw('ha')
asm.ldw('sysFn')
asm.stw('ht')
asm.ldwi('SYS_LSRW1_48')
asm.stw('sysFn')
asm.label('loop')
asm.ldw('r1')
asm.sys(246)                    # 270-48/2 = 246
asm.stw('r1')
asm.ldw('ha')
asm.subi(1)
asm.stw('ha')
asm.jne('loop')
asm.ldw('ht')
asm.stw('sysFn')
asm.label('done')
asm.ldw('r1')
asm.ret()

# r1 = a, vAC = b
# rv = product, ha = addend, ht = bitmask
asm.defun('@mul')
asm.stw('ha')
asm.ldi(0)
asm.stw('rv')
asm.ldi(1)
asm.stw('ht')
asm.label('loop')
asm.ldw('ht')
asm.andw('r1')
asm.jeq('next')
asm.ldw('rv')
asm.addw('ha')
asm.stw('rv')
asm.label('next')
asm.ldw('ha')
asm.lslw()
asm.stw('ha')
asm.ldw('ht')
asm.lslw()
asm.stw('ht')
asm.jne('loop')
asm.ldw('rv')
asm.ret()

# r1 = dest, ha = src, vAC = size
asm.defun('@blkcopy')
asm.stw('ht')
asm.label('loop')
asm.ldw('ha')
asm.peek()
asm.poke('r1')
asm.ldw('ha')
asm.addi(1)
asm.stw('ha')
asm.ldw('r1')
asm.addi(1)
asm.stw('r1')
asm.ldw('ht')
asm.subi(1)
asm.stw('ht')
asm.jne('loop')
asm.ret()

# Unsigned division
# r1 = r1 / vAC, ht = r1 % vAC
asm.defun('@divu')
asm.push()
asm.stw('ha')
asm.jlt('skip3')
asm.ldi(0)
asm.stw('ht')
asm.stlw(256-2)
asm.label('loop')
asm.ldw('ht')
asm.lslw()
asm.stw('ht')
asm.ldw('r1')
asm.jge('skip1')
asm.inc('ht')
asm.label('skip1')
asm.ldw('r1')
asm.lslw()
asm.stw('r1')
asm.ldw('ht')
asm.subw('ha')
asm.jlt('skip2')
asm.stw('ht')
asm.inc('r1')
asm.label('skip2')
asm.ldlw(256-2)
asm.addi(1)
asm.andi(15)
asm.stlw(256-2)
asm.jne('loop')
asm.popret()
# Special cases (loop can't handle vAC >= 0x8001)
asm.label('skip3')
asm.ldw('r1')
asm.jge('skip4')
asm.subw('ha')
asm.jge('skip5')
# div,mod = 0,r1
asm.ldw('r1')
asm.label('skip4')
asm.stw('ht')
asm.ldi(0)
asm.stw('r1')
asm.popret()
# div,mod = 1,r1-vAC
asm.label('skip5')
asm.stw('ht')
asm.ldi(1)
asm.stw('r1')
asm.popret()

# Signed division
# vAC = r1 / vAC, ht = r1 % vAC
# C99 compliant: rounding towards 0, and (a/b)*b + a%b == a
asm.defun('@div')
asm.push()
asm.stw('ha')
asm.xorw('r1')
asm.stlw(256-6)
asm.ldw('r1')
asm.stlw(256-8)
asm.jge('skip1')
asm.ldi(0)
asm.subw('r1')
asm.stw('r1')
asm.label('skip1')
asm.ldw('ha')
asm.jge('skip2')
asm.ldi(0)
asm.subw('ha')
asm.label('skip2')
asm.call('divu')
asm.ldlw(256-8)
asm.jge('skip3')
asm.ldi(0)
asm.subw('ht')
asm.stw('ht')
asm.label('skip3')
asm.ldlw(256-6)
asm.jlt('skip4')
asm.ldw('r1')
asm.popret()
asm.label('skip4')
asm.ldi(0)
asm.subw('r1')
asm.popret()
