_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x7db5
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_10                               EQU                               0x0217
_20                               EQU                               0x0226
_30                               EQU                               0x0244
_40                               EQU                               0x0262
_50                               EQU                               0x028f
_55                               EQU                               0x02ad
_60                               EQU                               0x02cb
_65                               EQU                               0x0307
_70                               EQU                               0x0316
_75                               EQU                               0x033e
_80                               EQU                               0x0343
_85                               EQU                               0x0366
_100                              EQU                               0x0375
_110                              EQU                               0x0398
_120                              EQU                               0x03a7
_125                              EQU                               0x03b1
_126                              EQU                               0x03bb
_130                              EQU                               0x03de
_132                              EQU                               0x040f
_134                              EQU                               0x042d
_136                              EQU                               0x044b
_138                              EQU                               0x0469
_140                              EQU                               0x04a0
_145                              EQU                               0x04a5
_148                              EQU                               0x04cd
_150                              EQU                               0x04d2
_153                              EQU                               0x0507
_155                              EQU                               0x0516
_160                              EQU                               0x051b
_162                              EQU                               0x0543
_164                              EQU                               0x0552
_170                              EQU                               0x0561
_180                              EQU                               0x0566
_185                              EQU                               0x058e
_188                              EQU                               0x059d
_190                              EQU                               0x05ac
_195                              EQU                               0x05c0
_200                              EQU                               0x05c5
_210                              EQU                               0x060c
_212                              EQU                               0x062a
_215                              EQU                               0x0648
_217                              EQU                               0x066b
_220                              EQU                               0x0698
_225                              EQU                               0x06a7
_228                              EQU                               0x06ca
_230                              EQU                               0x06cf
_250                              EQU                               0x08a2
_260                              EQU                               0x08bb
_270                              EQU                               0x08e8
_273                              EQU                               0x09b1
_275                              EQU                               0x09cf
_277                              EQU                               0x09f2
_280                              EQU                               0x0aa2
_282                              EQU                               0x0aac
_300                              EQU                               0x0ab1
_302                              EQU                               0x0ab6
_305                              EQU                               0x0ad9
_307                              EQU                               0x0ae8
_310                              EQU                               0x0bb2
_315                              EQU                               0x0bb7
_325                              EQU                               0x0bee
_330                              EQU                               0x0cb8
_335                              EQU                               0x0cd6
_340                              EQU                               0x0dbb
_350                              EQU                               0x0dcf
_355                              EQU                               0x0ea2
_360                              EQU                               0x0eb1
_365                              EQU                               0x0ed9
_370                              EQU                               0x0ede
_385                              EQU                               0x0fb1
_390                              EQU                               0x0fde
_400                              EQU                               0x0212
_999                              EQU                               0x10b1
_page_0x0300                      EQU                               0x0300
_page_0x0400                      EQU                               0x0400
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_page_0x09a0                      EQU                               0x09a0
_page_0x0aa0                      EQU                               0x0aa0
_page_0x0ba0                      EQU                               0x0ba0
_next_0x07dd                      EQU                               0x0ba2
_page_0x0ca0                      EQU                               0x0ca0
_page_0x0da0                      EQU                               0x0da0
_page_0x0ea0                      EQU                               0x0ea0
_page_0x0fa0                      EQU                               0x0fa0
_page_0x10a0                      EQU                               0x10a0

; Global Variables
_I                                EQU                               0x0030

; Local Variables

; Arrays

; Strings
_N$                               EQU                               0x7ca0
_N$                               DB                                0 '' 0
_B$                               EQU                               0x7aa0
_B$                               DB                                0 '' 0
_C$                               EQU                               0x75a0
_C$                               DB                                0 '' 0
_D$                               EQU                               0x6fa0
_D$                               DB                                0 '' 0
_E$                               EQU                               0x69a0
_E$                               DB                                0 '' 0
_G$                               EQU                               0x66a0
_G$                               DB                                0 '' 0

; Constant Strings
_str_0x7ddb                       EQU                               0x7ddb
_str_0x7ddb                       DB                                35 'HELLO. MY NAME IS CREATIVECOMPUTER.' 0
_str_0x7dc8                       EQU                               0x7dc8
_str_0x7dc8                       DB                                17 'WHAT IS YOUR NAME' 0
_str_0x7dc5                       EQU                               0x7dc5
_str_0x7dc5                       DB                                1 '?' 0
_str_0x7bf4                       EQU                               0x7bf4
_str_0x7bf4                       DB                                10 'HI THERE, ' 0
_str_0x7bd2                       EQU                               0x7bd2
_str_0x7bd2                       DB                                32 ', ARE YOU ENJOYING YOURSELF HERE' 0
_str_0x7bc5                       EQU                               0x7bc5
_str_0x7bc5                       DB                                3 'YES' 0
_str_0x7bc1                       EQU                               0x7bc1
_str_0x7bc1                       DB                                2 'NO' 0
_str_0x79d9                       EQU                               0x79d9
_str_0x79d9                       DB                                37 ', I DO NOT UNDERSTAND YOUR ANSWER OF ' 0
_str_0x7bbe                       EQU                               0x7bbe
_str_0x7bbe                       DB                                1 '.' 0
_str_0x79ab                       EQU                               0x79ab
_str_0x79ab                       DB                                44 'PLEASE ANSWER YES OR NO. DO YOU LIKE IT HERE' 0
_str_0x7ba4                       EQU                               0x7ba4
_str_0x7ba4                       DB                                24 'I AM GLAD TO HEAR THAT, ' 0
_str_0x78e1                       EQU                               0x78e1
_str_0x78e1                       DB                                29 'OH, I AM SORRY TO HEAR THAT, ' 0
_str_0x78d1                       EQU                               0x78d1
_str_0x78d1                       DB                                14 '. MAYBE WE CAN' 0
_str_0x78b2                       EQU                               0x78b2
_str_0x78b2                       DB                                29 'BRIGHTEN UP YOUR VISIT A BIT.' 0
_str_0x79a4                       EQU                               0x79a4
_str_0x79a4                       DB                                5 'SAY, ' 0
_str_0x77d4                       EQU                               0x77d4
_str_0x77d4                       DB                                42 ', I CAN SOLVE ALL KINDS OF PROBLEMS EXCEPT' 0
_str_0x77a0                       EQU                               0x77a0
_str_0x77a0                       DB                                50 'THOSE DEALING WITH GREECE.WHAT KIND OF PROBLEMS DO' 0
_str_0x76d2                       EQU                               0x76d2
_str_0x76d2                       DB                                44 'YOU HAVE (ANSWER SEX, HEALTH, MONEY, OR JOB)' 0
_str_0x78a7                       EQU                               0x78a7
_str_0x78a7                       DB                                3 'SEX' 0
_str_0x76ca                       EQU                               0x76ca
_str_0x76ca                       DB                                6 'HEALTH' 0
_str_0x78a0                       EQU                               0x78a0
_str_0x78a0                       DB                                5 'MONEY' 0
_str_0x76c5                       EQU                               0x76c5
_str_0x76c5                       DB                                3 'JOB' 0
_str_0x76bf                       EQU                               0x76bf
_str_0x76bf                       DB                                4 'OH, ' 0
_str_0x76ac                       EQU                               0x76ac
_str_0x76ac                       DB                                17 ', YOUR ANSWER OF ' 0
_str_0x74ee                       EQU                               0x74ee
_str_0x74ee                       DB                                16 ' IS GREEK TO ME.' 0
_str_0x74d2                       EQU                               0x74d2
_str_0x74d2                       DB                                26 'I CAN SYMPATHIZE WITH YOU ' 0
_str_0x74c0                       EQU                               0x74c0
_str_0x74c0                       DB                                16 '. I HAVE TO WORK' 0
_str_0x73d1                       EQU                               0x73d1
_str_0x73d1                       DB                                45 'REALLY BEAT ON MY KEYBOARD.MY ADVICE TO YOU, ' 0
_str_0x76a9                       EQU                               0x76a9
_str_0x76a9                       DB                                1 ',' 0
_str_0x72ca                       EQU                               0x72ca
_str_0x72ca                       DB                                52 'IS TO OPEN A RETAIL COMPUTER STORE. IT IS GREAT FUN.' 0
_str_0x76a0                       EQU                               0x76a0
_str_0x76a0                       DB                                7 'SORRY, ' 0
_str_0x73aa                       EQU                               0x73aa
_str_0x73aa                       DB                                37 ', I AM BROKE TOO. WHY DO YOU NOT SELL' 0
_str_0x71cb                       EQU                               0x71cb
_str_0x71cb                       DB                                51 'ENCYCLOPEADIAS OR MARRY SOMEONE RICH OR STOP EATING' 0
_str_0x72a5                       EQU                               0x72a5
_str_0x72a5                       DB                                35 'SO YOU WILL NOT NEED SO MUCH MONEY?' 0
_str_0x74ad                       EQU                               0x74ad
_str_0x74ad                       DB                                17 'MY ADVICE TO YOU ' 0
_str_0x74a7                       EQU                               0x74a7
_str_0x74a7                       DB                                4 ' IS:' 0
_str_0x71b7                       EQU                               0x71b7
_str_0x71b7                       DB                                18 '1. TAKE TWO ASPRIN' 0
_str_0x70cb                       EQU                               0x70cb
_str_0x70cb                       DB                                51 '2. DRINK PLENTY OF FLUIDS (ORANGE JUICE, NOT BEER!)' 0
_str_0x71a1                       EQU                               0x71a1
_str_0x71a1                       DB                                20 '3. GO TO BED (ALONE)' 0
_str_0x70a3                       EQU                               0x70a3
_str_0x70a3                       DB                                38 'IS YOUR PROBLEM TOO MUCH OR TOO LITTLE' 0
_str_0x6ef6                       EQU                               0x6ef6
_str_0x6ef6                       DB                                8 'TOO MUCH' 0
_str_0x6eea                       EQU                               0x6eea
_str_0x6eea                       DB                                10 'TOO LITTLE' 0
_str_0x6ed2                       EQU                               0x6ed2
_str_0x6ed2                       DB                                22 'DO NOT GET ALL SHOOK, ' 0
_str_0x6eb6                       EQU                               0x6eb6
_str_0x6eb6                       DB                                26 ', JUST ANSWER THE QUESTION' 0
_str_0x6dd6                       EQU                               0x6dd6
_str_0x6dd6                       DB                                40 'WITH TOO MUCH OR TOO LITTLE. WHICH IS IT' 0
_str_0x6cc7                       EQU                               0x6cc7
_str_0x6cc7                       DB                                55 'YOU CALL THAT A PROBLEM?!!I SHOULD HAVE SUCH PROBLEMS! ' 0
_str_0x6dc1                       EQU                               0x6dc1
_str_0x6dc1                       DB                                19 'IF IT BOTHERS YOU, ' 0
_str_0x6dab                       EQU                               0x6dab
_str_0x6dab                       DB                                20 ',TAKE A COLD SHOWER.' 0
_str_0x6ca8                       EQU                               0x6ca8
_str_0x6ca8                       DB                                29 'WHY ARE YOU HERE IN SUFFERN, ' 0
_str_0x6ba8                       EQU                               0x6ba8
_str_0x6ba8                       DB                                86 '?  YOU SHOULD BE IN TOKYO OR NEW YORK OR AMSTERDAM OR SOMEPLACE WITH SOME REAL ACTION.' 0
_str_0x6adc                       EQU                               0x6adc
_str_0x6adc                       DB                                34 'ANY MORE PROBLEMS YOU WANTSOLVED, ' 0
_str_0x6aba                       EQU                               0x6aba
_str_0x6aba                       DB                                32 'JUST A SIMPLE YES OR NO PLEASE, ' 0
_str_0x68db                       EQU                               0x68db
_str_0x68db                       DB                                35 'WHAT KIND (SEX, MONEY, HEALTH, JOB)' 0
_str_0x68b6                       EQU                               0x68b6
_str_0x68b6                       DB                                35 'THAT WILL BE $5.00 FOR THE ADVICE, ' 0
_str_0x67d7                       EQU                               0x67d7
_str_0x67d7                       DB                                39 'PLEASE LEAVE THE MONEY ON THE TERMINAL.' 0
_str_0x6aa1                       EQU                               0x6aa1
_str_0x6aa1                       DB                                23 'DID YOU LEAVE THE MONEY' 0
_str_0x68a5                       EQU                               0x68a5
_str_0x68a5                       DB                                15 'YOUR ANSWER OF ' 0
_str_0x67c7                       EQU                               0x67c7
_str_0x67c7                       DB                                14 ' CONFUSES ME, ' 0
_str_0x67a7                       EQU                               0x67a7
_str_0x67a7                       DB                                30 'PLEASE RESPOND WITH YES OR NO.' 0
_str_0x6ba1                       EQU                               0x6ba1
_str_0x6ba1                       DB                                5 'HEY, ' 0
_str_0x65e0                       EQU                               0x65e0
_str_0x65e0                       DB                                30 '??? YOU LEFT NO MONEY AT ALL! ' 0
_str_0x65ad                       EQU                               0x65ad
_str_0x65ad                       DB                                49 'YOU ARE CHEATING ME OUT OF MY HARD-EARNED LIVING.' 0
_str_0x64ee                       EQU                               0x64ee
_str_0x64ee                       DB                                16 'WHAT A RIP OFF, ' 0
_str_0x68a0                       EQU                               0x68a0
_str_0x68a0                       DB                                3 '!!!' 0
_str_0x64dc                       EQU                               0x64dc
_str_0x64dc                       DB                                16 'THAT IS HONEST, ' 0
_str_0x63a6                       EQU                               0x63a6
_str_0x63a6                       DB                                88 ', BUT HOW CAN I PROCEED WIT MY PSYCHOLOGY STUDIES IF MY PATIENTS DO NOT PAY THEIR BILLS?' 0
_str_0x64cd                       EQU                               0x64cd
_str_0x64cd                       DB                                13 'TAKE A WALK, ' 0
_str_0x64b9                       EQU                               0x64b9
_str_0x64b9                       DB                                18 'NICE MEETING YOU, ' 0
_str_0x64a5                       EQU                               0x64a5
_str_0x64a5                       DB                                18 ', HAVE A NICE DAY.' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0x7dad                 EQU                               0x7dad
_inputVars_0x7dad                 DW                                0x7ca0 
_inputStrs_0x7dab                 EQU                               0x7dab
_inputStrs_0x7dab                 DW                                0x7dc5 
_inputTypes_0x7da7                EQU                               0x7da7
_inputTypes_0x7da7                DW                                0x5f05 0x0000 
_input_0x7daf                     EQU                               0x7daf
_input_0x7daf                     DW                                0x7dad 0x7dab 0x7da7 
_inputVars_0x7bd0                 EQU                               0x7bd0
_inputVars_0x7bd0                 DW                                0x7aa0 
_inputStrs_0x7bce                 EQU                               0x7bce
_inputStrs_0x7bce                 DW                                0x7dc5 
_inputTypes_0x7bca                EQU                               0x7bca
_inputTypes_0x7bca                DW                                0x5f05 0x0000 
_input_0x7da1                     EQU                               0x7da1
_input_0x7da1                     DW                                0x7bd0 0x7bce 0x7bca 
_inputVars_0x7ba2                 EQU                               0x7ba2
_inputVars_0x7ba2                 DW                                0x75a0 
_inputStrs_0x7ba0                 EQU                               0x7ba0
_inputStrs_0x7ba0                 DW                                0x7dc5 
_inputTypes_0x79a0                EQU                               0x79a0
_inputTypes_0x79a0                DW                                0x5f05 0x0000 
_input_0x78ac                     EQU                               0x78ac
_input_0x78ac                     DW                                0x7ba2 0x7ba0 0x79a0 
_inputVars_0x73a8                 EQU                               0x73a8
_inputVars_0x73a8                 DW                                0x6fa0 
_inputStrs_0x73a6                 EQU                               0x73a6
_inputStrs_0x73a6                 DW                                0x7dc5 
_inputTypes_0x73a2                EQU                               0x73a2
_inputTypes_0x73a2                DW                                0x5f05 0x0000 
_input_0x74a1                     EQU                               0x74a1
_input_0x74a1                     DW                                0x73a8 0x73a6 0x73a2 
_inputVars_0x73a0                 EQU                               0x73a0
_inputVars_0x73a0                 DW                                0x6fa0 
_inputStrs_0x72a3                 EQU                               0x72a3
_inputStrs_0x72a3                 DW                                0x6dd6 
_inputTypes_0x6eac                EQU                               0x6eac
_inputTypes_0x6eac                DW                                0x5f85 0x0000 
_input_0x6eb0                     EQU                               0x6eb0
_input_0x6eb0                     DW                                0x73a0 0x72a3 0x6eac 
_inputVars_0x72a1                 EQU                               0x72a1
_inputVars_0x72a1                 DW                                0x69a0 
_inputStrs_0x70a1                 EQU                               0x70a1
_inputStrs_0x70a1                 DW                                0x7dc5 
_inputTypes_0x6ea2                EQU                               0x6ea2
_inputTypes_0x6ea2                DW                                0x5f05 0x0000 
_input_0x6ea6                     EQU                               0x6ea6
_input_0x6ea6                     DW                                0x72a1 0x70a1 0x6ea2 
_inputVars_0x6ea0                 EQU                               0x6ea0
_inputVars_0x6ea0                 DW                                0x66a0 
_inputStrs_0x6da3                 EQU                               0x6da3
_inputStrs_0x6da3                 DW                                0x7dc5 
_inputTypes_0x6ca4                EQU                               0x6ca4
_inputTypes_0x6ca4                DW                                0x5f05 0x0000 
_input_0x6da5                     EQU                               0x6da5
_input_0x6da5                     DW                                0x6ea0 0x6da3 0x6ca4 

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  ClearVertBlinds                                               ; Main: cls

_10                               PrintString                       _str_0x7ddb
                                  NewLine                                                       ; Main: PRINT "HELLO. MY NAME IS CREATIVECOMPUTER."

_20                               NewLine                           
                                  PrintString                       _str_0x7dc8
                                  LDWI                              0x7daf
                                  Input                             
                                  NewLine                                                       ; Main: PRINT: INPUT "WHAT IS YOUR NAME",N$: PRINT

_30                               PrintString                       _str_0x7bf4
                                  PrintString                       _N$
                                  PrintString                       _str_0x7bd2                 ; Main: PRINT "HI THERE, ";N$;", ARE YOU ENJOYING YOURSELF HERE";

_40                               LDWI                              0x7da1
                                  Input                             
                                  NewLine                           
                                  LDWI                              0x7aa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringUpper                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; Main: INPUT B$: PRINT : B$ = UPPER$(B$)

_50                               LDWI                              0x7aa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7bc5
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _55 0
                                  LDWI                              _70
                                  CALL                              giga_vAC                    ; Main: IF B$="YES" THEN 70

_55                               LDWI                              0x7aa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7bc1
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _60 1
                                  LDWI                              _80
                                  CALL                              giga_vAC                    ; Main: IF B$="NO" THEN 80

_60                               PrintString                       _N$
                                  PrintString                       _str_0x79d9
                                  PrintString                       _B$
                                  PrintString                       _str_0x7bbe
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  NewLine                                                       ; Main: PRINT N$;", I DO NOT UNDERSTAND YOUR ANSWER OF ";B$;"."

_65                               PrintString                       _str_0x79ab
                                  LDWI                              _40
                                  CALL                              giga_vAC                    ; Main: PRINT "PLEASE ANSWER YES OR NO. DO YOU LIKE IT HERE";: GOTO 40

_70                               PrintString                       _str_0x7ba4
                                  PrintString                       _N$
                                  PrintString                       _str_0x7bbe
                                  NewLine                           
                                  NewLine                                                       ; Main: PRINT "I AM GLAD TO HEAR THAT, ";N$;".": PRINT

_75                               LDWI                              _100
                                  CALL                              giga_vAC                    ; Main: GOTO 100

_80                               PrintString                       _str_0x78e1
                                  PrintString                       _N$
                                  PrintString                       _str_0x78d1
                                  NewLine                                                       ; Main: PRINT "OH, I AM SORRY TO HEAR THAT, ";N$;". MAYBE WE CAN"

_85                               PrintString                       _str_0x78b2
                                  NewLine                                                       ; Main: PRINT "BRIGHTEN UP YOUR VISIT A BIT."

_100                              PrintString                       _str_0x79a4
                                  PrintString                       _N$
                                  PrintString                       _str_0x77d4
                                  NewLine                                                       ; Main: PRINT "SAY, ";N$;", I CAN SOLVE ALL KINDS OF PROBLEMS EXCEPT"

_110                              PrintString                       _str_0x77a0
                                  NewLine                                                       ; Main: PRINT "THOSE DEALING WITH GREECE.WHAT KIND OF PROBLEMS DO"

_120                              PrintString                       _str_0x76d2                 ; Main: PRINT "YOU HAVE (ANSWER SEX, HEALTH, MONEY, OR JOB)";

_125                              LDWI                              0x78ac
                                  Input                                                         ; Main: INPUT C$

_126                              NewLine                           
                                  LDWI                              0x75a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringUpper                       
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x75a0
                                  StringCopy                                                    ; Main: PRINT : C$ = UPPER$(C$)

_130                              LDWI                              0x75a0
                                  STW                               strSrcAddr
                                  LDWI                              0x78a7
                                  StringCmp                         
                                  ANDI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  JumpFalse                         _132 2
                                  LDWI                              _200
                                  CALL                              giga_vAC                    ; Main: IF C$ = "SEX" THEN 200

_132                              LDWI                              0x75a0
                                  STW                               strSrcAddr
                                  LDWI                              0x76ca
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _134 3
                                  LDWI                              _180
                                  CALL                              giga_vAC                    ; Main: IF C$ = "HEALTH" THEN 180

_134                              LDWI                              0x75a0
                                  STW                               strSrcAddr
                                  LDWI                              0x78a0
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _136 4
                                  LDWI                              _160
                                  CALL                              giga_vAC                    ; Main: IF C$ = "MONEY" THEN 160

_136                              LDWI                              0x75a0
                                  STW                               strSrcAddr
                                  LDWI                              0x76c5
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _138 5
                                  LDWI                              _145
                                  CALL                              giga_vAC                    ; Main: IF C$ = "JOB" THEN 145

_138                              PrintString                       _str_0x76bf
                                  PrintString                       _N$
                                  PrintString                       _str_0x76ac
                                  PrintString                       _C$
                                  PrintString                       _str_0x74ee
                                  NewLine                                                       ; Main: PRINT "OH, ";N$;", YOUR ANSWER OF ";C$;" IS GREEK TO ME."

_140                              LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: GOTO 250

_145                              NewLine                           
                                  PrintString                       _str_0x74d2
                                  PrintString                       _N$
                                  PrintString                       _str_0x74c0
                                  NewLine                                                       ; Main: PRINT : PRINT "I CAN SYMPATHIZE WITH YOU ";N$;". I HAVE TO WORK"

_148                              NewLine                                                       ; Main: PRINT "VERY LONG HOURS FOR NO PAY -- AND SOME OF MY BOSSES"

_150                              PrintString                       _str_0x73d1
                                  PrintString                       _N$
                                  PrintString                       _str_0x76a9
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  NewLine                                                       ; Main: PRINT "REALLY BEAT ON MY KEYBOARD.MY ADVICE TO YOU, ";N$;","

_153                              PrintString                       _str_0x72ca
                                  NewLine                                                       ; Main: PRINT "IS TO OPEN A RETAIL COMPUTER STORE. IT IS GREAT FUN."

_155                              LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: GOTO 250

_160                              NewLine                           
                                  PrintString                       _str_0x76a0
                                  PrintString                       _N$
                                  PrintString                       _str_0x73aa
                                  NewLine                                                       ; Main: PRINT : PRINT "SORRY, ";N$;", I AM BROKE TOO. WHY DO YOU NOT SELL"

_162                              PrintString                       _str_0x71cb
                                  NewLine                                                       ; Main: PRINT "ENCYCLOPEADIAS OR MARRY SOMEONE RICH OR STOP EATING"

_164                              PrintString                       _str_0x72a5
                                  NewLine                                                       ; Main: PRINT "SO YOU WILL NOT NEED SO MUCH MONEY?"

_170                              LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: GOTO 250

_180                              PrintString                       _str_0x74ad
                                  PrintString                       _N$
                                  PrintString                       _str_0x74a7
                                  NewLine                           
                                  NewLine                                                       ; Main: PRINT "MY ADVICE TO YOU ";N$;" IS:" : PRINT

_185                              PrintString                       _str_0x71b7
                                  NewLine                                                       ; Main: PRINT "1. TAKE TWO ASPRIN"

_188                              PrintString                       _str_0x70cb
                                  NewLine                                                       ; Main: PRINT "2. DRINK PLENTY OF FLUIDS (ORANGE JUICE, NOT BEER!)"

_190                              PrintString                       _str_0x71a1
                                  NewLine                           
                                  NewLine                                                       ; Main: PRINT "3. GO TO BED (ALONE)" : PRINT

_195                              LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: GOTO 250

_200                              NewLine                           
                                  PrintString                       _str_0x70a3
                                  LDWI                              0x74a1
                                  Input                             
                                  NewLine                           
                                  LDWI                              0x6fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringUpper                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  LDWI                              0x6fa0
                                  StringCopy                                                    ; Main: PRINT: INPUT "IS YOUR PROBLEM TOO MUCH OR TOO LITTLE",D$: PRINT : D$ = UPPER$(D$)

_210                              LDWI                              0x6fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x6ef6
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _212 6
                                  LDWI                              _220
                                  CALL                              giga_vAC                    ; Main: IF D$="TOO MUCH" THEN 220

_212                              LDWI                              0x6fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x6eea
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _215 7
                                  LDWI                              _230
                                  CALL                              giga_vAC                    ; Main: IF D$="TOO LITTLE" THEN 230

_215                              PrintString                       _str_0x6ed2
                                  PrintString                       _N$
                                  PrintString                       _str_0x6eb6
                                  NewLine                                                       ; Main: PRINT "DO NOT GET ALL SHOOK, ";N$;", JUST ANSWER THE QUESTION"

_217                              LDWI                              0x6eb0
                                  Input                             
                                  LDWI                              0x6fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringUpper                       
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x6fa0
                                  StringCopy                        
                                  LDWI                              _210
                                  CALL                              giga_vAC                    ; Main: INPUT "WITH TOO MUCH OR TOO LITTLE. WHICH IS IT";D$ : D$ = UPPER$(D$) : GOTO 210

_220                              NewLine                           
                                  PrintString                       _str_0x6cc7                 ; Main: PRINT : PRINT "YOU CALL THAT A PROBLEM?!!I SHOULD HAVE SUCH PROBLEMS! ";

_225                              PrintString                       _str_0x6dc1
                                  PrintString                       _N$
                                  PrintString                       _str_0x6dab
                                  NewLine                                                       ; Main: PRINT "IF IT BOTHERS YOU, ";N$;",TAKE A COLD SHOWER."

_228                              LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: GOTO 250

_230                              NewLine                           
                                  PrintString                       _str_0x6ca8
                                  PrintString                       _N$
                                  PrintString                       _str_0x6ba8
                                  NewLine                                                       ; Main: PRINT : PRINT "WHY ARE YOU HERE IN SUFFERN, ";N$;"?  YOU SHOULD BE IN TOKYO OR NEW YORK OR AMSTERDAM OR SOMEPLACE WITH SOME REAL ACTION."

                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
_250                              NewLine                           
                                  PrintString                       _str_0x6adc
                                  PrintString                       _N$                         ; Main: PRINT : PRINT "ANY MORE PROBLEMS YOU WANTSOLVED, ";N$;

_260                              LDWI                              0x6ea6
                                  Input                             
                                  NewLine                           
                                  LDWI                              0x69a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringUpper                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x69a0
                                  StringCopy                                                    ; Main: INPUT E$: PRINT : E$ = UPPER$(E$)

_270                              LDWI                              0x69a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7bc5
                                  StringCmp                         
                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  ANDI                              1
                                  JumpFalse                         _273 8
                                  LDWI                              _280
                                  CALL                              giga_vAC                    ; Main: IF E$="YES" THEN 280

_273                              LDWI                              0x69a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7bc1
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _275 9
                                  LDWI                              _300
                                  CALL                              giga_vAC                    ; Main: IF E$="NO" THEN 300

_275                              PrintString                       _str_0x6aba
                                  PrintString                       _N$
                                  PrintString                       _str_0x7bbe
                                  NewLine                                                       ; Main: PRINT "JUST A SIMPLE YES OR NO PLEASE, ";N$;"."

_277                              LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: GOTO 250

                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
_280                              PrintString                       _str_0x68db                 ; Main: PRINT "WHAT KIND (SEX, MONEY, HEALTH, JOB)";

_282                              LDWI                              _125
                                  CALL                              giga_vAC                    ; Main: GOTO 125

_300                              NewLine                                                       ; Main: PRINT

_302                              PrintString                       _str_0x68b6
                                  PrintString                       _N$
                                  PrintString                       _str_0x7bbe
                                  NewLine                                                       ; Main: PRINT "THAT WILL BE $5.00 FOR THE ADVICE, ";N$;"."

_305                              PrintString                       _str_0x67d7
                                  NewLine                                                       ; Main: PRINT "PLEASE LEAVE THE MONEY ON THE TERMINAL."

_307                              LDI                               1
                                  STW                               _I
                                  LDWI                              2000
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
_next_0x07dd                      ForNextFarVarAdd                  _I _next_0x07dd 0xb0 0xb2   ; Main: FOR I=1 TO 2000: NEXT I

_310                              NewLine                                                       ; Main: PRINT

_315                              PrintString                       _str_0x6aa1
                                  LDWI                              0x6da5
                                  Input                             
                                  NewLine                           
                                  LDWI                              0x66a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringUpper                       
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x66a0
                                  StringCopy                                                    ; Main: INPUT "DID YOU LEAVE THE MONEY",G$: PRINT : G$ = UPPER$(G$)

_325                              LDWI                              0x66a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7bc5
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _330 10
                                  LDWI                              _350
                                  CALL                              giga_vAC                    ; Main: IF G$="YES" THEN 350

_330                              LDWI                              0x66a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7bc1
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _335 11
                                  LDWI                              _370
                                  CALL                              giga_vAC                    ; Main: IF G$="NO" THEN 370

_335                              PrintString                       _str_0x68a5
                                  PrintString                       _G$
                                  PrintString                       _str_0x67c7
                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
                                  PrintString                       _N$
                                  PrintString                       _str_0x7bbe
                                  NewLine                                                       ; Main: PRINT "YOUR ANSWER OF ";G$;" CONFUSES ME, ";N$;"."

_340                              PrintString                       _str_0x67a7
                                  NewLine                           
                                  LDWI                              _315
                                  CALL                              giga_vAC                    ; Main: PRINT "PLEASE RESPOND WITH YES OR NO.": GOTO 315

_350                              NewLine                           
                                  PrintString                       _str_0x6ba1
                                  PrintString                       _N$
                                  PrintString                       _str_0x65e0                 ; Main: PRINT : PRINT "HEY, ";N$;"??? YOU LEFT NO MONEY AT ALL! ";

                                  STLW                              0xFE
                                  LDWI                              _page_0x0ea0
                                  CALL                              giga_vAC
_page_0x0ea0                      LDLW                              0xFE
_355                              PrintString                       _str_0x65ad
                                  NewLine                                                       ; Main: PRINT "YOU ARE CHEATING ME OUT OF MY HARD-EARNED LIVING."

_360                              NewLine                           
                                  PrintString                       _str_0x64ee
                                  PrintString                       _N$
                                  PrintString                       _str_0x68a0
                                  NewLine                                                       ; Main: PRINT:PRINT "WHAT A RIP OFF, ";N$;"!!!"

_365                              LDWI                              _385
                                  CALL                              giga_vAC                    ; Main: GOTO 385

_370                              NewLine                           
                                  PrintString                       _str_0x64dc
                                  PrintString                       _N$
                                  STLW                              0xFE
                                  LDWI                              _page_0x0fa0
                                  CALL                              giga_vAC
_page_0x0fa0                      LDLW                              0xFE
                                  PrintString                       _str_0x63a6
                                  NewLine                                                       ; Main: PRINT : PRINT "THAT IS HONEST, ";N$;", BUT HOW CAN I PROCEED WIT MY PSYCHOLOGY STUDIES IF MY PATIENTS DO NOT PAY THEIR BILLS?"

_385                              NewLine                           
                                  PrintString                       _str_0x64cd
                                  PrintString                       _N$
                                  PrintString                       _str_0x7bbe
                                  NewLine                           
                                  LDWI                              _999
                                  CALL                              giga_vAC                    ; Main: PRINT:PRINT "TAKE A WALK, ";N$;".":GOTO 999

_390                              PrintString                       _str_0x64b9
                                  PrintString                       _N$
                                  STLW                              0xFE
                                  LDWI                              _page_0x10a0
                                  CALL                              giga_vAC
_page_0x10a0                      LDLW                              0xFE
                                  PrintString                       _str_0x64a5
                                  NewLine                                                       ; Main: PRINT "NICE MEETING YOU, ";N$;", HAVE A NICE DAY."

_999                              HALT                                                          ; Main: END

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

loadRegs                          EQU     0x5ba2
saveRegs                          EQU     0x5aa5
resetVideoFlags                   EQU     0x56bd
initClearFuncs                    EQU     0x5ca5
clearVertBlinds                   EQU     0x5ac3
clearCursorRow                    EQU     0x5eb6
input                             EQU     0x59a1
inputExt1                         EQU     0x60a6
inputExt2                         EQU     0x58d3
inputCursor                       EQU     0x57bd
inputKeys                         EQU     0x61a4
inputIntVar                       EQU     0x56d6
inputStrVar                       EQU     0x57a6
inputReturn                       EQU     0x5cbc
inputDelete                       EQU     0x5db9
inputPrint                        EQU     0x57db
inputNewline                      EQU     0x56ea
printInit                         EQU     0x5ea0
printText                         EQU     0x5da0
printChr                          EQU     0x65a0
printChar                         EQU     0x5fa7
newLineScroll                     EQU     0x62a2
integerStr                        EQU     0x5bc0
stringCopy                        EQU     0x56c9
stringCmp                         EQU     0x59c5
stringUpper                       EQU     0x58a7
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    
                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


                    ; hard coded to load register8 to register15
saveRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

saveRegs_loop       LDW     regsAddr
                    DEEK
                    DOKE    regsWork
                    INC     regsWork
                    INC     regsWork
                    INC     regsAddr
                    INC     regsAddr
                    LDW     regsAddr
                    SUBI    register15
                    BLE     saveRegs_loop
                    RET



                    ; hard coded to save register8 to register15
loadRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

loadRegs_loop       LDW     regsWork
                    DEEK
                    DOKE    regsAddr
                    INC     regsAddr
                    INC     regsAddr
                    INC     regsWork
                    INC     regsWork
                    LDW     regsAddr
                    SUBI    register15
                    BLE     loadRegs_loop
                    RET



                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     inpCursXYBak
                    STW     inpPrnXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     127
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; draws cursor
inputCursor         PUSH
                    LDW     textChr
                    XORI    127
                    BNE     inputC_skip         ; don't flash cursor if char != 127
                    LD      giga_ledState
                    ANDI    2
                    BNE     inputC_skip         ; use ledState as a hack timer
                    LDI     32
                    STW     textChr             ; alternate between 32 and 127
                    
inputC_skip         LDW     inpCursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      inpCursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     inpCursXYOfs        ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     32
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    5                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     inpCursXYOfs        ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     inpCursXYOfs        ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     inpPrnXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDW     inpCursXYBak        ; new cursor position
                    ADDW    inpCursXYOfs
                    STW     inpCursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET


                    ; compares two strings: returns 0 for smaller, 1 for equal and 2 for larger
stringCmp           LDW     strSrcAddr
                    PEEK
                    STW     strSrcLen                           ; save str length
                    LDW     strSrcAddr2
                    PEEK
                    STW     strSrcLen2                          ; save str length
                    INC     strSrcAddr
                    INC     strSrcAddr2                         ; skip lengths
                    
stringC_loop        LDW     strSrcAddr
                    PEEK
                    BEQ     stringC_equal                       ; this assumes your strings are valid, (i.e. valid length and terminating bytes)
                    STW     strChr
                    LDW     strSrcAddr2
                    PEEK
                    SUBW    strChr
                    BLT     stringC_larger
                    BGT     stringC_smaller
                    INC     strSrcAddr
                    INC     strSrcAddr2
                    BRA     stringC_loop

stringC_smaller     LDI     0
                    RET
                    
stringC_equal       LDW     strSrcLen
                    SUBW    strSrcLen2
                    BLT     stringC_smaller
                    BGT     stringC_larger                      ; if strings are equal, choose based on length
                    LDI     1
                    RET
                    
stringC_larger      LDI     2
                    RET


                    ; creates an upper case string
stringUpper         LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; dst length = src length
    
stringUp_next       INC     strSrcAddr                          ; next char, (skips length byte)
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    BEQ     stringUp_exit
                    ST      strChr
                    SUBI    97
                    BLT     stringUp_char
                    LD      strChr
                    SUBI    122
                    BGT     stringUp_char
                    LD      strChr                              ; >= 97 'a' and <= 122 'z'
                    SUBI    32
                    ST      strChr
                    
stringUp_char       LD      strChr
                    POKE    strDstAddr                          ; upper case char
                    BRA     stringUp_next
                    
stringUp_exit       POKE    strDstAddr                          ; terminating 0
                    RET

