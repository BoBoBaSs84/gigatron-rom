_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0xff30
textWorkArea                      EQU                               0xff40

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_30                               EQU                               0x023c
_100                              EQU                               0x022a
_110                              EQU                               0x022a
_120                              EQU                               0x024b
_130                              EQU                               0x025a
_140                              EQU                               0x0269
_150                              EQU                               0x0278
_160                              EQU                               0x027c
_170                              EQU                               0x028b
_180                              EQU                               0x0295
_190                              EQU                               0x02a8
_200                              EQU                               0x02bb
_210                              EQU                               0x02bf
_220                              EQU                               0x02c4
_230                              EQU                               0x02c9
_240                              EQU                               0x02d6
_250                              EQU                               0x02e3
_260                              EQU                               0x0302
_270                              EQU                               0x0307
_280                              EQU                               0x031a
_290                              EQU                               0x032d
_300                              EQU                               0x0340
_310                              EQU                               0x0353
_320                              EQU                               0x0366
_330                              EQU                               0x0379
_340                              EQU                               0x038c
_350                              EQU                               0x039f
_360                              EQU                               0x03b2
_370                              EQU                               0x03c5
_380                              EQU                               0x03d8
_390                              EQU                               0x03eb
_400                              EQU                               0x040f
_410                              EQU                               0x0422
_420                              EQU                               0x0435
_430                              EQU                               0x0448
_440                              EQU                               0x045b
_450                              EQU                               0x046e
_460                              EQU                               0x0481
_470                              EQU                               0x0494
_480                              EQU                               0x04a7
_490                              EQU                               0x04ac
_500                              EQU                               0x04bb
_510                              EQU                               0x04c1
_520                              EQU                               0x04cf
_530                              EQU                               0x04d9
_540                              EQU                               0x04e3
_550                              EQU                               0x0520
_560                              EQU                               0x0525
_570                              EQU                               0x0536
_580                              EQU                               0x0549
_590                              EQU                               0x055a
_600                              EQU                               0x055f
_610                              EQU                               0x0572
_620                              EQU                               0x0585
_630                              EQU                               0x058a
_640                              EQU                               0x059d
_650                              EQU                               0x05a2
_660                              EQU                               0x05b5
_670                              EQU                               0x05ba
_680                              EQU                               0x05c9
_690                              EQU                               0x05ce
_700                              EQU                               0x05dd
_710                              EQU                               0x05e2
_720                              EQU                               0x05f1
_730                              EQU                               0x05f6
_740                              EQU                               0x0613
_750                              EQU                               0x0627
_760                              EQU                               0x0636
_770                              EQU                               0x0649
_780                              EQU                               0x064e
_790                              EQU                               0x0662
_800                              EQU                               0x0671
_810                              EQU                               0x0684
_820                              EQU                               0x0689
_830                              EQU                               0x069d
_840                              EQU                               0x06ac
_850                              EQU                               0x06bf
_860                              EQU                               0x06c4
_870                              EQU                               0x06d3
_880                              EQU                               0x06d8
_890                              EQU                               0x06e7
_900                              EQU                               0x06ec
_910                              EQU                               0x08a2
_920                              EQU                               0x08b1
_930                              EQU                               0x08b6
_940                              EQU                               0x08c5
_950                              EQU                               0x08ca
_960                              EQU                               0x08d9
_970                              EQU                               0x08de
_980                              EQU                               0x08ed
_990                              EQU                               0x09a2
_1000                             EQU                               0x09b1
_1010                             EQU                               0x09b6
_1020                             EQU                               0x09c5
_1030                             EQU                               0x09ca
_1040                             EQU                               0x09d9
_1050                             EQU                               0x09de
_1060                             EQU                               0x09ed
_1070                             EQU                               0x0aa2
_1080                             EQU                               0x0ab1
_1090                             EQU                               0x0ab6
_1100                             EQU                               0x0ac5
_1110                             EQU                               0x0aca
_1120                             EQU                               0x0ad9
_1130                             EQU                               0x0ade
_1140                             EQU                               0x0aed
_1150                             EQU                               0x0ba2
_1160                             EQU                               0x0bb1
_1170                             EQU                               0x0bb6
_1180                             EQU                               0x0bc5
_1190                             EQU                               0x0bca
_1200                             EQU                               0x0bd9
_1210                             EQU                               0x0bde
_1220                             EQU                               0x0bed
_1230                             EQU                               0x0ca2
_1240                             EQU                               0x0cb1
_1250                             EQU                               0x0cb6
_1260                             EQU                               0x0cc5
_1270                             EQU                               0x0cca
_1280                             EQU                               0x0ccf
_1290                             EQU                               0x0cd8
_1300                             EQU                               0x0ce6
_1310                             EQU                               0x0ce8
_1320                             EQU                               0x0ced
_1330                             EQU                               0x0da2
_1340                             EQU                               0x0db0
_1341                             EQU                               0x0db2
_1342                             EQU                               0x0dc6
_1343                             EQU                               0x0dd5
_1344                             EQU                               0x0de8
_1350                             EQU                               0x0ded
_9999                             EQU                               0x0def
_page_0x0300                      EQU                               0x0300
_page_0x0400                      EQU                               0x0400
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_page_0x09a0                      EQU                               0x09a0
_page_0x0aa0                      EQU                               0x0aa0
_page_0x0ba0                      EQU                               0x0ba0
_page_0x0ca0                      EQU                               0x0ca0
_page_0x0da0                      EQU                               0x0da0

; Global Variables
_M                                EQU                               0x0030
_P                                EQU                               0x0032
_X                                EQU                               0x0034
_Y                                EQU                               0x0036
_Z                                EQU                               0x0038
_Q4                               EQU                               0x003a
_T8                               EQU                               0x003c

; Local Variables

; Arrays

; Strings
_A$                               EQU                               0x7da0
_A$                               DB                                0 '' 0

; Constant Strings
_str_0x7fce                       EQU                               0x7fce
_str_0x7fce                       DB                                48 'YOU ARE IN THE H&M CASINO,IN FRONT OF ONE OF OUR' 0
_str_0x7fa7                       EQU                               0x7fa7
_str_0x7fa7                       DB                                37 'ONE-ARM BANDITS. BET FROM $1 TO $100.' 0
_str_0x7ec2                       EQU                               0x7ec2
_str_0x7ec2                       DB                                60 'TO PULL THE ARM, PUNCH THE RETURN KEY AFTER MAKING YOUR BET.' 0
_str_0x7eb8                       EQU                               0x7eb8
_str_0x7eb8                       DB                                8 'YOUR BET' 0
_str_0x7fa4                       EQU                               0x7fa4
_str_0x7fa4                       DB                                1 '?' 0
_str_0x7ead                       EQU                               0x7ead
_str_0x7ead                       DB                                9 'YOU LOST.' 0
_str_0x7ea6                       EQU                               0x7ea6
_str_0x7ea6                       DB                                5 'AGAIN' 0
_str_0x7fa1                       EQU                               0x7fa1
_str_0x7fa1                       DB                                1 'Y' 0
_str_0x7ccd                       EQU                               0x7ccd
_str_0x7ccd                       DB                                49 'PAY UP!  PLEASE LEAVE YOUR MONEY ON THE TERMINAL.' 0
_str_0x7cb7                       EQU                               0x7cb7
_str_0x7cb7                       DB                                20 'HEY, YOU BROKE EVEN.' 0
_str_0x7bd3                       EQU                               0x7bd3
_str_0x7bd3                       DB                                43 'COLLECT YOUR WINNINGS FROM THE H&M CASHIER.' 0
_str_0x7ca7                       EQU                               0x7ca7
_str_0x7ca7                       DB                                14 '**TOP DOLLAR**' 0
_str_0x7bc9                       EQU                               0x7bc9
_str_0x7bc9                       DB                                8 'YOU WON!' 0
_str_0x7bba                       EQU                               0x7bba
_str_0x7bba                       DB                                13 '***JACKPOT***' 0
_str_0x7bac                       EQU                               0x7bac
_str_0x7bac                       DB                                12 '*DOUBLE BAR*' 0
_str_0x7ae9                       EQU                               0x7ae9
_str_0x7ae9                       DB                                21 'HOUSE LIMITS ARE $100' 0
_str_0x7ad6                       EQU                               0x7ad6
_str_0x7ad6                       DB                                17 'MINIMUM BET IS $1' 0
_str_0x7ea1                       EQU                               0x7ea1
_str_0x7ea1                       DB                                3 'BAR' 0
_str_0x7ca1                       EQU                               0x7ca1
_str_0x7ca1                       DB                                4 'BELL' 0
_str_0x7ba4                       EQU                               0x7ba4
_str_0x7ba4                       DB                                6 'ORANGE' 0
_str_0x7acf                       EQU                               0x7acf
_str_0x7acf                       DB                                5 'LEMON' 0
_str_0x7ac9                       EQU                               0x7ac9
_str_0x7ac9                       DB                                4 'PLUM' 0
_str_0x7ac1                       EQU                               0x7ac1
_str_0x7ac1                       DB                                6 'CHERRY' 0
_str_0x7abb                       EQU                               0x7abb
_str_0x7abb                       DB                                4 ' BAR' 0
_str_0x7ab4                       EQU                               0x7ab4
_str_0x7ab4                       DB                                5 ' BELL' 0
_str_0x7aab                       EQU                               0x7aab
_str_0x7aab                       DB                                7 ' ORANGE' 0
_str_0x7aa3                       EQU                               0x7aa3
_str_0x7aa3                       DB                                6 ' LEMON' 0
_str_0x79f9                       EQU                               0x79f9
_str_0x79f9                       DB                                5 ' PLUM' 0
_str_0x79f0                       EQU                               0x79f0
_str_0x79f0                       DB                                7 ' CHERRY' 0
_str_0x79e6                       EQU                               0x79e6
_str_0x79e6                       DB                                8 'DOUBLE!!' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0xff28                 EQU                               0xff28
_inputVars_0xff28                 DW                                0x0030 
_inputStrs_0xff26                 EQU                               0xff26
_inputStrs_0xff26                 DW                                0x7fa4 
_inputTypes_0xff22                EQU                               0xff22
_inputTypes_0xff22                DW                                0x5f03 0x0000 
_input_0xff2a                     EQU                               0xff2a
_input_0xff2a                     DW                                0xff28 0xff26 0xff22 
_inputVars_0xff1a                 EQU                               0xff1a
_inputVars_0xff1a                 DW                                0x7da0 
_inputStrs_0xff18                 EQU                               0xff18
_inputStrs_0xff18                 DW                                0x7fa4 
_inputTypes_0xff14                EQU                               0xff14
_inputTypes_0xff14                DW                                0x5f05 0x0000 
_input_0xff1c                     EQU                               0xff1c
_input_0xff1c                     DW                                0xff1a 0xff18 0xff14 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  InitLtOp                        
                                  InitGtOp                                                      ; Main: INIT

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  ClearVertBlinds                                               ; Main: cls

                                  LDI                               0
                                  STW                               _M                          ; Main: M = 0

_30                               NewLine                           
                                  NewLine                           
                                  NewLine                                                       ; Main: PRINT: PRINT: PRINT

_120                              PrintString                       _str_0x7fce
                                  NewLine                                                       ; Main: PRINT "YOU ARE IN THE H&M CASINO,IN FRONT OF ONE OF OUR"

_130                              PrintString                       _str_0x7fa7
                                  NewLine                                                       ; Main: PRINT "ONE-ARM BANDITS. BET FROM $1 TO $100."

_140                              PrintString                       _str_0x7ec2
                                  NewLine                                                       ; Main: PRINT "TO PULL THE ARM, PUNCH THE RETURN KEY AFTER MAKING YOUR BET."

_150                              LDI                               200
                                  STW                               _P                          ; Main: P=200

_160                              NewLine                           
                                  PrintString                       _str_0x7eb8                 ; Main: PRINT: PRINT "YOUR BET";

_170                              LDWI                              0xff2a
                                  Input                                                         ; Main: INPUT M

_180                              LDW                               _M
                                  SUBI                              100
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _190 0
                                  LDWI                              _860
                                  CALL                              giga_vAC                    ; Main: IF M>100 THEN 860

_190                              LDW                               _M
                                  SUBI                              1
                                  CALL                              convertLtOpAddr
                                  JumpFalse                         _200 1
                                  LDWI                              _880
                                  CALL                              giga_vAC                    ; Main: IF M<1 THEN 880

_200                              LDW                               _M
                                  STW                               _M                          ; Main: M=(M)

_210                              LDWI                              _1270
                                  CALL                              giga_vAC                    ; Main: GOSUB 1270

_220                              NewLine                                                       ; Main: PRINT

_230                              LDI                               0x06
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(6)+1)

_240                              LDI                               0x06
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _Y                          ; Main: Y=(RND(6)+1)

_250                              LDI                               0x06
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _Z                          ; Main: Z=(RND(6)+1)

                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
_260                              NewLine                                                       ; Main: PRINT

_270                              LDW                               _X
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _280 2
                                  LDWI                              _910
                                  CALL                              giga_vAC                    ; Main: IF X=1 THEN 910

_280                              LDW                               _X
                                  XORI                              2
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _290 3
                                  LDWI                              _930
                                  CALL                              giga_vAC                    ; Main: IF X=2 THEN 930

_290                              LDW                               _X
                                  XORI                              3
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _300 4
                                  LDWI                              _950
                                  CALL                              giga_vAC                    ; Main: IF X=3 THEN 950

_300                              LDW                               _X
                                  XORI                              4
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _310 5
                                  LDWI                              _970
                                  CALL                              giga_vAC                    ; Main: IF X=4 THEN 970

_310                              LDW                               _X
                                  XORI                              5
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _320 6
                                  LDWI                              _990
                                  CALL                              giga_vAC                    ; Main: IF X=5 THEN 990

_320                              LDW                               _X
                                  XORI                              6
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _330 7
                                  LDWI                              _1010
                                  CALL                              giga_vAC                    ; Main: IF X=6 THEN 1010

_330                              LDW                               _Y
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _340 8
                                  LDWI                              _1030
                                  CALL                              giga_vAC                    ; Main: IF Y=1 THEN 1030

_340                              LDW                               _Y
                                  XORI                              2
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _350 9
                                  LDWI                              _1050
                                  CALL                              giga_vAC                    ; Main: IF Y=2 THEN 1050

_350                              LDW                               _Y
                                  XORI                              3
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _360 10
                                  LDWI                              _1070
                                  CALL                              giga_vAC                    ; Main: IF Y=3 THEN 1070

_360                              LDW                               _Y
                                  XORI                              4
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _370 11
                                  LDWI                              _1090
                                  CALL                              giga_vAC                    ; Main: IF Y=4 THEN 1090

_370                              LDW                               _Y
                                  XORI                              5
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _380 12
                                  LDWI                              _1110
                                  CALL                              giga_vAC                    ; Main: IF Y=5 THEN 1110

_380                              LDW                               _Y
                                  XORI                              6
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _390 13
                                  LDWI                              _1130
                                  CALL                              giga_vAC                    ; Main: IF Y=6 THEN 1130

_390                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  JumpFalse                         _400 14
                                  LDWI                              _1150
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 1150

_400                              LDW                               _Z
                                  XORI                              2
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _410 15
                                  LDWI                              _1170
                                  CALL                              giga_vAC                    ; Main: IF Z=2 THEN 1170

_410                              LDW                               _Z
                                  XORI                              3
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _420 16
                                  LDWI                              _1190
                                  CALL                              giga_vAC                    ; Main: IF Z=3 THEN 1190

_420                              LDW                               _Z
                                  XORI                              4
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _430 17
                                  LDWI                              _1210
                                  CALL                              giga_vAC                    ; Main: IF Z=4 THEN 1210

_430                              LDW                               _Z
                                  XORI                              5
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _440 18
                                  LDWI                              _1230
                                  CALL                              giga_vAC                    ; Main: IF Z=5 THEN 1230

_440                              LDW                               _Z
                                  XORI                              6
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _450 19
                                  LDWI                              _1250
                                  CALL                              giga_vAC                    ; Main: IF Z=6 THEN 1250

_450                              LDW                               _X
                                  XORW                              _Y
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _460 20
                                  LDWI                              _600
                                  CALL                              giga_vAC                    ; Main: IF X=Y THEN 600

_460                              LDW                               _X
                                  XORW                              _Z
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _470 21
                                  LDWI                              _630
                                  CALL                              giga_vAC                    ; Main: IF X=Z THEN 630

_470                              LDW                               _Y
                                  XORW                              _Z
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _480 22
                                  LDWI                              _650
                                  CALL                              giga_vAC                    ; Main: IF Y=Z THEN 650

_480                              NewLine                                                       ; Main: PRINT

_490                              PrintString                       _str_0x7ead
                                  NewLine                                                       ; Main: PRINT "YOU LOST."

_500                              LDW                               _P
                                  SUBW                              _M
                                  STW                               _P                          ; Main: P=P-M

_510                              LDW                               _P
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: PRINT "YOUR STANDINGS ARE $"P

_520                              PrintString                       _str_0x7ea6                 ; Main: PRINT "AGAIN";

_530                              LDWI                              0xff1c
                                  Input                                                         ; Main: INPUT A$

_540                              LDWI                              0x7da0
                                  STW                               strSrcAddr
                                  LDWI                              0xff40
                                  StringUpper                       
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  LDWI                              0xff40
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa1
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _550 23
                                  LDWI                              _160
                                  CALL                              giga_vAC                    ; Main: IF upper$(A$)="Y" THEN 160

_550                              NewLine                                                       ; Main: PRINT

_560                              LDW                               _P
                                  CALL                              convertLtOpAddr
                                  JumpFalse                         _570 24
                                  LDWI                              _670
                                  CALL                              giga_vAC                    ; Main: IF P<0 THEN 670

_570                              LDW                               _P
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _580 25
                                  LDWI                              _690
                                  CALL                              giga_vAC                    ; Main: IF P=0 THEN 690

_580                              LDW                               _P
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _590 26
                                  LDWI                              _710
                                  CALL                              giga_vAC                    ; Main: IF P>0 THEN 710

_590                              LDWI                              _1350
                                  CALL                              giga_vAC                    ; Main: GOTO 1350

_600                              LDW                               _Y
                                  XORW                              _Z
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _610 27
                                  LDWI                              _730
                                  CALL                              giga_vAC                    ; Main: IF Y=Z THEN 730

_610                              LDW                               _Y
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _620 28
                                  LDWI                              _820
                                  CALL                              giga_vAC                    ; Main: IF Y=1 THEN 820

_620                              LDWI                              _1341
                                  CALL                              giga_vAC                    ; Main: GOTO 1341

_630                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _640 29
                                  LDWI                              _820
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 820

_640                              LDWI                              _470
                                  CALL                              giga_vAC                    ; Main: GOTO 470

_650                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _660 30
                                  LDWI                              _820
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 820

_660                              LDWI                              _1341
                                  CALL                              giga_vAC                    ; Main: GOTO 1341

_670                              PrintString                       _str_0x7ccd
                                  NewLine                                                       ; Main: PRINT "PAY UP!  PLEASE LEAVE YOUR MONEY ON THE TERMINAL."

_680                              LDWI                              _1350
                                  CALL                              giga_vAC                    ; Main: GOTO 1350

_690                              PrintString                       _str_0x7cb7
                                  NewLine                                                       ; Main: PRINT "HEY, YOU BROKE EVEN."

_700                              LDWI                              _1350
                                  CALL                              giga_vAC                    ; Main: GOTO 1350

_710                              PrintString                       _str_0x7bd3
                                  NewLine                                                       ; Main: PRINT "COLLECT YOUR WINNINGS FROM THE H&M CASHIER."

_720                              LDWI                              _1350
                                  CALL                              giga_vAC                    ; Main: GOTO 1350

_730                              LDW                               _Z
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _740 31
                                  LDWI                              _780
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 780

_740                              NewLine                           
                                  PrintString                       _str_0x7ca7
                                  NewLine                                                       ; Main: PRINT: PRINT "**TOP DOLLAR**"

_750                              PrintString                       _str_0x7bc9
                                  NewLine                                                       ; Main: PRINT "YOU WON!"

_760                              LDI                               10
                                  STW                               mathX
                                  LDW                               _M
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDW                              _M
                                  ADDW                              _P
                                  STW                               _P                          ; Main: P=(((10*M)+M)+P)

_770                              LDWI                              _510
                                  CALL                              giga_vAC                    ; Main: GOTO 510

_780                              NewLine                           
                                  PrintString                       _str_0x7bba
                                  NewLine                                                       ; Main: PRINT:PRINT "***JACKPOT***"

_790                              PrintString                       _str_0x7bc9
                                  NewLine                                                       ; Main: PRINT "YOU WON!"

_800                              LDI                               100
                                  STW                               mathX
                                  LDW                               _M
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDW                              _M
                                  ADDW                              _P
                                  STW                               _P                          ; Main: P=(((100*M)+M)+P)

_810                              LDWI                              _510
                                  CALL                              giga_vAC                    ; Main: GOTO 510

_820                              NewLine                           
                                  PrintString                       _str_0x7bac
                                  NewLine                                                       ; Main: PRINT:PRINT "*DOUBLE BAR*"

_830                              PrintString                       _str_0x7bc9
                                  NewLine                                                       ; Main: PRINT "YOU WON!"

_840                              LDI                               5
                                  STW                               mathX
                                  LDW                               _M
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDW                              _M
                                  ADDW                              _P
                                  STW                               _P                          ; Main: P=(((5*M)+M)+P)

_850                              LDWI                              _510
                                  CALL                              giga_vAC                    ; Main: GOTO 510

_860                              PrintString                       _str_0x7ae9
                                  NewLine                                                       ; Main: PRINT "HOUSE LIMITS ARE $100"

_870                              LDWI                              _160
                                  CALL                              giga_vAC                    ; Main: GOTO 160

_880                              PrintString                       _str_0x7ad6
                                  NewLine                                                       ; Main: PRINT "MINIMUM BET IS $1"

_890                              LDWI                              _160
                                  CALL                              giga_vAC                    ; Main: GOTO 160

_900                              LDWI                              _220
                                  CALL                              giga_vAC                    ; Main: GOTO 220

                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
_910                              PrintString                       _str_0x7ea1
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT "BAR";:GOSUB 1310

_920                              LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: GOTO 330

_930                              PrintString                       _str_0x7ca1
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT "BELL";:GOSUB 1310

_940                              LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: GOTO 330

_950                              PrintString                       _str_0x7ba4
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT "ORANGE";:GOSUB 1310

_960                              LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: GOTO 330

_970                              PrintString                       _str_0x7acf
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT "LEMON";:GOSUB 1310

_980                              LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: GOTO 330

                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
_990                              PrintString                       _str_0x7ac9
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT "PLUM";:GOSUB 1310

_1000                             LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: GOTO 330

_1010                             PrintString                       _str_0x7ac1
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT "CHERRY";:GOSUB 1310

_1020                             LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: GOTO 330

_1030                             PrintString                       _str_0x7abb
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT " BAR";:GOSUB 1310

_1040                             LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: GOTO 390

_1050                             PrintString                       _str_0x7ab4
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT " BELL";:GOSUB 1310

_1060                             LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: GOTO 390

                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
_1070                             PrintString                       _str_0x7aab
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT " ORANGE";:GOSUB 1310

_1080                             LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: GOTO 390

_1090                             PrintString                       _str_0x7aa3
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT " LEMON";:GOSUB 1310

_1100                             LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: GOTO 390

_1110                             PrintString                       _str_0x79f9
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT " PLUM";:GOSUB 1310

_1120                             LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: GOTO 390

_1130                             PrintString                       _str_0x79f0
                                  LDWI                              _1310
                                  CALL                              giga_vAC                    ; Main: PRINT " CHERRY";:GOSUB 1310

_1140                             LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: GOTO 390

                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
_1150                             PrintString                       _str_0x7abb
                                  NewLine                                                       ; Main: PRINT " BAR"

_1160                             LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: GOTO 450

_1170                             PrintString                       _str_0x7ab4
                                  NewLine                                                       ; Main: PRINT " BELL"

_1180                             LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: GOTO 450

_1190                             PrintString                       _str_0x7aab
                                  NewLine                                                       ; Main: PRINT " ORANGE"

_1200                             LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: GOTO 450

_1210                             PrintString                       _str_0x7aa3
                                  NewLine                                                       ; Main: PRINT " LEMON"

_1220                             LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: GOTO 450

                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
_1230                             PrintString                       _str_0x79f9
                                  NewLine                                                       ; Main: PRINT " PLUM"

_1240                             LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: GOTO 450

_1250                             PrintString                       _str_0x79f0
                                  NewLine                                                       ; Main: PRINT " CHERRY"

_1260                             LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: GOTO 450

_1270                             PUSH                              
                                  LDI                               1
                                  STW                               _Q4                         ; Main: FOR Q4=1 TO 10

_1280                             LDI                               7
                                  PrintAcChar                                                   ; Main: PRINT CHR$(7);

_1290                             ForNextFarInc                     _Q4 _1280 10                ; Main: NEXT Q4

_1300                             Return                                                        ; Main: RETURN

_1310                             PUSH                              
                                  LDI                               1
                                  STW                               _T8                         ; Main: FOR T8=1 TO 5

_1320                             LDI                               7
                                  PrintAcChar                                                   ; Main: PRINT CHR$(7);

                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
_1330                             ForNextFarInc                     _T8 _1320 5                 ; Main: NEXT T8

_1340                             Return                                                        ; Main: RETURN

_1341                             NewLine                           
                                  PrintString                       _str_0x79e6
                                  NewLine                                                       ; Main: PRINT: PRINT "DOUBLE!!"

_1342                             PrintString                       _str_0x7bc9
                                  NewLine                                                       ; Main: PRINT "YOU WON!"

_1343                             LDI                               2
                                  STW                               mathX
                                  LDW                               _M
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDW                              _M
                                  ADDW                              _P
                                  STW                               _P                          ; Main: P=(((2*M)+M)+P)

_1344                             LDWI                              _510
                                  CALL                              giga_vAC                    ; Main: GOTO 510

_1350                             HALT                                                          ; Main: END

_9999                             HALT                                                          ; Main: END

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0xfc01
convertEqOp                       EQU     0xf95e
convertLtOp                       EQU     0xf955
convertGtOp                       EQU     0xf94c
loadRegs                          EQU     0xfa43
saveRegs                          EQU     0xfa25
multiply16bit                     EQU     0xfb5b
divide16bit                       EQU     0xfca8
randMod16bit                      EQU     0xf991
scanlineMode                      EQU     0xfd01
resetVideoFlags                   EQU     0xf967
initClearFuncs                    EQU     0xf980
clearVertBlinds                   EQU     0xfb8f
clearCursorRow                    EQU     0xfb2b
input                             EQU     0xfb07
inputExt1                         EQU     0xfda6
inputExt2                         EQU     0xfad3
inputCursor                       EQU     0xfa07
inputKeys                         EQU     0xfe47
inputIntVar                       EQU     0xff00
inputStrVar                       EQU     0xf9cf
inputReturn                       EQU     0xfd0b
inputDelete                       EQU     0xfe01
inputPrint                        EQU     0xfa83
inputNewline                      EQU     0xf9a4
printInit                         EQU     0xf9b9
printText                         EQU     0xf9e6
printDigit                        EQU     0xfa61
printInt16                        EQU     0xfc57
printChr                          EQU     0xf973
printChar                         EQU     0xfd4e
newLineScroll                     EQU     0xfea2
integerStr                        EQU     0xfc18
stringCmp                         EQU     0xfbc5
stringUpper                       EQU     0xfaa7
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    
                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


                    ; hard coded to load register8 to register15
saveRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

saveRegs_loop       LDW     regsAddr
                    DEEK
                    DOKE    regsWork
                    INC     regsWork
                    INC     regsWork
                    INC     regsAddr
                    INC     regsAddr
                    LDW     regsAddr
                    SUBI    register15
                    BLE     saveRegs_loop
                    RET



                    ; hard coded to save register8 to register15
loadRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

loadRegs_loop       LDW     regsWork
                    DEEK
                    DOKE    regsAddr
                    INC     regsAddr
                    INC     regsAddr
                    INC     regsWork
                    INC     regsWork
                    LDW     regsAddr
                    SUBI    register15
                    BLE     loadRegs_loop
                    RET



                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     inpCursXYBak
                    STW     inpPrnXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     127
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here


                    ; draws cursor
inputCursor         PUSH
                    LDW     textChr
                    XORI    127
                    BNE     inputC_skip         ; don't flash cursor if char != 127
                    LD      giga_ledState
                    ANDI    2
                    BNE     inputC_skip         ; use ledState as a hack timer
                    LDI     32
                    STW     textChr             ; alternate between 32 and 127
                    
inputC_skip         LDW     inpCursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      inpCursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     inpCursXYOfs        ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     32
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    5                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     inpCursXYOfs        ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     inpCursXYOfs        ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     inpPrnXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDW     inpCursXYBak        ; new cursor position
                    ADDW    inpCursXYOfs
                    STW     inpCursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; compares two strings: returns 0 for smaller, 1 for equal and 2 for larger
stringCmp           LDW     strSrcAddr
                    PEEK
                    STW     strSrcLen                           ; save str length
                    LDW     strSrcAddr2
                    PEEK
                    STW     strSrcLen2                          ; save str length
                    INC     strSrcAddr
                    INC     strSrcAddr2                         ; skip lengths
                    
stringC_loop        LDW     strSrcAddr
                    PEEK
                    BEQ     stringC_equal                       ; this assumes your strings are valid, (i.e. valid length and terminating bytes)
                    STW     strChr
                    LDW     strSrcAddr2
                    PEEK
                    SUBW    strChr
                    BLT     stringC_larger
                    BGT     stringC_smaller
                    INC     strSrcAddr
                    INC     strSrcAddr2
                    BRA     stringC_loop

stringC_smaller     LDI     0
                    RET
                    
stringC_equal       LDW     strSrcLen
                    SUBW    strSrcLen2
                    BLT     stringC_smaller
                    BGT     stringC_larger                      ; if strings are equal, choose based on length
                    LDI     1
                    RET
                    
stringC_larger      LDI     2
                    RET


                    ; creates an upper case string
stringUpper         LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; dst length = src length
    
stringUp_next       INC     strSrcAddr                          ; next char, (skips length byte)
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    BEQ     stringUp_exit
                    ST      strChr
                    SUBI    97
                    BLT     stringUp_char
                    LD      strChr
                    SUBI    122
                    BGT     stringUp_char
                    LD      strChr                              ; >= 97 'a' and <= 122 'z'
                    SUBI    32
                    ST      strChr
                    
stringUp_char       LD      strChr
                    POKE    strDstAddr                          ; upper case char
                    BRA     stringUp_next
                    
stringUp_exit       POKE    strDstAddr                          ; terminating 0
                    RET

