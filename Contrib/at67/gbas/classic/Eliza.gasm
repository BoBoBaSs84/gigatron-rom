_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x5aa4
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_restart                          EQU                               0x02a1
_input                            EQU                               0x030e
_input0                           EQU                               0x031e
_input1                           EQU                               0x0420
_keywords                         EQU                               0x04f1
_keywords0                        EQU                               0x05c1
_keywords1                        EQU                               0x05da
_conjugate                        EQU                               0x060b
_conjugate0                       EQU                               0x0cb4
_conjugate1                       EQU                               0x0fb6
_conjugate2                       EQU                               0x10e9
_reply                            EQU                               0x12d5
_reply0                           EQU                               0x15ce
_next_0x0239                      EQU                               0x0248
_page_0x0300                      EQU                               0x0300
_else_0x03bb                      EQU                               0x03a2
_else_0x03e4                      EQU                               0x03c3
_page_0x0400                      EQU                               0x0400
_else_0x041f                      EQU                               0x040f
_page_0x0500                      EQU                               0x0500
_next_0x0529                      EQU                               0x0504
_next_0x0554                      EQU                               0x0523
_else_0x05af                      EQU                               0x056e
_else_0x05c6                      EQU                               0x0581
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_next_0x06c2                      EQU                               0x08f4
_page_0x09a0                      EQU                               0x09a0
_next_0x06da                      EQU                               0x09ae
_else_0x0716                      EQU                               0x09da
_page_0x0aa0                      EQU                               0x0aa0
_else_0x0771                      EQU                               0x0ad2
_page_0x0ba0                      EQU                               0x0ba0
_page_0x0ca0                      EQU                               0x0ca0
_else_0x085c                      EQU                               0x0ce0
_page_0x0da0                      EQU                               0x0da0
_else_0x08b7                      EQU                               0x0dd5
_page_0x0ea0                      EQU                               0x0ea0
_page_0x0fa0                      EQU                               0x0fa0
_page_0x10a0                      EQU                               0x10a0
_else_0x09e1                      EQU                               0x10d9
_page_0x11a0                      EQU                               0x11a0
_page_0x12a0                      EQU                               0x12a0
_else_0x0a8d                      EQU                               0x12c5
_page_0x13a0                      EQU                               0x13a0
_else_0x0b3d                      EQU                               0x13ef
_page_0x14a0                      EQU                               0x14a0
_else_0x0b92                      EQU                               0x14ea
_page_0x15a0                      EQU                               0x15a0
_else_0x0bb6                      EQU                               0x15ba
_page_0x16a0                      EQU                               0x16a0

; Global Variables
_X                                EQU                               0x0030
_L                                EQU                               0x0032
_ll                               EQU                               0x0034
_K                                EQU                               0x0036

; Local Variables

; Arrays
_S_array                          EQU                               0x53b8
_S_array                          DW                                0x0000 0x0003 0x0005 0x0005 0x0009 0x000d 0x0010 0x0013 0x0015 0x0018 0x001b 0x001b 0x001f 0x0022 0x0027 0x0027 0x0027 0x0027 0x0027 0x0027 0x0030 0x0032 0x0036 0x003a 0x003e 0x003e 0x003f 0x0044 0x0049 0x004b 0x004f 0x0052 0x0059 0x005c 0x0062 0x0069 
_T_array                          EQU                               0x52b8
_T_array                          DW                                0x0002 0x0001 0x0003 0x0003 0x0003 0x0002 0x0002 0x0001 0x0002 0x0002 0x0003 0x0003 0x0002 0x0004 0x0008 0x0008 0x0008 0x0008 0x0008 0x0008 0x0001 0x0003 0x0003 0x0003 0x0000 0x0000 0x0004 0x0004 0x0001 0x0003 0x0002 0x0006 0x0002 0x0005 0x0006 0x0005 
_TEST_array                       EQU                               0x60a1
_TEST_array                       DW                                0x72a0 0x67a0 0x61a4 
_TEST_0x72a0                      EQU                               0x72a0
_TEST_0x72a0                      DW                                0x0000 0x0001 0x0002 
_TEST_0x67a0                      EQU                               0x67a0
_TEST_0x67a0                      DW                                0x0003 0x0004 0x0005 
_TEST_0x61a4                      EQU                               0x61a4
_TEST_0x61a4                      DW                                0x0005 0x0005 0x0005 
_R_array                          EQU                               0x51b8
_R_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_N_array                          EQU                               0x50b8
_N_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_tt_array                         EQU                               0x59aa
_tt_array                         DW                                0x5fa1 0x5da1 0x5aa0 
_tt_0x5fa1                        EQU                               0x5fa1
_tt_0x5fa1                        DW                                0x0000 0x0001 
_tt_0x5da1                        EQU                               0x5da1
_tt_0x5da1                        DW                                0x0002 0x0005 
_tt_0x5aa0                        EQU                               0x5aa0
_tt_0x5aa0                        DW                                0x0004 0x0003 

; Strings
_KEYWORD$                         EQU                               0x7aa2
_KEYWORD$                         DW                                0x7df6 0x7dee 0x7de4 0x7ddb 0x7dd1 0x7dc8 0x7db8 0x7daa 0x7da0 0x7cf6 0x7cef 0x7ce9 0x7ce3 0x7cda 0x7cd3 0x7ccd 0x7cc7 0x7cbf 0x7cb8 0x7cb2 0x7cab 0x7ca3 0x7bf8 0x7bf0 0x7be8 0x7be3 0x7bdb 0x7bd7 0x7bd0 0x7bc7 0x7bbf 0x7bb7 0x7bb1 0x7ba8 0x7af6 0x7aea 
_KEYWORD$_0x7df6                  EQU                               0x7df6
_KEYWORD$_0x7df6                  DB                                8 'CAN YOU ' 0
_KEYWORD$_0x7dee                  EQU                               0x7dee
_KEYWORD$_0x7dee                  DB                                6 'CAN I ' 0
_KEYWORD$_0x7de4                  EQU                               0x7de4
_KEYWORD$_0x7de4                  DB                                8 'YOU ARE ' 0
_KEYWORD$_0x7ddb                  EQU                               0x7ddb
_KEYWORD$_0x7ddb                  DB                                7 'YOU\'RE ' 0
_KEYWORD$_0x7dd1                  EQU                               0x7dd1
_KEYWORD$_0x7dd1                  DB                                8 'I DON\'T ' 0
_KEYWORD$_0x7dc8                  EQU                               0x7dc8
_KEYWORD$_0x7dc8                  DB                                7 'I FEEL ' 0
_KEYWORD$_0x7db8                  EQU                               0x7db8
_KEYWORD$_0x7db8                  DB                                14 'WHY DON\'T YOU ' 0
_KEYWORD$_0x7daa                  EQU                               0x7daa
_KEYWORD$_0x7daa                  DB                                12 'WHY CAN\'T I ' 0
_KEYWORD$_0x7da0                  EQU                               0x7da0
_KEYWORD$_0x7da0                  DB                                8 'ARE YOU ' 0
_KEYWORD$_0x7cf6                  EQU                               0x7cf6
_KEYWORD$_0x7cf6                  DB                                8 'I CAN\'T ' 0
_KEYWORD$_0x7cef                  EQU                               0x7cef
_KEYWORD$_0x7cef                  DB                                5 'I AM ' 0
_KEYWORD$_0x7ce9                  EQU                               0x7ce9
_KEYWORD$_0x7ce9                  DB                                4 'I\'M ' 0
_KEYWORD$_0x7ce3                  EQU                               0x7ce3
_KEYWORD$_0x7ce3                  DB                                4 'YOU ' 0
_KEYWORD$_0x7cda                  EQU                               0x7cda
_KEYWORD$_0x7cda                  DB                                7 'I WANT ' 0
_KEYWORD$_0x7cd3                  EQU                               0x7cd3
_KEYWORD$_0x7cd3                  DB                                5 'WHAT ' 0
_KEYWORD$_0x7ccd                  EQU                               0x7ccd
_KEYWORD$_0x7ccd                  DB                                4 'HOW ' 0
_KEYWORD$_0x7cc7                  EQU                               0x7cc7
_KEYWORD$_0x7cc7                  DB                                4 'WHO ' 0
_KEYWORD$_0x7cbf                  EQU                               0x7cbf
_KEYWORD$_0x7cbf                  DB                                6 'WHERE ' 0
_KEYWORD$_0x7cb8                  EQU                               0x7cb8
_KEYWORD$_0x7cb8                  DB                                5 'WHEN ' 0
_KEYWORD$_0x7cb2                  EQU                               0x7cb2
_KEYWORD$_0x7cb2                  DB                                4 'WHY ' 0
_KEYWORD$_0x7cab                  EQU                               0x7cab
_KEYWORD$_0x7cab                  DB                                5 'NAME ' 0
_KEYWORD$_0x7ca3                  EQU                               0x7ca3
_KEYWORD$_0x7ca3                  DB                                6 'CAUSE ' 0
_KEYWORD$_0x7bf8                  EQU                               0x7bf8
_KEYWORD$_0x7bf8                  DB                                6 'SORRY ' 0
_KEYWORD$_0x7bf0                  EQU                               0x7bf0
_KEYWORD$_0x7bf0                  DB                                6 'DREAM ' 0
_KEYWORD$_0x7be8                  EQU                               0x7be8
_KEYWORD$_0x7be8                  DB                                6 'HELLO ' 0
_KEYWORD$_0x7be3                  EQU                               0x7be3
_KEYWORD$_0x7be3                  DB                                3 'HI ' 0
_KEYWORD$_0x7bdb                  EQU                               0x7bdb
_KEYWORD$_0x7bdb                  DB                                6 'MAYBE ' 0
_KEYWORD$_0x7bd7                  EQU                               0x7bd7
_KEYWORD$_0x7bd7                  DB                                2 'NO' 0
_KEYWORD$_0x7bd0                  EQU                               0x7bd0
_KEYWORD$_0x7bd0                  DB                                5 'YOUR ' 0
_KEYWORD$_0x7bc7                  EQU                               0x7bc7
_KEYWORD$_0x7bc7                  DB                                7 'ALWAYS ' 0
_KEYWORD$_0x7bbf                  EQU                               0x7bbf
_KEYWORD$_0x7bbf                  DB                                6 'THINK ' 0
_KEYWORD$_0x7bb7                  EQU                               0x7bb7
_KEYWORD$_0x7bb7                  DB                                6 'ALIKE ' 0
_KEYWORD$_0x7bb1                  EQU                               0x7bb1
_KEYWORD$_0x7bb1                  DB                                4 'YES ' 0
_KEYWORD$_0x7ba8                  EQU                               0x7ba8
_KEYWORD$_0x7ba8                  DB                                7 'FRIEND ' 0
_KEYWORD$_0x7af6                  EQU                               0x7af6
_KEYWORD$_0x7af6                  DB                                8 'COMPUTER' 0
_KEYWORD$_0x7aea                  EQU                               0x7aea
_KEYWORD$_0x7aea                  DB                                10 'NOKEYFOUND' 0
_WORDIN$                          EQU                               0x79c6
_WORDIN$                          DW                                0x7ba1 0x79f8 0x79f1 0x79e9 0x79e1 0x79da 0x79d4 
_WORDIN$_0x7ba1                   EQU                               0x7ba1
_WORDIN$_0x7ba1                   DB                                5 ' ARE ' 0
_WORDIN$_0x79f8                   EQU                               0x79f8
_WORDIN$_0x79f8                   DB                                6 ' WERE ' 0
_WORDIN$_0x79f1                   EQU                               0x79f1
_WORDIN$_0x79f1                   DB                                5 ' YOU ' 0
_WORDIN$_0x79e9                   EQU                               0x79e9
_WORDIN$_0x79e9                   DB                                6 ' YOUR ' 0
_WORDIN$_0x79e1                   EQU                               0x79e1
_WORDIN$_0x79e1                   DB                                6 ' I\'VE ' 0
_WORDIN$_0x79da                   EQU                               0x79da
_WORDIN$_0x79da                   DB                                5 ' I\'M ' 0
_WORDIN$_0x79d4                   EQU                               0x79d4
_WORDIN$_0x79d4                   DB                                4 ' ME ' 0
_WORDOUT$                         EQU                               0x78e1
_WORDOUT$                         DW                                0x79c0 0x79b9 0x79b4 0x79ae 0x79a4 0x78f6 0x78ef 
_WORDOUT$_0x79c0                  EQU                               0x79c0
_WORDOUT$_0x79c0                  DB                                4 ' AM ' 0
_WORDOUT$_0x79b9                  EQU                               0x79b9
_WORDOUT$_0x79b9                  DB                                5 ' WAS ' 0
_WORDOUT$_0x79b4                  EQU                               0x79b4
_WORDOUT$_0x79b4                  DB                                3 ' I ' 0
_WORDOUT$_0x79ae                  EQU                               0x79ae
_WORDOUT$_0x79ae                  DB                                4 ' MY ' 0
_WORDOUT$_0x79a4                  EQU                               0x79a4
_WORDOUT$_0x79a4                  DB                                8 ' YOU\'VE ' 0
_WORDOUT$_0x78f6                  EQU                               0x78f6
_WORDOUT$_0x78f6                  DB                                8 ' YOU\'RE ' 0
_WORDOUT$_0x78ef                  EQU                               0x78ef
_WORDOUT$_0x78ef                  DB                                5 ' YOU ' 0
_REPLIES$                         EQU                               0x0620
_REPLIES$                         DW                                0x78c2 0x77d9 0x78a6 0x77bd 0x77a1 0x76e4 0x76bf 0x76a0 0x75df 0x75cc 0x75bc 0x75a0 0x74e8 0x74c5 0x74b1 0x73e9 0x73c9 0x73ab 0x72ec 0x72c7 0x74a1 0x71d0 0x72a6 0x71af 0x70e4 0x70d3 0x70bd 0x6fdb 0x70a4 0x6fb7 0x6fa2 0x6edd 0x73a3 0x6eaf 0x6dd9 0x6dc7 0x6db0 0x6ce8 0x6cd0 0x6cbf 0x6bde 0x6bb6 0x6cab 0x6ad8 0x6aae 0x69e3 0x69bc 0x68d4 0x69a2 0x68aa 0x67e6 0x67bf 0x66d6 0x66b2 0x67a6 0x65e2 0x65b3 0x64e8 0x64c2 0x6ba1 0x63db 0x63b8 0x62d5 0x64a3 0x62bc 0x61e3 0x66a0 0x65a2 0x61bb 0x60e1 0x71a5 0x6ea0 0x6da7 0x60c0 0x63a2 0x5fda 0x6da0 0x62a1 0x61aa 0x60a7 0x5fbf 0x5fac 0x6aa0 0x5ee2 0x5eb8 0x5ddc 0x5db4 0x78a0 0x5ce6 0x5ea9 0x6ca3 0x5da5 0x5cbb 0x5be4 0x5bc6 0x5ba2 0x5ae0 0x5ab4 0x5ca2 0x59d7 0x59b6 0x58e1 0x58a7 0x57d4 0x57a7 0x56d2 0x56b2 0x68a2 0x55da 0x55b6 0x54e4 0x54c8 
_REPLIES$_0x78c2                  EQU                               0x78c2
_REPLIES$_0x78c2                  DB                                29 'DON\'T YOU BELIEVE THAT I CAN*' 0
_REPLIES$_0x77d9                  EQU                               0x77d9
_REPLIES$_0x77d9                  DB                                37 'PERHAPS YOU WOULD LIKE TO BE ABLE TO*' 0
_REPLIES$_0x78a6                  EQU                               0x78a6
_REPLIES$_0x78a6                  DB                                26 'YOU WANT ME TO BE ABLE TO*' 0
_REPLIES$_0x77bd                  EQU                               0x77bd
_REPLIES$_0x77bd                  DB                                26 'PERHAPS YOU DON\'T WANT TO*' 0
_REPLIES$_0x77a1                  EQU                               0x77a1
_REPLIES$_0x77a1                  DB                                26 'DO YOU WANT TO BE ABLE TO*' 0
_REPLIES$_0x76e4                  EQU                               0x76e4
_REPLIES$_0x76e4                  DB                                26 'WHAT MAKES YOU THINK I AM*' 0
_REPLIES$_0x76bf                  EQU                               0x76bf
_REPLIES$_0x76bf                  DB                                35 'DOES IT PLEASE YOU TO BELIEVE I AM*' 0
_REPLIES$_0x76a0                  EQU                               0x76a0
_REPLIES$_0x76a0                  DB                                29 'PERHAPS YOU WOULD LIKE TO BE*' 0
_REPLIES$_0x75df                  EQU                               0x75df
_REPLIES$_0x75df                  DB                                31 'DO YOU SOMETIMES WISH YOU WERE*' 0
_REPLIES$_0x75cc                  EQU                               0x75cc
_REPLIES$_0x75cc                  DB                                17 'DON\'T YOU REALLY*' 0
_REPLIES$_0x75bc                  EQU                               0x75bc
_REPLIES$_0x75bc                  DB                                14 'WHY DON\'T YOU*' 0
_REPLIES$_0x75a0                  EQU                               0x75a0
_REPLIES$_0x75a0                  DB                                26 'DO YOU WISH TO BE ABLE TO*' 0
_REPLIES$_0x74e8                  EQU                               0x74e8
_REPLIES$_0x74e8                  DB                                22 'DOES THAT TROUBLE YOU?' 0
_REPLIES$_0x74c5                  EQU                               0x74c5
_REPLIES$_0x74c5                  DB                                33 'TELL ME MORE ABOUT SUCH FEELINGS.' 0
_REPLIES$_0x74b1                  EQU                               0x74b1
_REPLIES$_0x74b1                  DB                                18 'DO YOU OFTEN FEEL*' 0
_REPLIES$_0x73e9                  EQU                               0x73e9
_REPLIES$_0x73e9                  DB                                21 'DO YOU ENJOY FEELING*' 0
_REPLIES$_0x73c9                  EQU                               0x73c9
_REPLIES$_0x73c9                  DB                                30 'DO YOU REALLY BELIEVE I DON\'T*' 0
_REPLIES$_0x73ab                  EQU                               0x73ab
_REPLIES$_0x73ab                  DB                                28 'PERHAPS IN GOOD TIME I WILL*' 0
_REPLIES$_0x72ec                  EQU                               0x72ec
_REPLIES$_0x72ec                  DB                                18 'DO YOU WANT ME TO*' 0
_REPLIES$_0x72c7                  EQU                               0x72c7
_REPLIES$_0x72c7                  DB                                35 'DO YOU THINK YOU SHOULD BE ABLE TO*' 0
_REPLIES$_0x74a1                  EQU                               0x74a1
_REPLIES$_0x74a1                  DB                                14 'WHY CAN\'T YOU*' 0
_REPLIES$_0x71d0                  EQU                               0x71d0
_REPLIES$_0x71d0                  DB                                46 'WHY ARE YOU INTERESTED IN WHETHER OR NOT I AM*' 0
_REPLIES$_0x72a6                  EQU                               0x72a6
_REPLIES$_0x72a6                  DB                                31 'WOULD YOU PREFER IF I WERE NOT*' 0
_REPLIES$_0x71af                  EQU                               0x71af
_REPLIES$_0x71af                  DB                                31 'PERHAPS IN YOUR FANTASIES I AM*' 0
_REPLIES$_0x70e4                  EQU                               0x70e4
_REPLIES$_0x70e4                  DB                                26 'HOW DO YOU KNOW YOU CAN\'T*' 0
_REPLIES$_0x70d3                  EQU                               0x70d3
_REPLIES$_0x70d3                  DB                                15 'HAVE YOU TRIED?' 0
_REPLIES$_0x70bd                  EQU                               0x70bd
_REPLIES$_0x70bd                  DB                                20 'PERHAPS YOU CAN NOW*' 0
_REPLIES$_0x6fdb                  EQU                               0x6fdb
_REPLIES$_0x6fdb                  DB                                35 'DID YOU COME TO ME BECAUSE YOU ARE*' 0
_REPLIES$_0x70a4                  EQU                               0x70a4
_REPLIES$_0x70a4                  DB                                23 'HOW LONG HAVE YOU BEEN*' 0
_REPLIES$_0x6fb7                  EQU                               0x6fb7
_REPLIES$_0x6fb7                  DB                                34 'DO YOU BELIEVE IT IS NORMAL TO BE*' 0
_REPLIES$_0x6fa2                  EQU                               0x6fa2
_REPLIES$_0x6fa2                  DB                                19 'DO YOU ENJOY BEING*' 0
_REPLIES$_0x6edd                  EQU                               0x6edd
_REPLIES$_0x6edd                  DB                                33 'WE WERE DISCUSSING YOU -- NOT ME.' 0
_REPLIES$_0x73a3                  EQU                               0x73a3
_REPLIES$_0x73a3                  DB                                6 'OH, I*' 0
_REPLIES$_0x6eaf                  EQU                               0x6eaf
_REPLIES$_0x6eaf                  DB                                44 'YOU\'RE NOT REALLY TALKING ABOUT ME, ARE YOU?' 0
_REPLIES$_0x6dd9                  EQU                               0x6dd9
_REPLIES$_0x6dd9                  DB                                37 'WHAT WOULD IT MEAN TO YOU IF YOU GOT*' 0
_REPLIES$_0x6dc7                  EQU                               0x6dc7
_REPLIES$_0x6dc7                  DB                                16 'WHY DO YOU WANT*' 0
_REPLIES$_0x6db0                  EQU                               0x6db0
_REPLIES$_0x6db0                  DB                                21 'SUPPOSE YOU SOON GOT*' 0
_REPLIES$_0x6ce8                  EQU                               0x6ce8
_REPLIES$_0x6ce8                  DB                                22 'WHAT IF YOU NEVER GOT*' 0
_REPLIES$_0x6cd0                  EQU                               0x6cd0
_REPLIES$_0x6cd0                  DB                                22 'I SOMETIMES ALSO WANT*' 0
_REPLIES$_0x6cbf                  EQU                               0x6cbf
_REPLIES$_0x6cbf                  DB                                15 'WHY DO YOU ASK?' 0
_REPLIES$_0x6bde                  EQU                               0x6bde
_REPLIES$_0x6bde                  DB                                32 'DOES THAT QUESTION INTEREST YOU?' 0
_REPLIES$_0x6bb6                  EQU                               0x6bb6
_REPLIES$_0x6bb6                  DB                                38 'WHAT ANSWER WOULD PLEASE YOU THE MOST?' 0
_REPLIES$_0x6cab                  EQU                               0x6cab
_REPLIES$_0x6cab                  DB                                18 'WHAT DO YOU THINK?' 0
_REPLIES$_0x6ad8                  EQU                               0x6ad8
_REPLIES$_0x6ad8                  DB                                38 'ARE SUCH QUESTIONS ON YOUR MIND OFTEN?' 0
_REPLIES$_0x6aae                  EQU                               0x6aae
_REPLIES$_0x6aae                  DB                                40 'WHAT IS IT THAT YOU REALLY WANT TO KNOW?' 0
_REPLIES$_0x69e3                  EQU                               0x69e3
_REPLIES$_0x69e3                  DB                                27 'HAVE YOU ASKED ANYONE ELSE?' 0
_REPLIES$_0x69bc                  EQU                               0x69bc
_REPLIES$_0x69bc                  DB                                37 'HAVE YOU ASKED SUCH QUESTIONS BEFORE?' 0
_REPLIES$_0x68d4                  EQU                               0x68d4
_REPLIES$_0x68d4                  DB                                42 'WHAT ELSE COMES TO MIND WHEN YOU ASK THAT?' 0
_REPLIES$_0x69a2                  EQU                               0x69a2
_REPLIES$_0x69a2                  DB                                24 'NAMES DON\'T INTEREST ME.' 0
_REPLIES$_0x68aa                  EQU                               0x68aa
_REPLIES$_0x68aa                  DB                                40 'I DON\'T CARE ABOUT NAMES-- PLEASE GO ON.' 0
_REPLIES$_0x67e6                  EQU                               0x67e6
_REPLIES$_0x67e6                  DB                                24 'IS THAT THE REAL REASON?' 0
_REPLIES$_0x67bf                  EQU                               0x67bf
_REPLIES$_0x67bf                  DB                                37 'DON\'T ANY OTHER REASONS COME TO MIND?' 0
_REPLIES$_0x66d6                  EQU                               0x66d6
_REPLIES$_0x66d6                  DB                                40 'DOES THAT REASON EXPLAIN ANY THING ELSE?' 0
_REPLIES$_0x66b2                  EQU                               0x66b2
_REPLIES$_0x66b2                  DB                                34 'WHAT OTHER REASONS MIGHT THERE BE?' 0
_REPLIES$_0x67a6                  EQU                               0x67a6
_REPLIES$_0x67a6                  DB                                23 'PLEASE DON\'T APOLOGIZE.' 0
_REPLIES$_0x65e2                  EQU                               0x65e2
_REPLIES$_0x65e2                  DB                                28 'APOLOGIES ARE NOT NECESSARY.' 0
_REPLIES$_0x65b3                  EQU                               0x65b3
_REPLIES$_0x65b3                  DB                                45 'WHAT FEELINGS DO YOU HAVE WHEN YOU APOLOGIZE?' 0
_REPLIES$_0x64e8                  EQU                               0x64e8
_REPLIES$_0x64e8                  DB                                22 'DON\'T BE SO DEFENSIVE!' 0
_REPLIES$_0x64c2                  EQU                               0x64c2
_REPLIES$_0x64c2                  DB                                36 'WHAT DOES THAT DREAM SUGGEST TO YOU?' 0
_REPLIES$_0x6ba1                  EQU                               0x6ba1
_REPLIES$_0x6ba1                  DB                                19 'DO YOU DREAM OFTEN?' 0
_REPLIES$_0x63db                  EQU                               0x63db
_REPLIES$_0x63db                  DB                                35 'WHAT PERSONS APPEAR IN YOUR DREAMS?' 0
_REPLIES$_0x63b8                  EQU                               0x63b8
_REPLIES$_0x63b8                  DB                                33 'ARE YOU DISTURBED BY YOUR DREAMS?' 0
_REPLIES$_0x62d5                  EQU                               0x62d5
_REPLIES$_0x62d5                  DB                                41 'HOW DO YOU DO--PLEASE STATE YOUR PROBLEM.' 0
_REPLIES$_0x64a3                  EQU                               0x64a3
_REPLIES$_0x64a3                  DB                                29 'YOU DON\'T SEEM QUITE CERTAIN.' 0
_REPLIES$_0x62bc                  EQU                               0x62bc
_REPLIES$_0x62bc                  DB                                23 'WHY THE UNCERTAIN TONE?' 0
_REPLIES$_0x61e3                  EQU                               0x61e3
_REPLIES$_0x61e3                  DB                                27 'CAN\'T YOU BE MORE POSITIVE?' 0
_REPLIES$_0x66a0                  EQU                               0x66a0
_REPLIES$_0x66a0                  DB                                16 'YOU AREN\'T SURE?' 0
_REPLIES$_0x65a2                  EQU                               0x65a2
_REPLIES$_0x65a2                  DB                                15 'DON\'T YOU KNOW?' 0
_REPLIES$_0x61bb                  EQU                               0x61bb
_REPLIES$_0x61bb                  DB                                38 'ARE YOU SAYING NO JUST TO BE NEGATIVE?' 0
_REPLIES$_0x60e1                  EQU                               0x60e1
_REPLIES$_0x60e1                  DB                                29 'YOU ARE BEING A BIT NEGATIVE.' 0
_REPLIES$_0x71a5                  EQU                               0x71a5
_REPLIES$_0x71a5                  DB                                8 'WHY NOT?' 0
_REPLIES$_0x6ea0                  EQU                               0x6ea0
_REPLIES$_0x6ea0                  DB                                13 'ARE YOU SURE?' 0
_REPLIES$_0x6da7                  EQU                               0x6da7
_REPLIES$_0x6da7                  DB                                7 'WHY NO?' 0
_REPLIES$_0x60c0                  EQU                               0x60c0
_REPLIES$_0x60c0                  DB                                31 'WHY ARE YOU CONCERNED ABOUT MY*' 0
_REPLIES$_0x63a2                  EQU                               0x63a2
_REPLIES$_0x63a2                  DB                                20 'WHAT ABOUT YOUR OWN*' 0
_REPLIES$_0x5fda                  EQU                               0x5fda
_REPLIES$_0x5fda                  DB                                36 'CAN YOU THINK OF A SPECIFIC EXAMPLE?' 0
_REPLIES$_0x6da0                  EQU                               0x6da0
_REPLIES$_0x6da0                  DB                                5 'WHEN?' 0
_REPLIES$_0x62a1                  EQU                               0x62a1
_REPLIES$_0x62a1                  DB                                25 'WHAT ARE YOU THINKING OF?' 0
_REPLIES$_0x61aa                  EQU                               0x61aa
_REPLIES$_0x61aa                  DB                                15 'REALLY, ALWAYS?' 0
_REPLIES$_0x60a7                  EQU                               0x60a7
_REPLIES$_0x60a7                  DB                                23 'DO YOU REALLY THINK SO?' 0
_REPLIES$_0x5fbf                  EQU                               0x5fbf
_REPLIES$_0x5fbf                  DB                                25 'BUT YOU ARE NOT SURE YOU*' 0
_REPLIES$_0x5fac                  EQU                               0x5fac
_REPLIES$_0x5fac                  DB                                17 'DO YOU DOUBT YOU*' 0
_REPLIES$_0x6aa0                  EQU                               0x6aa0
_REPLIES$_0x6aa0                  DB                                12 'IN WHAT WAY?' 0
_REPLIES$_0x5ee2                  EQU                               0x5ee2
_REPLIES$_0x5ee2                  DB                                28 'WHAT RESEMBLANCE DO YOU SEE?' 0
_REPLIES$_0x5eb8                  EQU                               0x5eb8
_REPLIES$_0x5eb8                  DB                                40 'WHAT DOES THE SIMILARITY SUGGEST TO YOU?' 0
_REPLIES$_0x5ddc                  EQU                               0x5ddc
_REPLIES$_0x5ddc                  DB                                34 'WHAT OTHER CONNECTIONS DO YOU SEE?' 0
_REPLIES$_0x5db4                  EQU                               0x5db4
_REPLIES$_0x5db4                  DB                                38 'COULD THERE REALLY BE SOME CONNECTION?' 0
_REPLIES$_0x78a0                  EQU                               0x78a0
_REPLIES$_0x78a0                  DB                                4 'HOW?' 0
_REPLIES$_0x5ce6                  EQU                               0x5ce6
_REPLIES$_0x5ce6                  DB                                24 'YOU SEEM QUITE POSITIVE.' 0
_REPLIES$_0x5ea9                  EQU                               0x5ea9
_REPLIES$_0x5ea9                  DB                                13 'ARE YOU SURE?' 0
_REPLIES$_0x6ca3                  EQU                               0x6ca3
_REPLIES$_0x6ca3                  DB                                6 'I SEE.' 0
_REPLIES$_0x5da5                  EQU                               0x5da5
_REPLIES$_0x5da5                  DB                                13 'I UNDERSTAND.' 0
_REPLIES$_0x5cbb                  EQU                               0x5cbb
_REPLIES$_0x5cbb                  DB                                41 'WHY DO YOU BRING UP THE TOPIC OF FRIENDS?' 0
_REPLIES$_0x5be4                  EQU                               0x5be4
_REPLIES$_0x5be4                  DB                                26 'DO YOUR FRIENDS WORRY YOU?' 0
_REPLIES$_0x5bc6                  EQU                               0x5bc6
_REPLIES$_0x5bc6                  DB                                28 'DO YOUR FRIENDS PICK ON YOU?' 0
_REPLIES$_0x5ba2                  EQU                               0x5ba2
_REPLIES$_0x5ba2                  DB                                34 'ARE YOU SURE YOU HAVE ANY FRIENDS?' 0
_REPLIES$_0x5ae0                  EQU                               0x5ae0
_REPLIES$_0x5ae0                  DB                                30 'DO YOU IMPOSE ON YOUR FRIENDS?' 0
_REPLIES$_0x5ab4                  EQU                               0x5ab4
_REPLIES$_0x5ab4                  DB                                42 'PERHAPS YOUR LOVE FOR FRIENDS WORRIES YOU?' 0
_REPLIES$_0x5ca2                  EQU                               0x5ca2
_REPLIES$_0x5ca2                  DB                                23 'DO COMPUTERS WORRY YOU?' 0
_REPLIES$_0x59d7                  EQU                               0x59d7
_REPLIES$_0x59d7                  DB                                39 'ARE YOU TALKING ABOUT ME IN PARTICULAR?' 0
_REPLIES$_0x59b6                  EQU                               0x59b6
_REPLIES$_0x59b6                  DB                                31 'ARE YOU FRIGHTENED BY MACHINES?' 0
_REPLIES$_0x58e1                  EQU                               0x58e1
_REPLIES$_0x58e1                  DB                                29 'WHY DO YOU MENTION COMPUTERS?' 0
_REPLIES$_0x58a7                  EQU                               0x58a7
_REPLIES$_0x58a7                  DB                                56 'WHAT DO YOU THINK MACHINES HAVE TO DO WITH YOUR PROBLEM?' 0
_REPLIES$_0x57d4                  EQU                               0x57d4
_REPLIES$_0x57d4                  DB                                42 'DON\'T YOU THINK COMPUTERS CAN HELP PEOPLE?' 0
_REPLIES$_0x57a7                  EQU                               0x57a7
_REPLIES$_0x57a7                  DB                                43 'WHAT IS IT ABOUT MACHINES THAT WORRIES YOU?' 0
_REPLIES$_0x56d2                  EQU                               0x56d2
_REPLIES$_0x56d2                  DB                                44 'SAY, DO YOU HAVE ANY PSYCHOLOGICAL PROBLEMS?' 0
_REPLIES$_0x56b2                  EQU                               0x56b2
_REPLIES$_0x56b2                  DB                                30 'WHAT DOES THAT SUGGEST TO YOU?' 0
_REPLIES$_0x68a2                  EQU                               0x68a2
_REPLIES$_0x68a2                  DB                                6 'I SEE.' 0
_REPLIES$_0x55da                  EQU                               0x55da
_REPLIES$_0x55da                  DB                                36 'I\'M NOT SURE I UNDERSTAND YOU FULLY.' 0
_REPLIES$_0x55b6                  EQU                               0x55b6
_REPLIES$_0x55b6                  DB                                34 'COME COME ELUCIDATE YOUR THOUGHTS.' 0
_REPLIES$_0x54e4                  EQU                               0x54e4
_REPLIES$_0x54e4                  DB                                26 'CAN YOU ELABORATE ON THAT?' 0
_REPLIES$_0x54c8                  EQU                               0x54c8
_REPLIES$_0x54c8                  DB                                26 'THAT IS QUITE INTERESTING.' 0
_P$                               EQU                               0x4fa0
_P$                               DB                                0 '' 0
_gobber$                          EQU                               0x4ea0
_gobber$                          DB                                5 '45678' 0
_I$                               EQU                               0x4da0
_I$                               DB                                0 '' 0
_F$                               EQU                               0x4aa0
_F$                               DB                                0 '' 0
_C$                               EQU                               0x49a0
_C$                               DB                                1 ' ' 0

; Constant Strings
_str_0x7ca1                       EQU                               0x7ca1
_str_0x7ca1                       DB                                0 '' 0
_str_0x71a0                       EQU                               0x71a0
_str_0x71a0                       DB                                3 '123' 0
_str_0x5fa5                       EQU                               0x5fa5
_str_0x5fa5                       DB                                5 '45678' 0
_str_0x54a4                       EQU                               0x54a4
_str_0x54a4                       DB                                34 'HI! IM ELIZA, WHAT IS YOURPROBLEM?' 0
_str_0x79a1                       EQU                               0x79a1
_str_0x79a1                       DB                                1 '?' 0
_str_0x61a0                       EQU                               0x61a0
_str_0x61a0                       DB                                2 '  ' 0
_str_0x6ca0                       EQU                               0x6ca0
_str_0x6ca0                       DB                                1 '\'' 0
_str_0x59b0                       EQU                               0x59b0
_str_0x59b0                       DB                                4 'SHUT' 0
_str_0x4cca                       EQU                               0x4cca
_str_0x4cca                       DB                                52 'OK, IF THAT\'S HOW YOU FEELTHEN I\'LL SHUT UP...BYE...' 0
_str_0x4be1                       EQU                               0x4be1
_str_0x4be1                       DB                                29 'PLEASE DON\'T REPEAT YOURSELF!' 0
_str_0x64a0                       EQU                               0x64a0
_str_0x64a0                       DB                                1 ' ' 0
_str_0x5ea0                       EQU                               0x5ea0
_str_0x5ea0                       DB                                1 '!' 0
_str_0x59a7                       EQU                               0x59a7
_str_0x59a7                       DB                                1 '*' 0
_str_0x59a2                       EQU                               0x59a2
_str_0x59a2                       DB                                3 '   ' 0
_str_0x4bad                       EQU                               0x4bad
_str_0x4bad                       DB                                50 'YOU WILL HAVE TO ELABORATE MORE FOR ME TO HELP YOU' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0x7aa0                 EQU                               0x7aa0
_inputVars_0x7aa0                 DW                                0x4da0 
_inputStrs_0x73a1                 EQU                               0x73a1
_inputStrs_0x73a1                 DW                                0x79a1 
_inputTypes_0x70a0                EQU                               0x70a0
_inputTypes_0x70a0                DW                                0x5f05 0x0000 
_input_0x5ea3                     EQU                               0x5ea3
_input_0x5ea3                     DW                                0x7aa0 0x73a1 0x70a0 

; Code
_entryPoint_                      Initialise                        
                                  InitNeOp                        
                                  InitGtOp                        
                                  Init16Array2d                                                 ; Main: INIT

                                  LDWI                              0x7ca1
                                  STW                               strSrcAddr
                                  LDWI                              0x4fa0
                                  StringCopy                                                    ; Main: P$ = ""

                                  LDWI                              0x5fa5
                                  STW                               strSrcAddr
                                  LDWI                              0x4ea0
                                  StringCopy                                                    ; Main: gobber$ = "45678"

                                  ClearVertBlinds                                               ; Main: CLS

                                  LDI                               0
                                  STW                               _X                          ; Main: FOR X=0 TO N1

_next_0x0239                      LDWI                              0x53b8
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  STW                               memValue
                                  LDWI                              0x51b8
                                  ADDW                              _X
                                  ADDW                              _X
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: R(X) = S(X)

                                  LDWI                              0x53b8
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x52b8
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  ADDW                              0xe8
                                  SUBI                              1
                                  STW                               memValue
                                  LDWI                              0x50b8
                                  ADDW                              _X
                                  ADDW                              _X
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: N(X) = S(X) + T(X) - 1

                                  ForNextFarInc                     _X _next_0x0239 35          ; Main: NEXT X

                                  PrintString                       _str_0x54a4
                                  NewLine                                                       ; Main: PRINT "HI! IM ELIZA, WHAT IS YOURPROBLEM?"

_restart                          LDI                               63
                                  ST                                fgbgColour + 1
                                  LDWI                              0x5ea3
                                  Input                             
                                  LDI                               15
                                  ST                                fgbgColour + 1
                                  NewLine                                                       ; Main: set FG_COLOUR, 0x3F : INPUT I$ : set FG_COLOUR, 0x0F : print

                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringUpper                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x61a0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x61a0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  STW                               strSrcAddr
                                  LDWI                              0x4da0
                                  StringCopy                                                    ; Main: I$ = "  " + UPPER$(I$) + "  "

_input                            LDI                               0
                                  STW                               _L
                                  LDWI                              0x4da0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: FOR L=0 TO LEN(I$)-1

_input0                           LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDI                               1
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  LDWI                              0x7fa0
                                  StringMid                         
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x6ca0
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _else_0x03bb 0
                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDW                               _L
                                  STW                               strDstLen
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x4da0
                                  PEEK                              
                                  SUBW                              _L
                                  SUBI                              1
                                  STW                               strDstLen
                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringRight                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x4da0
                                  StringCopy                        
                                  LDWI                              _input0
                                  CALL                              giga_vAC                    ; Main: IF MID$(I$,L,1) = "'" then I$ = LEFT$(I$,L) + RIGHT$(I$,LEN(I$)-L-1) : goto input0

_else_0x03bb                      LDW                               _L
                                  ADDI                              4
                                  STW                               0xe8
                                  LDWI                              0x4da0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               0xea
                                  LDW                               0xe8
                                  SUBW                              0xea
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _else_0x03e4 1
                                  LDWI                              _input1
                                  CALL                              giga_vAC                    ; Main: IF L+4 > LEN(I$)-1 THEN goto input1

_else_0x03e4                      LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDI                               4
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  LDWI                              0x7fa0
                                  StringMid                         
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x59b0
                                  StringCmp                         
                                  ANDI                              1
                                  XORI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  JumpFalse                         _else_0x041f 2
                                  LDWI                              _input1
                                  CALL                              giga_vAC                    ; Main: IF MID$(I$,L,4) <> "SHUT" THEN goto input1

_else_0x041f                      PrintString                       _str_0x4cca
                                  NewLine                                                       ; Main: PRINT "OK, IF THAT'S HOW YOU FEELTHEN I'LL SHUT UP...BYE..."

                                  HALT                                                          ; Main: END

_input1                           ForNextFarVarAdd                  _L _input0 0xb0 0xb2        ; Main: NEXT L

                                  LDI                               1
                                  STW                               _ll                         ; Main: dim tt(2, 1) = 0, 1, 2, 5, 4, 3 : ll = 1

                                  LDWI                              0x4caa
                                  STW                               memDstAddr
                                  LDW                               _L
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDW                               _L
                                  ADDI                              1
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDWI                              0x53b8
                                  ADDW                              _L
                                  ADDW                              _L
                                  DEEK                              
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDWI                              0x4da0
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDWI                              0x0620
                                  ADDW                              _L
                                  ADDW                              _L
                                  DEEK                              
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDI                               1
                                  STW                               memIndex0
                                  LDI                               1
                                  STW                               memIndex1
                                  LDWI                              0x59aa
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDI                               50
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDW                               _L
                                  STW                               memIndex0
                                  LDWI                              0x53b8
                                  ADDW                              memIndex0
                                  ADDW                              memIndex0
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDWI                              19872
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr
                                  INC                               memDstAddr
                                  INC                               memDstAddr
                                  LDWI                              0x0620
                                  ADDW                              _L
                                  ADDW                              _L
                                  DEEK                              
                                  DOKE                              memDstAddr
                                  DOKE                              memDstAddr                  ; Main: gprintf "L=%d L+1=%d : S(L)=%d : I$=%s : R$=%s : tt(1, 1)=%d : @L=0x%4x : @S(L)=0x%4x : @I$=0x%4x : @R$=0x%4x", L, L+1, S(L), I$, REPLIES$(L), tt(1, 1), @L, addr(S(L)), @I$, addr(REPLIES$(L))

                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDWI                              0x4fa0
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _keywords 3
                                  PrintString                       _str_0x4be1
                                  NewLine                           
                                  LDWI                              _restart
                                  CALL                              giga_vAC                    ; Main: IF I$=P$ THEN PRINT "PLEASE DON'T REPEAT YOURSELF!" : GOTO restart

_keywords                         LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  STW                               _K                          ; Main: FOR K=0 TO N1

_next_0x0529                      LDI                               0
                                  STW                               _L
                                  LDWI                              0x4da0
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7aa2
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               0xe8
                                  SUBW                              0xea
                                  STW                               0xb4
                                  LDI                               1
                                  STW                               0xb6                        ; Main: FOR L=0 TO LEN(I$) - LEN(KEYWORD$(K))

_next_0x0554                      LDWI                              0x7aa2
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  LDWI                              0x7ea0
                                  StringMid                         
                                  LDWI                              0x7aa2
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  StringCmp                         
                                  ANDI                              1
                                  XORI                              1
                                  JumpFalse                         _else_0x05af 4
                                  LDWI                              _keywords1
                                  CALL                              giga_vAC                    ; Main: IF MID$(I$,L,LEN(KEYWORD$(K))) <> KEYWORD$(K) THEN goto keywords1

_else_0x05af                      LDW                               _K
                                  XORI                              12
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _else_0x05c6 5
                                  LDWI                              _keywords0
                                  CALL                              giga_vAC                    ; Main: IF K <> YOU_IDX THEN goto keywords0

_else_0x05c6                      LDWI                              0x7ada
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  LDWI                              0x7fa0
                                  StringMid                         
                                  LDWI                              0x7ada
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _keywords0 6
                                  LDI                               28
                                  STW                               _K                          ; Main: IF MID$(I$,L,LEN(KEYWORD$(YOUR_IDX))) = KEYWORD$(YOUR_IDX) THEN K = YOUR_IDX

_keywords0                        LDWI                              0x7aa2
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  STW                               strSrcAddr
                                  LDWI                              0x4aa0
                                  StringCopy                        
                                  LDWI                              _conjugate
                                  CALL                              giga_vAC                    ; Main: F$ = KEYWORD$(K): GOTO conjugate

_keywords1                        ForNextFarVarAdd                  _L _next_0x0554 0xb4 0xb6   ; Main: NEXT L

                                  ForNextFarInc                     _K _next_0x0529 35          ; Main: NEXT K

                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  LDI                               35
                                  STW                               _K
                                  LDWI                              _reply
                                  CALL                              giga_vAC                    ; Main: K=N1 : GOTO reply

_conjugate                        LDWI                              0x4da0
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x4aa0
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               0xe8
                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  SUBW                              0xea
                                  SUBW                              _L
                                  ADDI                              1
                                  STW                               strDstLen
                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringRight                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x64a0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x64a0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x49a0
                                  StringCopy                                                    ; Main: C$ = " " + RIGHT$(I$,LEN(I$)-LEN(F$)-L+1) + " "

                                  LDI                               0
                                  STW                               _X                          ; Main: FOR X=0 TO N2

_next_0x06c2                      LDI                               0
                                  STW                               _L
                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  LDWI                              0x49a0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               0xb4
                                  LDI                               1
                                  STW                               0xb6                        ; Main: FOR L=0 TO LEN(C$)-1

_next_0x06da                      LDW                               _L
                                  ADDI                              1
                                  STW                               0xe8
                                  LDWI                              0x79c6
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  ADDW                              0xe8
                                  STW                               0xea
                                  LDWI                              0x49a0
                                  PEEK                              
                                  STW                               0xec
                                  LDW                               0xea
                                  SUBW                              0xec
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _else_0x0716 7
                                  LDWI                              _conjugate0
                                  CALL                              giga_vAC                    ; Main: IF L+1 + LEN(WORDIN$(X)) > LEN(C$) THEN conjugate0

_else_0x0716                      LDWI                              0x79c6
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  LDWI                              0x7fa0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
                                  StringMid                         
                                  LDWI                              0x79c6
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  StringCmp                         
                                  ANDI                              1
                                  XORI                              1
                                  JumpFalse                         _else_0x0771 8
                                  LDWI                              _conjugate0
                                  CALL                              giga_vAC                    ; Main: IF MID$(C$,L,LEN(WORDIN$(X))) <> WORDIN$(X) THEN conjugate0

_else_0x0771                      LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDW                               _L
                                  STW                               strDstLen
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x78e1
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  STW                               strSrcAddr2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x49a0
                                  PEEK                              
                                  SUBW                              _L
                                  STW                               0xe8
                                  LDWI                              0x79c6
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               0xe8
                                  SUBW                              0xea
                                  STW                               strDstLen
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringRight                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x49a0
                                  StringCopy                                                    ; Main: C$ = LEFT$(C$,L) + WORDOUT$(X) + RIGHT$(C$,LEN(C$)-L-LEN(WORDIN$(X)))

                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  LDWI                              0x78e1
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  ADDW                              _L
                                  STW                               _L                          ; Main: L = L + LEN(WORDOUT$(X))

                                  LDWI                              _conjugate1
                                  CALL                              giga_vAC                    ; Main: GOTO conjugate1

_conjugate0                       LDW                               _L
                                  ADDI                              1
                                  STW                               0xe8
                                  LDWI                              0x78e1
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  ADDW                              0xe8
                                  STW                               0xea
                                  LDWI                              0x49a0
                                  PEEK                              
                                  STW                               0xec
                                  LDW                               0xea
                                  SUBW                              0xec
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _else_0x085c 9
                                  LDWI                              _conjugate1
                                  CALL                              giga_vAC                    ; Main: IF L+1 + LEN(WORDOUT$(X)) > LEN(C$) THEN conjugate1

_else_0x085c                      LDWI                              0x78e1
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
                                  LDWI                              0x7fa0
                                  StringMid                         
                                  LDWI                              0x78e1
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDW                               0xe8
                                  StringCmp                         
                                  ANDI                              1
                                  XORI                              1
                                  JumpFalse                         _else_0x08b7 10
                                  LDWI                              _conjugate1
                                  CALL                              giga_vAC                    ; Main: IF MID$(C$,L,LEN(WORDOUT$(X))) <> WORDOUT$(X) THEN conjugate1

_else_0x08b7                      LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDW                               _L
                                  STW                               strDstLen
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x79c6
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ea0
                                  CALL                              giga_vAC
_page_0x0ea0                      LDLW                              0xFE
                                  LDW                               0xe8
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x49a0
                                  PEEK                              
                                  SUBW                              _L
                                  STW                               0xe8
                                  LDWI                              0x78e1
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               0xe8
                                  SUBW                              0xea
                                  STW                               strDstLen
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringRight                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x49a0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0fa0
                                  CALL                              giga_vAC
_page_0x0fa0                      LDLW                              0xFE
                                  StringCopy                                                    ; Main: C$ = LEFT$(C$,L) + WORDIN$(X) + RIGHT$(C$,LEN(C$)-L-LEN(WORDOUT$(X)))

                                  LDWI                              0x79c6
                                  ADDW                              _X
                                  ADDW                              _X
                                  DEEK                              
                                  PEEK                              
                                  ADDW                              _L
                                  STW                               _L                          ; Main: L = L + LEN(WORDIN$(X))

_conjugate1                       ForNextFarVarAdd                  _L _next_0x06da 0xb4 0xb6   ; Main: NEXT L

                                  ForNextFarInc                     _X _next_0x06c2 6           ; Main: NEXT X

                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDI                               1
                                  STW                               strDstLen
                                  LDI                               1
                                  STW                               strOffset
                                  LDWI                              0x7fa0
                                  StringMid                         
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x64a0
                                  STLW                              0xFE
                                  LDWI                              _page_0x10a0
                                  CALL                              giga_vAC
_page_0x10a0                      LDLW                              0xFE
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _else_0x09e1 11
                                  LDWI                              0x49a0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               strDstLen
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringRight                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x49a0
                                  StringCopy                                                    ; Main: IF MID$(C$,1,1) = " " THEN C$ = RIGHT$(C$,LEN(C$)-1)

_else_0x09e1                      LDI                               0
                                  STW                               _L
                                  LDWI                              0x49a0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: FOR L=0 TO LEN(C$)-1

_conjugate2                       LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDI                               1
                                  STW                               strDstLen
                                  LDW                               _L
                                  STW                               strOffset
                                  STLW                              0xFE
                                  LDWI                              _page_0x11a0
                                  CALL                              giga_vAC
_page_0x11a0                      LDLW                              0xFE
                                  LDWI                              0x7fa0
                                  StringMid                         
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x5ea0
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _else_0x0a8d 12
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDW                               _L
                                  STW                               strDstLen
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x49a0
                                  PEEK                              
                                  SUBW                              _L
                                  SUBI                              1
                                  STW                               strDstLen
                                  LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringRight                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x12a0
                                  CALL                              giga_vAC
_page_0x12a0                      LDLW                              0xFE
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7ea0
                                  StringConcat                      
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x49a0
                                  StringCopy                        
                                  LDWI                              _conjugate2
                                  CALL                              giga_vAC                    ; Main: IF MID$(C$,L,1) = "!" THEN C$ = LEFT$(C$,L) + RIGHT$(C$,LEN(C$)-L-1) : GOTO conjugate2

_else_0x0a8d                      ForNextFarVarAdd                  _L _conjugate2 0xb0 0xb2    ; Main: NEXT L

_reply                            LDWI                              0x51b8
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  STW                               memIndex0
                                  LDWI                              0x0620
                                  ADDW                              memIndex0
                                  ADDW                              memIndex0
                                  DEEK                              
                                  STW                               strSrcAddr
                                  LDWI                              0x4aa0
                                  StringCopy                                                    ; Main: F$ = REPLIES$(R(K))

                                  LDWI                              0x51b8
                                  ADDW                              _K
                                  STLW                              0xFE
                                  LDWI                              _page_0x13a0
                                  CALL                              giga_vAC
_page_0x13a0                      LDLW                              0xFE
                                  ADDW                              _K
                                  DEEK                              
                                  ADDI                              1
                                  STW                               memValue
                                  LDWI                              0x51b8
                                  ADDW                              _K
                                  ADDW                              _K
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDWI                              0x51b8
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  STW                               0xea
                                  LDWI                              0x50b8
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  STW                               0xec
                                  LDW                               0xea
                                  SUBW                              0xec
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _else_0x0b3d 13
                                  LDWI                              0x53b8
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  STW                               memValue
                                  LDWI                              0x51b8
                                  ADDW                              _K
                                  ADDW                              _K
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: R(K) = R(K)+1 : IF R(K)>N(K) THEN R(K) = S(K)

_else_0x0b3d                      LDWI                              0x4aa0
                                  STW                               strSrcAddr
                                  LDI                               1
                                  STW                               strDstLen
                                  STLW                              0xFE
                                  LDWI                              _page_0x14a0
                                  CALL                              giga_vAC
_page_0x14a0                      LDLW                              0xFE
                                  LDWI                              0x7fa0
                                  StringRight                       
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x59a7
                                  StringCmp                         
                                  ANDI                              1
                                  XORI                              1
                                  JumpFalse                         _else_0x0b92 14
                                  PrintString                       _F$
                                  NewLine                           
                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  LDWI                              0x4fa0
                                  StringCopy                        
                                  LDWI                              _restart
                                  CALL                              giga_vAC                    ; Main: IF RIGHT$(F$,1) <> "*" THEN PRINT F$ : P$ = I$ : GOTO restart

_else_0x0b92                      LDWI                              0x49a0
                                  STW                               strSrcAddr
                                  LDWI                              0x59a2
                                  STLW                              0xFE
                                  LDWI                              _page_0x15a0
                                  CALL                              giga_vAC
_page_0x15a0                      LDLW                              0xFE
                                  StringCmp                         
                                  ANDI                              1
                                  XORI                              1
                                  JumpFalse                         _else_0x0bb6 15
                                  LDWI                              _reply0
                                  CALL                              giga_vAC                    ; Main: IF C$<>"   " THEN reply0

_else_0x0bb6                      PrintString                       _str_0x4bad
                                  NewLine                                                       ; Main: PRINT "YOU WILL HAVE TO ELABORATE MORE FOR ME TO HELP YOU"

                                  LDWI                              _restart
                                  CALL                              giga_vAC                    ; Main: GOTO restart

_reply0                           LDWI                              0x4aa0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               0xe8
                                  LDWI                              0x4aa0
                                  STW                               textStr
                                  LDW                               0xe8
                                  STW                               textLen
                                  PrintAcLeft                       
                                  PrintString                       _C$
                                  NewLine                                                       ; Main: PRINT LEFT$(F$,LEN(F$)-1);C$

                                  LDWI                              0x4da0
                                  STW                               strSrcAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x16a0
                                  CALL                              giga_vAC
_page_0x16a0                      LDLW                              0xFE
                                  LDWI                              0x4fa0
                                  StringCopy                        
                                  LDWI                              _restart
                                  CALL                              giga_vAC                    ; Main: P$ = I$ : GOTO restart

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertNeOp                       EQU     0x4ca1
convertGtOp                       EQU     0x43a1
convert16Arr2d                    EQU     0x44a5
loadRegs                          EQU     0x40a2
saveRegs                          EQU     0x3ea5
resetVideoFlags                   EQU     0x43aa
initClearFuncs                    EQU     0x53a1
clearVertBlinds                   EQU     0x3fc3
clearCursorRow                    EQU     0x43b6
input                             EQU     0x3da1
inputExt1                         EQU     0x46a6
inputExt2                         EQU     0x3ad3
inputCursor                       EQU     0x3bad
inputKeys                         EQU     0x47a4
inputIntVar                       EQU     0x50a4
inputStrVar                       EQU     0x52a1
inputReturn                       EQU     0x41bc
inputDelete                       EQU     0x42b9
inputPrint                        EQU     0x3ca3
inputNewline                      EQU     0x51a3
printInit                         EQU     0x55a0
printText                         EQU     0x42a0
printLeft                         EQU     0x3fa1
printChr                          EQU     0x56a5
printChar                         EQU     0x45a7
newLineScroll                     EQU     0x48a2
integerStr                        EQU     0x40c0
stringCopy                        EQU     0x4ba0
stringCmp                         EQU     0x3dc5
stringAdd                         EQU     0x44b1
stringConcat                      EQU     0x41b4
stringLeft                        EQU     0x3bcb
stringRight                       EQU     0x3cc7
stringMid                         EQU     0x3ec3
stringUpper                       EQU     0x3aa7
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert16Arr2d      ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    
                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




                    ; hard coded to load register8 to register15
saveRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

saveRegs_loop       LDW     regsAddr
                    DEEK
                    DOKE    regsWork
                    INC     regsWork
                    INC     regsWork
                    INC     regsAddr
                    INC     regsAddr
                    LDW     regsAddr
                    SUBI    register15
                    BLE     saveRegs_loop
                    RET



                    ; hard coded to save register8 to register15
loadRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

loadRegs_loop       LDW     regsWork
                    DEEK
                    DOKE    regsAddr
                    INC     regsAddr
                    INC     regsAddr
                    INC     regsWork
                    INC     regsWork
                    LDW     regsAddr
                    SUBI    register15
                    BLE     loadRegs_loop
                    RET



                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     inpCursXYBak
                    STW     inpPrnXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     127
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; draws cursor
inputCursor         PUSH
                    LDW     textChr
                    XORI    127
                    BNE     inputC_skip         ; don't flash cursor if char != 127
                    LD      giga_ledState
                    ANDI    2
                    BNE     inputC_skip         ; use ledState as a hack timer
                    LDI     32
                    STW     textChr             ; alternate between 32 and 127
                    
inputC_skip         LDW     inpCursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      inpCursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     inpCursXYOfs        ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     32
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    5                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     inpCursXYOfs        ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     inpCursXYOfs        ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     inpPrnXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDW     inpCursXYBak        ; new cursor position
                    ADDW    inpCursXYOfs
                    STW     inpCursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints left sub string pointed to by textStr
printLeft           PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LD      textLen
                    BEQ     printL_exit
    
printL_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printL_char
printL_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET


                    ; compares two strings: returns 0 for smaller, 1 for equal and 2 for larger
stringCmp           LDW     strSrcAddr
                    PEEK
                    STW     strSrcLen                           ; save str length
                    LDW     strSrcAddr2
                    PEEK
                    STW     strSrcLen2                          ; save str length
                    INC     strSrcAddr
                    INC     strSrcAddr2                         ; skip lengths
                    
stringC_loop        LDW     strSrcAddr
                    PEEK
                    BEQ     stringC_equal                       ; this assumes your strings are valid, (i.e. valid length and terminating bytes)
                    STW     strChr
                    LDW     strSrcAddr2
                    PEEK
                    SUBW    strChr
                    BLT     stringC_larger
                    BGT     stringC_smaller
                    INC     strSrcAddr
                    INC     strSrcAddr2
                    BRA     stringC_loop

stringC_smaller     LDI     0
                    RET
                    
stringC_equal       LDW     strSrcLen
                    SUBW    strSrcLen2
                    BLT     stringC_smaller
                    BGT     stringC_larger                      ; if strings are equal, choose based on length
                    LDI     1
                    RET
                    
stringC_larger      LDI     2
                    RET



                    ; adds two strings together, (internal sub)
stringAdd           LDW     strDstAddr
                    STW     strTmpAddr
                    XORW    strSrcAddr
                    BNE     stringA_diff
                    LDW     strDstAddr                          ; if src = dst then skip first copy
                    PEEK
                    STW     strDstLen
                    ADDW    strDstAddr
                    STW     strDstAddr                          ; skip length byte and point to end of dst
                    INC     strDstAddr
                    BRA     stringA_copy1

stringA_diff        INC     strSrcAddr
                    INC     strDstAddr                          ; skip lengths
                    LDI     0
                    STW     strDstLen
                    
stringA_copy0       LDW     strSrcAddr                          ; assumes strSrcAddr is a valid string <= 94 length
                    PEEK
                    BEQ     stringA_copy1
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    INC     strDstLen
                    BRA     stringA_copy0
                    
stringA_copy1       LDW     strDstLen
                    SUBI    94
                    BGE     stringA_exit                        ; maximum destination length reached
                    INC     strSrcAddr2                         ; skips length first time
                    LDW     strSrcAddr2
                    PEEK
                    BEQ     stringA_exit                        ; copy char until terminating char
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    INC     strDstLen
                    BRA     stringA_copy1

stringA_exit        LDW     strDstLen
                    POKE    strTmpAddr                          ; save concatenated string length
                    LDI     0
                    POKE    strDstAddr                          ; terminating zero
                    RET


                    ; concatenates multiple strings together
stringConcat        PUSH
                    LDWI    stringAdd
                    CALL    giga_vAC
                    POP
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strDstLen
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from right hand side of source string to destination string
stringRight         LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringR_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strDstLen
                    BGE     stringR_skip                        ; length <= srcLength
                    LD      strSrcLen
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    LDI     0
                    
stringR_skip        ADDW    strSrcAddr
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address

stringR_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringR_loop                        ; until finished
                    
stringR_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies length sub string from source offset to destination string
stringMid           LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringM_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strOffset                           
                    SUBW    strDstLen
                    BGE     stringM_skip                        ; length + offset <= srcLength
                    LD      strSrcLen
                    SUBW    strOffset
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    
stringM_skip        LDW     strSrcAddr
                    ADDW    strOffset
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address

stringM_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringM_loop                        ; until finished
                    
stringM_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; creates an upper case string
stringUpper         LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; dst length = src length
    
stringUp_next       INC     strSrcAddr                          ; next char, (skips length byte)
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    BEQ     stringUp_exit
                    ST      strChr
                    SUBI    97
                    BLT     stringUp_char
                    LD      strChr
                    SUBI    122
                    BGT     stringUp_char
                    LD      strChr                              ; >= 97 'a' and <= 122 'z'
                    SUBI    32
                    ST      strChr
                    
stringUp_char       LD      strChr
                    POKE    strDstAddr                          ; upper case char
                    BRA     stringUp_next
                    
stringUp_exit       POKE    strDstAddr                          ; terminating 0
                    RET

