_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x6bd8
textWorkArea                      EQU                               0x7ea0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_270                              EQU                               0x0242
_360                              EQU                               0x0242
_450                              EQU                               0x0251
_540                              EQU                               0x0260
_630                              EQU                               0x026f
_720                              EQU                               0x0274
_810                              EQU                               0x0283
_900                              EQU                               0x028d
_960                              EQU                               0x02ba
_990                              EQU                               0x02e7
_1080                             EQU                               0x0307
_1170                             EQU                               0x0316
_1260                             EQU                               0x031b
_1350                             EQU                               0x032a
_1440                             EQU                               0x0339
_1530                             EQU                               0x0348
_1620                             EQU                               0x0352
_1710                             EQU                               0x035c
_1800                             EQU                               0x0361
_1890                             EQU                               0x0370
_1980                             EQU                               0x03a9
_2070                             EQU                               0x03ad
_2160                             EQU                               0x03b9
_2250                             EQU                               0x03bd
_2340                             EQU                               0x03c1
_2430                             EQU                               0x03c9
_2520                             EQU                               0x0234
_2610                             EQU                               0x03e8
_2700                             EQU                               0x0407
_2790                             EQU                               0x0411
_2880                             EQU                               0x0419
_2970                             EQU                               0x041d
_3060                             EQU                               0x0428
_3150                             EQU                               0x042c
_3240                             EQU                               0x044e
_3330                             EQU                               0x045c
_3420                             EQU                               0x047e
_3510                             EQU                               0x0234
_3600                             EQU                               0x048c
_3690                             EQU                               0x04ae
_3780                             EQU                               0x04b2
_3870                             EQU                               0x04b7
_3960                             EQU                               0x04c5
_4050                             EQU                               0x04cb
_4140                             EQU                               0x04e4
_4230                             EQU                               0x050c
_4320                             EQU                               0x0511
_4410                             EQU                               0x0524
_4500                             EQU                               0x0534
_4590                             EQU                               0x0542
_4680                             EQU                               0x0234
_4770                             EQU                               0x0547
_4860                             EQU                               0x054b
_4950                             EQU                               0x0557
_5040                             EQU                               0x0565
_5130                             EQU                               0x057a
_5220                             EQU                               0x0589
_5310                             EQU                               0x05a6
_5400                             EQU                               0x05b5
_5490                             EQU                               0x05b9
_5580                             EQU                               0x05d6
_5670                             EQU                               0x05e5
_5760                             EQU                               0x05e9
_5850                             EQU                               0x0611
_5940                             EQU                               0x0620
_6030                             EQU                               0x0624
_6120                             EQU                               0x08b5
_6210                             EQU                               0x0234
_6300                             EQU                               0x08c4
_6390                             EQU                               0x08c9
_6480                             EQU                               0x08e9
_6570                             EQU                               0x09a7
_6660                             EQU                               0x09ab
_6750                             EQU                               0x09af
_6840                             EQU                               0x09c2
_6930                             EQU                               0x09e4
_7020                             EQU                               0x0aa2
_7110                             EQU                               0x0ac2
_7200                             EQU                               0x0ad2
_7290                             EQU                               0x0ad8
_7295                             EQU                               0x0aeb
_7380                             EQU                               0x0ba7
_7470                             EQU                               0x0bab
_7560                             EQU                               0x0bb4
_7650                             EQU                               0x0bc2
_7740                             EQU                               0x0bc7
_7830                             EQU                               0x0bd3
_7920                             EQU                               0x0bd7
_8010                             EQU                               0x0bdb
_8100                             EQU                               0x0ca9
_8105                             EQU                               0x0cb7
_8190                             EQU                               0x0cbc
_8280                             EQU                               0x0cca
_8370                             EQU                               0x0ccf
_8460                             EQU                               0x0cdf
_8550                             EQU                               0x0cee
_8640                             EQU                               0x0da2
_page_0x0300                      EQU                               0x0300
_next_0x0352                      EQU                               0x0374
_next_0x0356                      EQU                               0x0378
_next_0x03ab                      EQU                               0x03cd
_page_0x0400                      EQU                               0x0400
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_page_0x09a0                      EQU                               0x09a0
_page_0x0aa0                      EQU                               0x0aa0
_page_0x0ba0                      EQU                               0x0ba0
_page_0x0ca0                      EQU                               0x0ca0
_page_0x0da0                      EQU                               0x0da0
_else_0x0847                      EQU                               0x0de2

; Global Variables
_R                                EQU                               0x0030
_I                                EQU                               0x0032
_J                                EQU                               0x0034
_F                                EQU                               0x0036
_P                                EQU                               0x0038
_M                                EQU                               0x003a
_B                                EQU                               0x003c
_Q                                EQU                               0x003e
_K                                EQU                               0x0040
_D                                EQU                               0x0042
_X                                EQU                               0x0044

; Local Variables

; Arrays
_C_array                          EQU                               0x7de0
_C_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_array                          EQU                               0x0636
_A_array                          DW                                0x7dd2 0x7dc4 0x7db6 0x7da8 0x7cf2 0x7ce4 0x7cd6 0x7cc8 0x7cba 0x7cac 0x7bf2 0x7be4 0x7bd6 0x7bc8 0x7bba 0x7bac 0x7af2 0x7ae4 0x7ad6 0x7ac8 0x7aba 0x7aac 0x79f2 0x79e4 0x79d6 0x79c8 0x79ba 0x79ac 0x78f2 0x78e4 0x78d6 0x78c8 0x78ba 0x78ac 0x77f2 0x77e4 0x77d6 0x77c8 0x77ba 0x77ac 0x76f2 0x76e4 0x76d6 0x76c8 0x76ba 0x76ac 0x75f2 0x75e4 0x75d6 0x75c8 0x75ba 0x75ac 0x74f2 0x74e4 0x74d6 0x74c8 0x74ba 0x74ac 0x73f2 0x73e4 0x73d6 0x73c8 0x73ba 0x73ac 0x72f2 0x72e4 0x72d6 0x72c8 0x72ba 0x72ac 0x71f2 0x71e4 0x71d6 0x71c8 0x71ba 0x71ac 0x70f2 0x70e4 0x70d6 0x70c8 0x70ba 0x70ac 0x6ff2 0x6fe4 0x6fd6 0x6fc8 0x6fba 0x6fac 0x6ef2 0x6ee4 0x6ed6 0x6ec8 0x6eba 0x6eac 0x6df2 0x6de4 0x6dd6 0x6dc8 0x6dba 0x6dac 0x6cf2 
_A_0x7dd2                         EQU                               0x7dd2
_A_0x7dd2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7dc4                         EQU                               0x7dc4
_A_0x7dc4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7db6                         EQU                               0x7db6
_A_0x7db6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7da8                         EQU                               0x7da8
_A_0x7da8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7cf2                         EQU                               0x7cf2
_A_0x7cf2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7ce4                         EQU                               0x7ce4
_A_0x7ce4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7cd6                         EQU                               0x7cd6
_A_0x7cd6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7cc8                         EQU                               0x7cc8
_A_0x7cc8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7cba                         EQU                               0x7cba
_A_0x7cba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7cac                         EQU                               0x7cac
_A_0x7cac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7bf2                         EQU                               0x7bf2
_A_0x7bf2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7be4                         EQU                               0x7be4
_A_0x7be4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7bd6                         EQU                               0x7bd6
_A_0x7bd6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7bc8                         EQU                               0x7bc8
_A_0x7bc8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7bba                         EQU                               0x7bba
_A_0x7bba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7bac                         EQU                               0x7bac
_A_0x7bac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7af2                         EQU                               0x7af2
_A_0x7af2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7ae4                         EQU                               0x7ae4
_A_0x7ae4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7ad6                         EQU                               0x7ad6
_A_0x7ad6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7ac8                         EQU                               0x7ac8
_A_0x7ac8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7aba                         EQU                               0x7aba
_A_0x7aba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x7aac                         EQU                               0x7aac
_A_0x7aac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x79f2                         EQU                               0x79f2
_A_0x79f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x79e4                         EQU                               0x79e4
_A_0x79e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x79d6                         EQU                               0x79d6
_A_0x79d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x79c8                         EQU                               0x79c8
_A_0x79c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x79ba                         EQU                               0x79ba
_A_0x79ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x79ac                         EQU                               0x79ac
_A_0x79ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x78f2                         EQU                               0x78f2
_A_0x78f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x78e4                         EQU                               0x78e4
_A_0x78e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x78d6                         EQU                               0x78d6
_A_0x78d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x78c8                         EQU                               0x78c8
_A_0x78c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x78ba                         EQU                               0x78ba
_A_0x78ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x78ac                         EQU                               0x78ac
_A_0x78ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x77f2                         EQU                               0x77f2
_A_0x77f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x77e4                         EQU                               0x77e4
_A_0x77e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x77d6                         EQU                               0x77d6
_A_0x77d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x77c8                         EQU                               0x77c8
_A_0x77c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x77ba                         EQU                               0x77ba
_A_0x77ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x77ac                         EQU                               0x77ac
_A_0x77ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x76f2                         EQU                               0x76f2
_A_0x76f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x76e4                         EQU                               0x76e4
_A_0x76e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x76d6                         EQU                               0x76d6
_A_0x76d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x76c8                         EQU                               0x76c8
_A_0x76c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x76ba                         EQU                               0x76ba
_A_0x76ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x76ac                         EQU                               0x76ac
_A_0x76ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x75f2                         EQU                               0x75f2
_A_0x75f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x75e4                         EQU                               0x75e4
_A_0x75e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x75d6                         EQU                               0x75d6
_A_0x75d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x75c8                         EQU                               0x75c8
_A_0x75c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x75ba                         EQU                               0x75ba
_A_0x75ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x75ac                         EQU                               0x75ac
_A_0x75ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x74f2                         EQU                               0x74f2
_A_0x74f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x74e4                         EQU                               0x74e4
_A_0x74e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x74d6                         EQU                               0x74d6
_A_0x74d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x74c8                         EQU                               0x74c8
_A_0x74c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x74ba                         EQU                               0x74ba
_A_0x74ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x74ac                         EQU                               0x74ac
_A_0x74ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x73f2                         EQU                               0x73f2
_A_0x73f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x73e4                         EQU                               0x73e4
_A_0x73e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x73d6                         EQU                               0x73d6
_A_0x73d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x73c8                         EQU                               0x73c8
_A_0x73c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x73ba                         EQU                               0x73ba
_A_0x73ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x73ac                         EQU                               0x73ac
_A_0x73ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x72f2                         EQU                               0x72f2
_A_0x72f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x72e4                         EQU                               0x72e4
_A_0x72e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x72d6                         EQU                               0x72d6
_A_0x72d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x72c8                         EQU                               0x72c8
_A_0x72c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x72ba                         EQU                               0x72ba
_A_0x72ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x72ac                         EQU                               0x72ac
_A_0x72ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x71f2                         EQU                               0x71f2
_A_0x71f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x71e4                         EQU                               0x71e4
_A_0x71e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x71d6                         EQU                               0x71d6
_A_0x71d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x71c8                         EQU                               0x71c8
_A_0x71c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x71ba                         EQU                               0x71ba
_A_0x71ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x71ac                         EQU                               0x71ac
_A_0x71ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x70f2                         EQU                               0x70f2
_A_0x70f2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x70e4                         EQU                               0x70e4
_A_0x70e4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x70d6                         EQU                               0x70d6
_A_0x70d6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x70c8                         EQU                               0x70c8
_A_0x70c8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x70ba                         EQU                               0x70ba
_A_0x70ba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x70ac                         EQU                               0x70ac
_A_0x70ac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6ff2                         EQU                               0x6ff2
_A_0x6ff2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6fe4                         EQU                               0x6fe4
_A_0x6fe4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6fd6                         EQU                               0x6fd6
_A_0x6fd6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6fc8                         EQU                               0x6fc8
_A_0x6fc8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6fba                         EQU                               0x6fba
_A_0x6fba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6fac                         EQU                               0x6fac
_A_0x6fac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6ef2                         EQU                               0x6ef2
_A_0x6ef2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6ee4                         EQU                               0x6ee4
_A_0x6ee4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6ed6                         EQU                               0x6ed6
_A_0x6ed6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6ec8                         EQU                               0x6ec8
_A_0x6ec8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6eba                         EQU                               0x6eba
_A_0x6eba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6eac                         EQU                               0x6eac
_A_0x6eac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6df2                         EQU                               0x6df2
_A_0x6df2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6de4                         EQU                               0x6de4
_A_0x6de4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6dd6                         EQU                               0x6dd6
_A_0x6dd6                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6dc8                         EQU                               0x6dc8
_A_0x6dc8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6dba                         EQU                               0x6dba
_A_0x6dba                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6dac                         EQU                               0x6dac
_A_0x6dac                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_A_0x6cf2                         EQU                               0x6cf2
_A_0x6cf2                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings
_Z$                               EQU                               0x6aa0
_Z$                               DB                                0 '' 0
_N$                               EQU                               0x66a0
_N$                               DB                                0 '' 0
_A$                               EQU                               0x64a0
_A$                               DB                                0 '' 0

; Constant Strings
_str_0x6cdc                       EQU                               0x6cdc
_str_0x6cdc                       DB                                20 'WELCOME TO THE ALLEY' 0
_str_0x6cc8                       EQU                               0x6cc8
_str_0x6cc8                       DB                                18 'BRING YOUR FRIENDS' 0
_str_0x6ca6                       EQU                               0x6ca6
_str_0x6ca6                       DB                                32 'OKAY LET US FIRST GET ACQUAINTED' 0
_str_0x6be8                       EQU                               0x6be8
_str_0x6be8                       DB                                22 'THE INSTRUCTIONS (Y/N)' 0
_str_0x7da5                       EQU                               0x7da5
_str_0x7da5                       DB                                1 '?' 0
_str_0x7ba9                       EQU                               0x7ba9
_str_0x7ba9                       DB                                1 'Y' 0
_str_0x7ba6                       EQU                               0x7ba6
_str_0x7ba6                       DB                                1 'N' 0
_str_0x69c6                       EQU                               0x69c6
_str_0x69c6                       DB                                56 'THE GAME OF BOWLING TAKES MIND AND SKILL.DURING THE GAME' 0
_str_0x6ba5                       EQU                               0x6ba5
_str_0x6ba5                       DB                                49 'THE COMPUTER WILL KEEP SCORE.YOU MAY COMPETE WITH' 0
_str_0x68c6                       EQU                               0x68c6
_str_0x68c6                       DB                                56 'ON THE PIN DIAGRAM O MEANS THE PIN IS DOWN...+ MEANS THE' 0
_str_0x67c4                       EQU                               0x67c4
_str_0x67c4                       DB                                58 'PIN IS STANDING.AFTER THE GAME THE COMPUTER WILL SHOW YOUR' 0
_str_0x7aa2                       EQU                               0x7aa2
_str_0x7aa2                       DB                                8 'SCORES .' 0
_str_0x69a1                       EQU                               0x69a1
_str_0x69a1                       DB                                35 'FIRST OF ALL...HOW MANY ARE PLAYING' 0
_str_0x68b8                       EQU                               0x68b8
_str_0x68b8                       DB                                12 'VERY GOOD...' 0
_str_0x67a2                       EQU                               0x67a2
_str_0x67a2                       DB                                32 'TYPE ROLL TO GET THE BALL GOING.' 0
_str_0x77a4                       EQU                               0x77a4
_str_0x77a4                       DB                                6 'FRAME:' 0
_str_0x76a5                       EQU                               0x76a5
_str_0x76a5                       DB                                5 'BALL:' 0
_str_0x78a2                       EQU                               0x78a2
_str_0x78a2                       DB                                2 '+ ' 0
_str_0x77a0                       EQU                               0x77a0
_str_0x77a0                       DB                                2 'O ' 0
_str_0x75a2                       EQU                               0x75a2
_str_0x75a2                       DB                                8 'GUTTER!!' 0
_str_0x68ab                       EQU                               0x68ab
_str_0x68ab                       DB                                11 'STRIKE!!!!!' 0
_str_0x74a1                       EQU                               0x74a1
_str_0x74a1                       DB                                9 'SPARE!!!!' 0
_str_0x73a2                       EQU                               0x73a2
_str_0x73a2                       DB                                8 'ERROR!!!' 0
_str_0x65ec                       EQU                               0x65ec
_str_0x65ec                       DB                                18 'ROLL YOUR 2ND BALL' 0
_str_0x72a4                       EQU                               0x72a4
_str_0x72a4                       DB                                6 'FRAMES' 0
_str_0x65d2                       EQU                               0x65d2
_str_0x65d2                       DB                                24 'DO YOU WANT ANOTHER GAME' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0x7da3                 EQU                               0x7da3
_inputVars_0x7da3                 DW                                0x6aa0 
_inputStrs_0x7da1                 EQU                               0x7da1
_inputStrs_0x7da1                 DW                                0x7da5 
_inputTypes_0x7ca2                EQU                               0x7ca2
_inputTypes_0x7ca2                DW                                0x5f05 0x0000 
_input_0x7ca6                     EQU                               0x7ca6
_input_0x7ca6                     DW                                0x7da3 0x7da1 0x7ca2 
_inputVars_0x7ca0                 EQU                               0x7ca0
_inputVars_0x7ca0                 DW                                0x0030 
_inputStrs_0x7aa0                 EQU                               0x7aa0
_inputStrs_0x7aa0                 DW                                0x7da5 
_inputTypes_0x79a8                EQU                               0x79a8
_inputTypes_0x79a8                DW                                0x5f03 0x0000 
_input_0x7ba0                     EQU                               0x7ba0
_input_0x7ba0                     DW                                0x7ca0 0x7aa0 0x79a8 
_inputVars_0x79a0                 EQU                               0x79a0
_inputVars_0x79a0                 DW                                0x66a0 
_inputStrs_0x78aa                 EQU                               0x78aa
_inputStrs_0x78aa                 DW                                0x7da5 
_inputTypes_0x78a6                EQU                               0x78a6
_inputTypes_0x78a6                DW                                0x5f05 0x0000 
_input_0x79a2                     EQU                               0x79a2
_input_0x79a2                     DW                                0x79a0 0x78aa 0x78a6 
_inputVars_0x78a0                 EQU                               0x78a0
_inputVars_0x78a0                 DW                                0x64a0 
_inputStrs_0x76a3                 EQU                               0x76a3
_inputStrs_0x76a3                 DW                                0x7da5 
_inputTypes_0x72a0                EQU                               0x72a0
_inputTypes_0x72a0                DW                                0x5f05 0x0000 
_input_0x71a6                     EQU                               0x71a6
_input_0x71a6                     DW                                0x78a0 0x76a3 0x72a0 

; Code
_entryPoint_                      LDI                               0x20
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  InitNeOp                        
                                  InitGeOp                        
                                  InitLtOp                        
                                  Init16Array2d                                                 ; Main: INIT

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                      
                                  ClearVertBlinds                                               ; Main: mode 2 : cls

_360                              PrintString                       _str_0x6cdc
                                  NewLine                                                       ; Main: PRINT "WELCOME TO THE ALLEY"

_450                              PrintString                       _str_0x6cc8
                                  NewLine                                                       ; Main: PRINT "BRING YOUR FRIENDS"

_540                              PrintString                       _str_0x6ca6
                                  NewLine                                                       ; Main: PRINT "OKAY LET US FIRST GET ACQUAINTED"

_630                              NewLine                                                       ; Main: PRINT ""

_720                              PrintString                       _str_0x6be8
                                  NewLine                                                       ; Main: PRINT "THE INSTRUCTIONS (Y/N)"

_810                              LDWI                              0x7ca6
                                  Input                                                         ; Main: INPUT Z$

_900                              LDWI                              0x6aa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringUpper                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba9
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _960 0
                                  LDWI                              _990
                                  CALL                              giga_vAC                    ; Main: IF UPPER$(Z$) = "Y" THEN 990

_960                              LDWI                              0x6aa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7fa0
                                  StringUpper                       
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba6
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _990 1
                                  LDWI                              _1530
                                  CALL                              giga_vAC                    ; Main: IF UPPER$(Z$) = "N" THEN 1530

_990                              PrintString                       _str_0x69c6
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  NewLine                                                       ; Main: PRINT "THE GAME OF BOWLING TAKES MIND AND SKILL.DURING THE GAME"

_1080                             PrintString                       _str_0x6ba5
                                  NewLine                                                       ; Main: PRINT "THE COMPUTER WILL KEEP SCORE.YOU MAY COMPETE WITH"

_1170                             NewLine                                                       ; Main: PRINT "OTHER PLAYERS[UP TO FOUR].YOU WILL BE PLAYING TEN FRAMES"

_1260                             PrintString                       _str_0x68c6
                                  NewLine                                                       ; Main: PRINT "ON THE PIN DIAGRAM O MEANS THE PIN IS DOWN...+ MEANS THE"

_1350                             PrintString                       _str_0x67c4
                                  NewLine                                                       ; Main: PRINT "PIN IS STANDING.AFTER THE GAME THE COMPUTER WILL SHOW YOUR"

_1440                             PrintString                       _str_0x7aa2
                                  NewLine                                                       ; Main: PRINT "SCORES ."

_1530                             PrintString                       _str_0x69a1                 ; Main: PRINT "FIRST OF ALL...HOW MANY ARE PLAYING";

_1620                             LDWI                              0x7ba0
                                  Input                                                         ; Main: INPUT R

_1710                             NewLine                                                       ; Main: PRINT

_1800                             PrintString                       _str_0x68b8
                                  NewLine                                                       ; Main: PRINT "VERY GOOD..."

_1890                             LDI                               1
                                  STW                               _I
_next_0x0352                      LDI                               1
                                  STW                               _J
_next_0x0356                      LDI                               0
                                  STW                               memValue
                                  LDW                               _I
                                  STW                               memIndex0
                                  LDW                               _J
                                  STW                               memIndex1
                                  LDWI                              0x0636
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  ForNextFarInc                     _J _next_0x0356 6
                                  ForNextFarInc                     _I _next_0x0352 100         ; Main: FOR I=1 TO 100: FOR J=1 TO 6: A(I,J)=0: NEXT J: NEXT I

_1980                             LDI                               1
                                  STW                               _F                          ; Main: F=1

_2070                             LDI                               1
                                  STW                               _P
                                  LDW                               _R
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: FOR P=1 TO R

_2160                             LDI                               0
                                  STW                               _M                          ; Main: M=0

_2250                             LDI                               1
                                  STW                               _B                          ; Main: B=1

_2340                             LDI                               0
                                  STW                               _M
                                  LDI                               0
                                  STW                               _Q                          ; Main: M=0 : Q=0

_2430                             LDI                               1
                                  STW                               _I
_next_0x03ab                      LDWI                              0x7de0
                                  ADDW                              _I
                                  ADDW                              _I
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr
                                  ForNextFarInc                     _I _next_0x03ab 15          ; Main: FOR I=1 TO 15: C(I)=0: NEXT I

_2610                             PrintString                       _str_0x67a2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  NewLine                                                       ; Main: PRINT "TYPE ROLL TO GET THE BALL GOING."

_2700                             LDWI                              0x79a2
                                  Input                                                         ; Main: INPUT N$

_2790                             LDI                               0
                                  STW                               _K
                                  LDI                               0
                                  STW                               _D                          ; Main: K=0: D=0

_2880                             LDI                               1
                                  STW                               _I                          ; Main: FOR I=1 TO 20

_2970                             LDI                               0x64
                                  RandMod                           
                                  STW                               _X                          ; Main: X=RND(100)

_3060                             LDI                               1
                                  STW                               _J                          ; Main: FOR J=1 TO 10

_3150                             LDI                               15
                                  STW                               mathX
                                  LDW                               _J
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               0xe8
                                  LDW                               _X
                                  SUBW                              0xe8
                                  CALL                              convertLtOpAddr
                                  JumpFalse                         _3240 2
                                  LDWI                              _3330
                                  CALL                              giga_vAC                    ; Main: IF X<15*J THEN 3330

_3240                             ForNextFarInc                     _J _3150 10                 ; Main: NEXT J

_3330                             LDI                               1
                                  STW                               memValue
                                  LDI                               15
                                  STW                               mathX
                                  LDW                               _J
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  SUBW                              _X
                                  STW                               memIndex0
                                  LDWI                              0x7de0
                                  ADDW                              memIndex0
                                  ADDW                              memIndex0
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: C(15*J-X)=1

_3420                             ForNextFarInc                     _I _2970 20                 ; Main: NEXT I

_3600                             LDW                               _P
                                  PrintAcInt16                      
                                  PrintString                       _str_0x77a4
                                  PrintString                       _str_0x76a5
                                  NewLine                                                       ; Main: PRINT "PLAYER:"P;"FRAME:";F"BALL:"B

_3690                             LDI                               0
                                  STW                               _I                          ; Main: FOR I=0 TO 3

_3780                             NewLine                                                       ; Main: PRINT

_3870                             LDI                               1
                                  STW                               _J
                                  LDI                               4
                                  SUBW                              _I
                                  STW                               0xb8
                                  LDI                               1
                                  STW                               0xba                        ; Main: FOR J=1 TO 4-I

_3960                             LDW                               _K
                                  ADDI                              1
                                  STW                               _K                          ; Main: K=K+1

_4050                             LDWI                              0x7de0
                                  ADDW                              _K
                                  ADDW                              _K
                                  DEEK                              
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _4140 3
                                  LDWI                              _4320
                                  CALL                              giga_vAC                    ; Main: IF C(K)=1 THEN 4320

_4140                             LDW                               _I
                                  ST                                cursorXY
                                  AtTextCursor                      
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  PrintString                       _str_0x78a2                 ; Main: AT I : PRINT "+ ";

_4230                             LDWI                              _4410
                                  CALL                              giga_vAC                    ; Main: GOTO 4410

_4320                             LDW                               _I
                                  ST                                cursorXY
                                  AtTextCursor                      
                                  PrintString                       _str_0x77a0                 ; Main: AT I : PRINT "O ";

_4410                             ForNextFarVarAdd                  _J _3960 0xb8 0xba          ; Main: NEXT J

_4500                             ForNextFarInc                     _I _3780 3                  ; Main: NEXT I

_4590                             NewLine                                                       ; Main: PRINT ""

_4770                             LDI                               1
                                  STW                               _I                          ; Main: FOR I=1 TO 10

_4860                             LDWI                              0x7de0
                                  ADDW                              _I
                                  ADDW                              _I
                                  DEEK                              
                                  ADDW                              _D
                                  STW                               _D                          ; Main: D=D+C(I)

_4950                             ForNextFarInc                     _I _4860 10                 ; Main: NEXT I

_5040                             LDW                               _D
                                  SUBW                              _M
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _5130 4
                                  LDWI                              _5220
                                  CALL                              giga_vAC                    ; Main: IF D-M <> 0 THEN 5220

_5130                             PrintString                       _str_0x75a2
                                  NewLine                                                       ; Main: PRINT "GUTTER!!"

_5220                             LDW                               _B
                                  XORI                              1
                                  CALL                              convertNeOpAddr
                                  STW                               0xe8
                                  LDW                               _D
                                  XORI                              10
                                  CALL                              convertNeOpAddr
                                  ORW                               0xe8
                                  JumpFalse                         _5310 5
                                  LDWI                              _5490
                                  CALL                              giga_vAC                    ; Main: IF (B<>1) OR (D<>10) THEN 5490

_5310                             PrintString                       _str_0x68ab
                                  NewLine                                                       ; Main: PRINT "STRIKE!!!!!"

_5400                             LDI                               3
                                  STW                               _Q                          ; Main: Q=3

_5490                             LDW                               _B
                                  XORI                              2
                                  CALL                              convertNeOpAddr
                                  STW                               0xe8
                                  LDW                               _D
                                  XORI                              10
                                  CALL                              convertNeOpAddr
                                  ORW                               0xe8
                                  JumpFalse                         _5580 6
                                  LDWI                              _5760
                                  CALL                              giga_vAC                    ; Main: IF (B<>2) OR (D<>10) THEN 5760

_5580                             PrintString                       _str_0x74a1
                                  NewLine                                                       ; Main: PRINT "SPARE!!!!"

_5670                             LDI                               2
                                  STW                               _Q                          ; Main: Q=2

_5760                             LDW                               _B
                                  XORI                              2
                                  CALL                              convertNeOpAddr
                                  STW                               0xe8
                                  LDW                               _D
                                  SUBI                              10
                                  CALL                              convertGeOpAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  ORW                               0xe8
                                  JumpFalse                         _5850 7
                                  LDWI                              _6030
                                  CALL                              giga_vAC                    ; Main: IF (B<>2) OR (D>=10) THEN 6030

_5850                             PrintString                       _str_0x73a2
                                  NewLine                                                       ; Main: PRINT "ERROR!!!"

_5940                             LDI                               1
                                  STW                               _Q                          ; Main: Q=1

_6030                             LDW                               _B
                                  XORI                              1
                                  CALL                              convertNeOpAddr
                                  STW                               0xe8
                                  LDW                               _D
                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  SUBI                              10
                                  CALL                              convertGeOpAddr
                                  ORW                               0xe8
                                  JumpFalse                         _6120 8
                                  LDWI                              _6210
                                  CALL                              giga_vAC                    ; Main: IF (B<>1) OR (D>=10) THEN 6210

_6120                             PrintString                       _str_0x65ec
                                  NewLine                                                       ; Main: PRINT "ROLL YOUR 2ND BALL"

_6300                             NewLine                                                       ; Main: PRINT

_6390                             LDW                               _D
                                  STW                               memValue
                                  LDW                               _F
                                  STW                               mathX
                                  LDW                               _P
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               memIndex0
                                  LDW                               _B
                                  STW                               memIndex1
                                  LDWI                              0x0636
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: A(F*P,B)=D

_6480                             LDW                               _B
                                  XORI                              2
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _6570 9
                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  LDWI                              _7020
                                  CALL                              giga_vAC                    ; Main: IF B=2 THEN 7020

_6570                             LDI                               2
                                  STW                               _B                          ; Main: B=2

_6660                             LDW                               _D
                                  STW                               _M                          ; Main: M=D

_6750                             LDW                               _Q
                                  XORI                              3
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _6840 10
                                  LDWI                              _6210
                                  CALL                              giga_vAC                    ; Main: IF Q=3 THEN 6210

_6840                             LDW                               _D
                                  SUBW                              _M
                                  STW                               memValue
                                  LDW                               _F
                                  STW                               mathX
                                  LDW                               _P
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               memIndex0
                                  LDW                               _B
                                  STW                               memIndex1
                                  LDWI                              0x0636
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: A(F*P,B)=D-M

_6930                             LDW                               _Q
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _7020 11
                                  LDWI                              _2520
                                  CALL                              giga_vAC                    ; Main: IF Q=0 THEN 2520

                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
_7020                             LDW                               _Q
                                  STW                               memValue
                                  LDW                               _F
                                  STW                               mathX
                                  LDW                               _P
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               memIndex0
                                  LDI                               3
                                  STW                               memIndex1
                                  LDWI                              0x0636
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: A(F*P,3)=Q

_7110                             ForNextFarVarAdd                  _P _2160 0xb0 0xb2          ; Main: NEXT P

_7200                             LDW                               _F
                                  ADDI                              1
                                  STW                               _F                          ; Main: F=F+1

_7290                             LDW                               _F
                                  SUBI                              11
                                  CALL                              convertLtOpAddr
                                  JumpFalse                         _7295 12
                                  LDWI                              _2070
                                  CALL                              giga_vAC                    ; Main: IF F<11 THEN 2070

_7295                             PrintString                       _str_0x72a4
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
                                  NewLine                                                       ; Main: PRINT "FRAMES"

_7380                             LDI                               1
                                  STW                               _I                          ; Main: FOR I=1 TO 10

_7470                             LDW                               _I
                                  PrintAcInt16                                                  ; Main: PRINT I;

_7560                             ForNextFarInc                     _I _7470 10                 ; Main: NEXT I

_7650                             NewLine                                                       ; Main: PRINT

_7740                             LDI                               1
                                  STW                               _P
                                  LDW                               _R
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: FOR P=1 TO R

_7830                             LDI                               1
                                  STW                               _I                          ; Main: FOR I=1 TO 3

_7920                             LDI                               1
                                  STW                               _J                          ; Main: FOR J=1 TO 10

_8010                             LDW                               _J
                                  STW                               mathX
                                  LDW                               _P
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               memIndex0
                                  LDW                               _I
                                  STW                               memIndex1
                                  LDWI                              0x0636
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  PrintAcInt16                                                  ; Main: PRINT A(J*P,I);

_8100                             ForNextFarInc                     _J _8010 10                 ; Main: NEXT J

_8105                             NewLine                                                       ; Main: PRINT

_8190                             ForNextFarInc                     _I _7920 3                  ; Main: NEXT I

_8280                             NewLine                                                       ; Main: PRINT

_8370                             ForNextFarVarAdd                  _P _7830 0xb0 0xb2          ; Main: NEXT P

_8460                             PrintString                       _str_0x65d2
                                  NewLine                                                       ; Main: PRINT "DO YOU WANT ANOTHER GAME"

_8550                             LDWI                              0x71a6
                                  Input                                                         ; Main: INPUT A$

                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
_8640                             LDWI                              0x64a0
                                  STW                               strSrcAddr
                                  LDI                               1
                                  STW                               strDstLen
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ea0
                                  StringUpper                       
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba9
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _else_0x0847 13
                                  LDWI                              _2610
                                  CALL                              giga_vAC                    ; Main: IF UPPER$(LEFT$(A$,1)) = "Y" THEN 2610

_else_0x0847                      HALT                                                          ; Main: END

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x5ca5
convertEqOp                       EQU     0x6da3
convertNeOp                       EQU     0x68a2
convertGeOp                       EQU     0x57a0
convertLtOp                       EQU     0x55a3
convert16Arr2d                    EQU     0x70a0
loadRegs                          EQU     0x5ba2
saveRegs                          EQU     0x55e1
multiply16bit                     EQU     0x58cb
divide16bit                       EQU     0x5fa8
randMod16bit                      EQU     0x54ad
scanlineMode                      EQU     0x6ea2
resetVideoFlags                   EQU     0x6fa0
initClearFuncs                    EQU     0x53ee
clearVertBlinds                   EQU     0x59c9
clearCursorRow                    EQU     0x65a2
input                             EQU     0x59a5
inputExt1                         EQU     0x61a6
inputExt2                         EQU     0x56d3
inputCursor                       EQU     0x55c3
inputKeys                         EQU     0x62a4
inputIntVar                       EQU     0x54c0
inputStrVar                       EQU     0x55ac
inputReturn                       EQU     0x5cbc
inputDelete                       EQU     0x5db9
inputPrint                        EQU     0x58a7
inputNewline                      EQU     0x54d4
printInit                         EQU     0x54e9
printText                         EQU     0x5da0
printDigit                        EQU     0x57a9
printInt16                        EQU     0x5eae
printChr                          EQU     0x5ea1
printChar                         EQU     0x60a7
atTextCursor                      EQU     0x5aa0
newLineScroll                     EQU     0x63a2
integerStr                        EQU     0x5bc0
stringCmp                         EQU     0x5ac5
stringLeft                        EQU     0x57cb
stringUpper                       EQU     0x56a7
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert16Arr2d      ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    
                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




                    ; hard coded to load register8 to register15
saveRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

saveRegs_loop       LDW     regsAddr
                    DEEK
                    DOKE    regsWork
                    INC     regsWork
                    INC     regsWork
                    INC     regsAddr
                    INC     regsAddr
                    LDW     regsAddr
                    SUBI    register15
                    BLE     saveRegs_loop
                    RET



                    ; hard coded to save register8 to register15
loadRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

loadRegs_loop       LDW     regsWork
                    DEEK
                    DOKE    regsAddr
                    INC     regsAddr
                    INC     regsAddr
                    INC     regsWork
                    INC     regsWork
                    LDW     regsAddr
                    SUBI    register15
                    BLE     loadRegs_loop
                    RET



                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     inpCursXYBak
                    STW     inpPrnXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     127
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; draws cursor
inputCursor         PUSH
                    LDW     textChr
                    XORI    127
                    BNE     inputC_skip         ; don't flash cursor if char != 127
                    LD      giga_ledState
                    ANDI    2
                    BNE     inputC_skip         ; use ledState as a hack timer
                    LDI     32
                    STW     textChr             ; alternate between 32 and 127
                    
inputC_skip         LDW     inpCursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      inpCursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     inpCursXYOfs        ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     32
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    5                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     inpCursXYOfs        ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     inpCursXYOfs        ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     inpPrnXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDW     inpCursXYBak        ; new cursor position
                    ADDW    inpCursXYOfs
                    STW     inpCursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; compares two strings: returns 0 for smaller, 1 for equal and 2 for larger
stringCmp           LDW     strSrcAddr
                    PEEK
                    STW     strSrcLen                           ; save str length
                    LDW     strSrcAddr2
                    PEEK
                    STW     strSrcLen2                          ; save str length
                    INC     strSrcAddr
                    INC     strSrcAddr2                         ; skip lengths
                    
stringC_loop        LDW     strSrcAddr
                    PEEK
                    BEQ     stringC_equal                       ; this assumes your strings are valid, (i.e. valid length and terminating bytes)
                    STW     strChr
                    LDW     strSrcAddr2
                    PEEK
                    SUBW    strChr
                    BLT     stringC_larger
                    BGT     stringC_smaller
                    INC     strSrcAddr
                    INC     strSrcAddr2
                    BRA     stringC_loop

stringC_smaller     LDI     0
                    RET
                    
stringC_equal       LDW     strSrcLen
                    SUBW    strSrcLen2
                    BLT     stringC_smaller
                    BGT     stringC_larger                      ; if strings are equal, choose based on length
                    LDI     1
                    RET
                    
stringC_larger      LDI     2
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strDstLen
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; creates an upper case string
stringUpper         LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; dst length = src length
    
stringUp_next       INC     strSrcAddr                          ; next char, (skips length byte)
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    BEQ     stringUp_exit
                    ST      strChr
                    SUBI    97
                    BLT     stringUp_char
                    LD      strChr
                    SUBI    122
                    BGT     stringUp_char
                    LD      strChr                              ; >= 97 'a' and <= 122 'z'
                    SUBI    32
                    ST      strChr
                    
stringUp_char       LD      strChr
                    POKE    strDstAddr                          ; upper case char
                    BRA     stringUp_next
                    
stringUp_exit       POKE    strDstAddr                          ; terminating 0
                    RET

