_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_110                              EQU                               0x023d
_120                              EQU                               0x023d
_130                              EQU                               0x0242
_140                              EQU                               0x0247
_150                              EQU                               0x024c
_160                              EQU                               0x0251
_165                              EQU                               0x0266
_170                              EQU                               0x026a
_171                              EQU                               0x027d
_173                              EQU                               0x0282
_180                              EQU                               0x028c
_190                              EQU                               0x029a
_195                              EQU                               0x02a9
_200                              EQU                               0x02c6
_210                              EQU                               0x02d3
_215                              EQU                               0x02e6
_220                              EQU                               0x0307
_230                              EQU                               0x0314
_240                              EQU                               0x0323
_250                              EQU                               0x0329
_260                              EQU                               0x0348
_265                              EQU                               0x035d
_270                              EQU                               0x037e
_280                              EQU                               0x0393
_290                              EQU                               0x03b8
_300                              EQU                               0x03cb
_310                              EQU                               0x03ec
_320                              EQU                               0x040d
_330                              EQU                               0x041d
_334                              EQU                               0x042e
_338                              EQU                               0x0441
_340                              EQU                               0x044a
_350                              EQU                               0x046f
_360                              EQU                               0x047c
_370                              EQU                               0x048c
_380                              EQU                               0x0499
_390                              EQU                               0x04a9
_400                              EQU                               0x04bc
_405                              EQU                               0x04dd
_410                              EQU                               0x04ee
_415                              EQU                               0x0511
_420                              EQU                               0x051a
_430                              EQU                               0x053f
_440                              EQU                               0x054c
_450                              EQU                               0x055c
_460                              EQU                               0x0569
_470                              EQU                               0x0579
_480                              EQU                               0x058a
_485                              EQU                               0x059d
_490                              EQU                               0x05a6
_500                              EQU                               0x05cb
_510                              EQU                               0x05d8
_520                              EQU                               0x05e8
_530                              EQU                               0x05ed
_540                              EQU                               0x060f
_545                              EQU                               0x0634
_547                              EQU                               0x0647
_550                              EQU                               0x0668
_552                              EQU                               0x0679
_554                              EQU                               0x068c
_560                              EQU                               0x0695
_570                              EQU                               0x06ba
_580                              EQU                               0x06c7
_590                              EQU                               0x06d7
_600                              EQU                               0x06e4
_610                              EQU                               0x06f4
_620                              EQU                               0x08af
_625                              EQU                               0x08c2
_630                              EQU                               0x08cb
_640                              EQU                               0x08f0
_650                              EQU                               0x09ad
_660                              EQU                               0x09bd
_670                              EQU                               0x09c2
_680                              EQU                               0x09d5
_685                              EQU                               0x09f6
_690                              EQU                               0x0ab1
_695                              EQU                               0x0ac4
_700                              EQU                               0x0acd
_710                              EQU                               0x0af2
_720                              EQU                               0x0bad
_730                              EQU                               0x0bbd
_740                              EQU                               0x0bc2
_750                              EQU                               0x0bd3
_755                              EQU                               0x0be6
_760                              EQU                               0x0bef
_770                              EQU                               0x0cbf
_780                              EQU                               0x0cc4
_790                              EQU                               0x0cc9
_800                              EQU                               0x0ce0
_810                              EQU                               0x0dae
_815                              EQU                               0x0dcc
_820                              EQU                               0x0dd5
_830                              EQU                               0x0dec
_840                              EQU                               0x0df2
_850                              EQU                               0x0ed7
_860                              EQU                               0x0ee0
_870                              EQU                               0x0fa2
_875                              EQU                               0x0fc7
_880                              EQU                               0x0fe1
_890                              EQU                               0x0ff6
_900                              EQU                               0x10a6
_905                              EQU                               0x10c4
_910                              EQU                               0x10c9
_920                              EQU                               0x10dc
_930                              EQU                               0x11c3
_940                              EQU                               0x11dd
_950                              EQU                               0x11f2
_955                              EQU                               0x12c0
_960                              EQU                               0x12c5
_970                              EQU                               0x12c9
_975                              EQU                               0x12e8
_980                              EQU                               0x13b1
_1000                             EQU                               0x13d7
_1010                             EQU                               0x13dc
_1011                             EQU                               0x13e8
_1012                             EQU                               0x13f2
_1013                             EQU                               0x13f6
_1020                             EQU                               0x14bf
_1021                             EQU                               0x14c9
_1030                             EQU                               0x14ce
_1040                             EQU                               0x14d8
_1041                             EQU                               0x14e6
_1043                             EQU                               0x14eb
_1045                             EQU                               0x14ef
_1050                             EQU                               0x15b9
_1051                             EQU                               0x15d8
_1052                             EQU                               0x15e2
_1060                             EQU                               0x15e7
_1070                             EQU                               0x15e7
_1071                             EQU                               0x16a2
_1072                             EQU                               0x16b1
_1073                             EQU                               0x16c1
_page_0x0300                      EQU                               0x0300
_page_0x0400                      EQU                               0x0400
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_page_0x09a0                      EQU                               0x09a0
_page_0x0aa0                      EQU                               0x0aa0
_page_0x0ba0                      EQU                               0x0ba0
_page_0x0ca0                      EQU                               0x0ca0
_page_0x0da0                      EQU                               0x0da0
_page_0x0ea0                      EQU                               0x0ea0
_page_0x0fa0                      EQU                               0x0fa0
_page_0x10a0                      EQU                               0x10a0
_page_0x11a0                      EQU                               0x11a0
_page_0x12a0                      EQU                               0x12a0
_page_0x13a0                      EQU                               0x13a0
_page_0x14a0                      EQU                               0x14a0
_page_0x15a0                      EQU                               0x15a0
_page_0x16a0                      EQU                               0x16a0

; Global Variables
_Q                                EQU                               0x0030
_Z                                EQU                               0x0032
_X                                EQU                               0x0034
_I                                EQU                               0x0036
_C                                EQU                               0x0038
_R                                EQU                               0x003a
_S                                EQU                               0x003c
_J                                EQU                               0x003e

; Local Variables

; Arrays
_W_array                          EQU                               0x7bc4
_W_array                          DW                                0x7dec 0x7dd8 0x7dc4 0x7db0 0x7cec 0x7cd8 0x7cc4 0x7cb0 0x7bec 0x7bd8 
_W_0x7dec                         EQU                               0x7dec
_W_0x7dec                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7dd8                         EQU                               0x7dd8
_W_0x7dd8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7dc4                         EQU                               0x7dc4
_W_0x7dc4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7db0                         EQU                               0x7db0
_W_0x7db0                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7cec                         EQU                               0x7cec
_W_0x7cec                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7cd8                         EQU                               0x7cd8
_W_0x7cd8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7cc4                         EQU                               0x7cc4
_W_0x7cc4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7cb0                         EQU                               0x7cb0
_W_0x7cb0                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7bec                         EQU                               0x7bec
_W_0x7bec                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_W_0x7bd8                         EQU                               0x7bd8
_W_0x7bd8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_array                          EQU                               0x78d8
_V_array                          DW                                0x7bb0 0x7aec 0x7ad8 0x7ac4 0x7ab0 0x79ec 0x79d8 0x79c4 0x79b0 0x78ec 
_V_0x7bb0                         EQU                               0x7bb0
_V_0x7bb0                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x7aec                         EQU                               0x7aec
_V_0x7aec                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x7ad8                         EQU                               0x7ad8
_V_0x7ad8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x7ac4                         EQU                               0x7ac4
_V_0x7ac4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x7ab0                         EQU                               0x7ab0
_V_0x7ab0                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x79ec                         EQU                               0x79ec
_V_0x79ec                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x79d8                         EQU                               0x79d8
_V_0x79d8                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x79c4                         EQU                               0x79c4
_V_0x79c4                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x79b0                         EQU                               0x79b0
_V_0x79b0                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_V_0x78ec                         EQU                               0x78ec
_V_0x78ec                         DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings

; Constant Strings
_str_0x7dab                       EQU                               0x7dab
_str_0x7dab                       DB                                3 '.  ' 0
_str_0x7da8                       EQU                               0x7da8
_str_0x7da8                       DB                                1 '.' 0
_str_0x7aa1                       EQU                               0x7aa1
_str_0x7aa1                       DB                                1 'I' 0
_str_0x79ab                       EQU                               0x79ab
_str_0x79ab                       DB                                3 '   ' 0
_str_0x79a6                       EQU                               0x79a6
_str_0x79a6                       DB                                3 '  I' 0
_str_0x79a1                       EQU                               0x79a1
_str_0x79a1                       DB                                3 ':  ' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_onAddrs_0x7da2               EQU                               0x7da2
_lut_onAddrs_0x7da2               DW                                0x0cc9 0x0dd5 0x0ee0 
_lut_onAddrs_0x7caa               EQU                               0x7caa
_lut_onAddrs_0x7caa               DW                                0x0cc9 0x0dd5 0x10c9 
_lut_onAddrs_0x7ca6               EQU                               0x7ca6
_lut_onAddrs_0x7ca6               DW                                0x0cc9 0x0dd5 
_lut_onAddrs_0x7ca0               EQU                               0x7ca0
_lut_onAddrs_0x7ca0               DW                                0x0cc9 0x0ee0 0x10c9 
_lut_onAddrs_0x7bac               EQU                               0x7bac
_lut_onAddrs_0x7bac               DW                                0x0cc9 0x0ee0 
_lut_onAddrs_0x7ba8               EQU                               0x7ba8
_lut_onAddrs_0x7ba8               DW                                0x0cc9 0x10c9 
_lut_onAddrs_0x7ba2               EQU                               0x7ba2
_lut_onAddrs_0x7ba2               DW                                0x0dd5 0x0ee0 0x10c9 
_lut_onAddrs_0x7aac               EQU                               0x7aac
_lut_onAddrs_0x7aac               DW                                0x0dd5 0x0ee0 
_lut_onAddrs_0x7aa8               EQU                               0x7aa8
_lut_onAddrs_0x7aa8               DW                                0x0dd5 0x10c9 
_lut_onAddrs_0x7aa4               EQU                               0x7aa4
_lut_onAddrs_0x7aa4               DW                                0x0ee0 0x10c9 

; Code
_entryPoint_                      LDI                               0x20
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  InitNeOp                        
                                  InitLtOp                        
                                  Init16Array2d                                                 ; Main: INIT

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                      
                                  ClearVertBlinds                                               ; Main: mode 2 : cls

_120                              NewLine                                                       ; Main: PRINT

_130                              NewLine                                                       ; Main: PRINT

_140                              NewLine                                                       ; Main: PRINT

_150                              NewLine                                                       ; Main: PRINT

_160                              LDI                               0
                                  STW                               _Q
                                  LDI                               0
                                  STW                               _Z
                                  LDI                               0x09
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: Q=0:Z=0:X=(RND(H)+1)

_165                              LDI                               0
                                  STW                               _I                          ; Main: FOR I=0 TO H

_170                              LDW                               _I
                                  XORW                              _X
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _171 0
                                  LDWI                              _173
                                  CALL                              giga_vAC                    ; Main: IF I=X THEN 173

_171                              LDWI                              _180
                                  CALL                              giga_vAC                    ; Main: PRINT ".--";:GOTO 180

_173                              PrintString                       _str_0x7dab                 ; Main: PRINT ".  ";

_180                              ForNextFarInc                     _I _170 9                   ; Main: NEXT I

_190                              PrintString                       _str_0x7da8
                                  NewLine                                                       ; Main: PRINT "."

_195                              LDI                               1
                                  STW                               _C
                                  STW                               memValue
                                  LDW                               _X
                                  STW                               memIndex0
                                  LDI                               1
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDW                               _C
                                  ADDI                              1
                                  STW                               _C                          ; Main: C=1:W(X,1)=C:C=C+1

_200                              LDW                               _X
                                  STW                               _R
                                  LDI                               1
                                  STW                               _S
                                  LDWI                              _260
                                  CALL                              giga_vAC                    ; Main: R=X:S=1:GOTO 260

_210                              LDW                               _R
                                  XORI                              9
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _215 1
                                  LDWI                              _240
                                  CALL                              giga_vAC                    ; Main: IF R<>H THEN 240

_215                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _220 2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  LDWI                              _230
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 230

_220                              LDI                               1
                                  STW                               _R
                                  LDI                               1
                                  STW                               _S
                                  LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: R=1:S=1:GOTO 250

_230                              LDI                               1
                                  STW                               _R
                                  LDW                               _S
                                  ADDI                              1
                                  STW                               _S
                                  LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: R=1:S=S+1:GOTO 250

_240                              LDW                               _R
                                  ADDI                              1
                                  STW                               _R                          ; Main: R=R+1

_250                              LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _260 3
                                  LDWI                              _210
                                  CALL                              giga_vAC                    ; Main: IF W(R,S)=0 THEN 210

_260                              LDW                               _R
                                  SUBI                              1
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _265 4
                                  LDWI                              _530
                                  CALL                              giga_vAC                    ; Main: IF R-1=0 THEN 530

_265                              LDW                               _R
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _270 5
                                  LDWI                              _530
                                  CALL                              giga_vAC                    ; Main: IF W(R-1,S)<>0 THEN 530

_270                              LDW                               _S
                                  SUBI                              1
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _280 6
                                  LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: IF S-1=0 THEN 390

_280                              LDW                               _S
                                  SUBI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _290 7
                                  LDWI                              _390
                                  CALL                              giga_vAC                    ; Main: IF W(R,S-1)<>0 THEN 390

_290                              LDW                               _R
                                  XORI                              9
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _300 8
                                  LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: IF R=H THEN 330

_300                              LDW                               _R
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _310 9
                                  LDWI                              _330
                                  CALL                              giga_vAC                    ; Main: IF W(R+1,S)<>0 THEN 330

_310                              LDI                               0x03
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(3)+1)

_320                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7da2
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 790,820,860

_330                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _334 10
                                  LDWI                              _340
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 340

_334                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _338 11
                                  LDWI                              _370
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 370

_338                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _350
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 350

_340                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _350 12
                                  LDWI                              _370
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 370

_350                              LDI                               0x03
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(3)+1)

_360                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7caa
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 790,820,910

_370                              LDI                               0x02
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(2)+1)

_380                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7ca6
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 790,820

_390                              LDW                               _R
                                  XORI                              9
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _400 13
                                  LDWI                              _470
                                  CALL                              giga_vAC                    ; Main: IF R=H THEN 470

_400                              LDW                               _R
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _405 14
                                  LDWI                              _470
                                  CALL                              giga_vAC                    ; Main: IF W(R+1,S)<>0 THEN 470

_405                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _410 15
                                  LDWI                              _420
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 420

_410                              LDW                               _Z
                                  XORI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _415 16
                                  LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 450

_415                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _430
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 430

_420                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _430 17
                                  LDWI                              _450
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 450

_430                              LDI                               0x03
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(3)+1)

_440                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7ca0
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 790,860,910

_450                              LDI                               0x02
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(2)+1)

_460                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7bac
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 790,860

_470                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _480 18
                                  LDWI                              _490
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 490

_480                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _485 19
                                  LDWI                              _520
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 520

_485                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _500
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 500

_490                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _500 20
                                  LDWI                              _520
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 520

_500                              LDI                               0x02
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(2)+1)

_510                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7ba8
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 790,910

_520                              LDWI                              _790
                                  CALL                              giga_vAC                    ; Main: GOTO 790

_530                              LDW                               _S
                                  SUBI                              1
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  JumpFalse                         _540 21
                                  LDWI                              _670
                                  CALL                              giga_vAC                    ; Main: IF S-1=0 THEN 670

_540                              LDW                               _S
                                  SUBI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _545 22
                                  LDWI                              _670
                                  CALL                              giga_vAC                    ; Main: IF W(R,S-1)<>0 THEN 670

_545                              LDW                               _R
                                  XORI                              9
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _547 23
                                  LDWI                              _610
                                  CALL                              giga_vAC                    ; Main: IF R=H THEN 610

_547                              LDW                               _R
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _550 24
                                  LDWI                              _610
                                  CALL                              giga_vAC                    ; Main: IF W(R+1,S)<>0 THEN 610

_550                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _552 25
                                  LDWI                              _560
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 560

_552                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _554 26
                                  LDWI                              _590
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 590

_554                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _570
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 570

_560                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _570 27
                                  LDWI                              _590
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 590

_570                              LDI                               0x03
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(3)+1)

_580                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7ba2
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 820,860,910

_590                              LDI                               0x02
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(2)+1)

_600                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7aac
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 820,860

_610                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  JumpFalse                         _620 28
                                  LDWI                              _630
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 630

_620                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _625 29
                                  LDWI                              _660
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 660

_625                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _640
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 640

_630                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _640 30
                                  LDWI                              _660
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 660

_640                              LDI                               0x02
                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(2)+1)

_650                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7aa8
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 820,910

_660                              LDWI                              _820
                                  CALL                              giga_vAC                    ; Main: GOTO 820

_670                              LDW                               _R
                                  XORI                              9
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _680 31
                                  LDWI                              _740
                                  CALL                              giga_vAC                    ; Main: IF R=H THEN 740

_680                              LDW                               _R
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _685 32
                                  LDWI                              _740
                                  CALL                              giga_vAC                    ; Main: IF W(R+1,S)<>0 THEN 740

_685                              LDW                               _S
                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _690 33
                                  LDWI                              _700
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 700

_690                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _695 34
                                  LDWI                              _730
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 730

_695                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _830
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 830

_700                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _710 35
                                  LDWI                              _730
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 730

_710                              LDI                               0x02
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _X                          ; Main: X=(RND(2)+1)

_720                              LDW                               _X
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7aa4
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: ON X GOTO 860,910

_730                              LDWI                              _860
                                  CALL                              giga_vAC                    ; Main: GOTO 860

_740                              LDW                               _S
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _750 36
                                  LDWI                              _760
                                  CALL                              giga_vAC                    ; Main: IF S<>V THEN 760

_750                              LDW                               _Z
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _755 37
                                  LDWI                              _780
                                  CALL                              giga_vAC                    ; Main: IF Z=1 THEN 780

_755                              LDI                               1
                                  STW                               _Q
                                  LDWI                              _770
                                  CALL                              giga_vAC                    ; Main: Q=1:GOTO 770

_760                              LDW                               _S
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _R
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _770 38
                                  LDWI                              _780
                                  CALL                              giga_vAC                    ; Main: IF W(R,S+1)<>0 THEN 780

_770                              LDWI                              _910
                                  CALL                              giga_vAC                    ; Main: GOTO 910

_780                              LDWI                              _1000
                                  CALL                              giga_vAC                    ; Main: GOTO 1000

_790                              LDW                               _C
                                  STW                               memValue
                                  LDW                               _R
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: W(R-1,S)=C

_800                              LDW                               _C
                                  ADDI                              1
                                  STW                               _C
                                  LDI                               2
                                  STW                               memValue
                                  LDW                               _R
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDW                               _R
                                  SUBI                              1
                                  STW                               _R                          ; Main: C=C+1:V(R-1,S)=2:R=R-1

_810                              LDI                               9
                                  STW                               mathX
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDI                              1
                                  XORW                              _C
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _815 39
                                  LDWI                              _1010
                                  CALL                              giga_vAC                    ; Main: IF C=H*V+1 THEN 1010

_815                              LDI                               0
                                  STW                               _Q
                                  LDWI                              _260
                                  CALL                              giga_vAC                    ; Main: Q=0:GOTO 260

_820                              LDW                               _C
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  SUBI                              1
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: W(R,S-1)=C

_830                              LDW                               _C
                                  ADDI                              1
                                  STW                               _C                          ; Main: C=C+1

_840                              LDI                               1
                                  STW                               memValue
                                  LDW                               _R
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ea0
                                  CALL                              giga_vAC
_page_0x0ea0                      LDLW                              0xFE
                                  STW                               memIndex0
                                  LDW                               _S
                                  SUBI                              1
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDW                               _S
                                  SUBI                              1
                                  STW                               _S
                                  LDI                               9
                                  STW                               mathX
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDI                              1
                                  XORW                              _C
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _850 40
                                  LDWI                              _1010
                                  CALL                              giga_vAC                    ; Main: V(R,S-1)=1:S=S-1:IF C=H*V+1 THEN 1010

_850                              LDI                               0
                                  STW                               _Q
                                  LDWI                              _260
                                  CALL                              giga_vAC                    ; Main: Q=0:GOTO 260

_860                              LDW                               _C
                                  STW                               memValue
                                  LDW                               _R
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: W(R+1,S)=C

                                  STLW                              0xFE
                                  LDWI                              _page_0x0fa0
                                  CALL                              giga_vAC
_page_0x0fa0                      LDLW                              0xFE
_870                              LDW                               _C
                                  ADDI                              1
                                  STW                               _C
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _875 41
                                  LDWI                              _880
                                  CALL                              giga_vAC                    ; Main: C=C+1:IF V(R,S)=0 THEN 880

_875                              LDI                               3
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDWI                              _890
                                  CALL                              giga_vAC                    ; Main: V(R,S)=3:GOTO 890

_880                              LDI                               2
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: V(R,S)=2

_890                              LDW                               _R
                                  STLW                              0xFE
                                  LDWI                              _page_0x10a0
                                  CALL                              giga_vAC
_page_0x10a0                      LDLW                              0xFE
                                  ADDI                              1
                                  STW                               _R                          ; Main: R=R+1

_900                              LDI                               9
                                  STW                               mathX
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDI                              1
                                  XORW                              _C
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _905 42
                                  LDWI                              _1010
                                  CALL                              giga_vAC                    ; Main: IF C=H*V+1 THEN 1010

_905                              LDWI                              _530
                                  CALL                              giga_vAC                    ; Main: GOTO 530

_910                              LDW                               _Q
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _920 43
                                  LDWI                              _960
                                  CALL                              giga_vAC                    ; Main: IF Q=1 THEN 960

_920                              LDW                               _C
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  ADDI                              1
                                  STW                               memIndex1
                                  LDWI                              0x7bc4
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDW                               _C
                                  ADDI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x11a0
                                  CALL                              giga_vAC
_page_0x11a0                      LDLW                              0xFE
                                  STW                               _C
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _930 44
                                  LDWI                              _940
                                  CALL                              giga_vAC                    ; Main: W(R,S+1)=C:C=C+1:IF V(R,S)=0 THEN 940

_930                              LDI                               3
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDWI                              _950
                                  CALL                              giga_vAC                    ; Main: V(R,S)=3:GOTO 950

_940                              LDI                               1
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: V(R,S)=1

_950                              LDW                               _S
                                  ADDI                              1
                                  STW                               _S
                                  STLW                              0xFE
                                  LDWI                              _page_0x12a0
                                  CALL                              giga_vAC
_page_0x12a0                      LDLW                              0xFE
                                  LDI                               9
                                  STW                               mathX
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  ADDI                              1
                                  XORW                              _C
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _955 45
                                  LDWI                              _1010
                                  CALL                              giga_vAC                    ; Main: S=S+1:IF C=H*V+1 THEN 1010

_955                              LDWI                              _260
                                  CALL                              giga_vAC                    ; Main: GOTO 260

_960                              LDI                               1
                                  STW                               _Z                          ; Main: Z=1

_970                              LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _975 46
                                  LDWI                              _980
                                  CALL                              giga_vAC                    ; Main: IF V(R,S)=0 THEN 980

_975                              LDI                               3
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  STLW                              0xFE
                                  LDWI                              _page_0x13a0
                                  CALL                              giga_vAC
_page_0x13a0                      LDLW                              0xFE
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDI                               0
                                  STW                               _Q
                                  LDWI                              _1000
                                  CALL                              giga_vAC                    ; Main: V(R,S)=3:Q=0:GOTO 1000

_980                              LDI                               1
                                  STW                               memValue
                                  LDW                               _R
                                  STW                               memIndex0
                                  LDW                               _S
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr
                                  LDI                               0
                                  STW                               _Q
                                  LDI                               1
                                  STW                               _R
                                  LDI                               1
                                  STW                               _S
                                  LDWI                              _250
                                  CALL                              giga_vAC                    ; Main: V(R,S)=1:Q=0:R=1:S=1:GOTO 250

_1000                             LDWI                              _210
                                  CALL                              giga_vAC                    ; Main: GOTO 210

_1010                             LDI                               1
                                  STW                               _J
                                  LDW                               0xe8
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: FOR J=1 TO V

_1011                             PrintString                       _str_0x7aa1                 ; Main: PRINT "I";

_1012                             LDI                               1
                                  STW                               _I                          ; Main: FOR I=1 TO H

_1013                             LDW                               _I
                                  STLW                              0xFE
                                  LDWI                              _page_0x14a0
                                  CALL                              giga_vAC
_page_0x14a0                      LDLW                              0xFE
                                  STW                               memIndex0
                                  LDW                               _J
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  SUBI                              2
                                  CALL                              convertLtOpAddr
                                  JumpFalse                         _1020 47
                                  LDWI                              _1030
                                  CALL                              giga_vAC                    ; Main: IF V(I,J)<2 THEN 1030

_1020                             PrintString                       _str_0x79ab                 ; Main: PRINT "   ";

_1021                             LDWI                              _1040
                                  CALL                              giga_vAC                    ; Main: GOTO 1040

_1030                             PrintString                       _str_0x79a6                 ; Main: PRINT "  I";

_1040                             ForNextFarInc                     _I _1013 9                  ; Main: NEXT I

_1041                             NewLine                                                       ; Main: PRINT

_1043                             LDI                               1
                                  STW                               _I                          ; Main: FOR I=1 TO H

_1045                             LDW                               _I
                                  STW                               memIndex0
                                  LDW                               _J
                                  STW                               memIndex1
                                  STLW                              0xFE
                                  LDWI                              _page_0x15a0
                                  CALL                              giga_vAC
_page_0x15a0                      LDLW                              0xFE
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _1050 48
                                  LDWI                              _1060
                                  CALL                              giga_vAC                    ; Main: IF V(I,J)=0 THEN 1060

_1050                             LDW                               _I
                                  STW                               memIndex0
                                  LDW                               _J
                                  STW                               memIndex1
                                  LDWI                              0x78d8
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  XORI                              2
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _1051 49
                                  LDWI                              _1060
                                  CALL                              giga_vAC                    ; Main: IF V(I,J)=2 THEN 1060

_1051                             PrintString                       _str_0x79a1                 ; Main: PRINT ":  ";

_1052                             LDWI                              _1070
                                  CALL                              giga_vAC                    ; Main: GOTO 1070

_1070                             ForNextFarInc                     _I _1045 9                  ; Main: NEXT I

                                  STLW                              0xFE
                                  LDWI                              _page_0x16a0
                                  CALL                              giga_vAC
_page_0x16a0                      LDLW                              0xFE
_1071                             PrintString                       _str_0x7da8
                                  NewLine                                                       ; Main: PRINT "."

_1072                             ForNextFarVarAdd                  _J _1011 0xb0 0xb2          ; Main: NEXT J

_1073                             HALT                                                          ; Main: END

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x73b8
convertEqOp                       EQU     0x72c1
convertNeOp                       EQU     0x72b8
convertLtOp                       EQU     0x72af
convert16Arr2d                    EQU     0x72e0
multiply16bit                     EQU     0x74cb
divide16bit                       EQU     0x75a8
randMod16bit                      EQU     0x72ec
scanlineMode                      EQU     0x72ca
resetVideoFlags                   EQU     0x72d4
initClearFuncs                    EQU     0x74a1
clearVertBlinds                   EQU     0x78a2
clearCursorRow                    EQU     0x73cf
printInit                         EQU     0x73a2
printText                         EQU     0x74b2
printChar                         EQU     0x76a7
newLineScroll                     EQU     0x77a2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert16Arr2d      ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

