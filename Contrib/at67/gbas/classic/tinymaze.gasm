_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x0236
_elseif_0x0293                    EQU                               0x0275
_endif_0x02bb                     EQU                               0x0295
_endif_0x02ee                     EQU                               0x02bc

; Global Variables
_xy                               EQU                               0x0030
_colour                           EQU                               0x0032
_r                                EQU                               0x0034

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x06f8                  EQU                               0x06f8
def_bytes_0x06f8                  DB                                1 2 4 8 16 32 64 63 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      LDI                               0x20
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                                                    ; Main: INIT

                                  LDI                               1
                                  STW                               graphicsMode
                                  ScanlineMode                      
                                  ClearVertBlinds                                               ; Main: mode 1 : cls

                                  LDI                               0
                                  STW                               _xy                         ; Main: xy = 0

                                  Rand                              
                                  ANDI                              63
                                  STW                               _colour                     ; Main: colour = rnd(0) AND 63

_loop                             Rand                              
                                  ANDI                              7
                                  STW                               0xe8
                                  LDWI                              1784
                                  ADDW                              0xe8
                                  PEEK                              
                                  XORW                              _colour
                                  STW                               _colour                     ; Main: colour = colour XOR peek(colourBits + (rnd(0) AND 7))

                                  LDW                               _colour
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, colour

                                  Rand                              
                                  ANDI                              1
                                  STW                               _r                          ; Main: r = rnd(0) AND 1

                                  LDW                               _r
                                  XORI                              0
                                  BNE                               _elseif_0x0293              ; Main: if r &&= 0

                                  LDW                               _xy
                                  STW                               cursorXY                    ; Main: set CURSOR_XY, xy

                                  LDI                               7
                                  STW                               drawLine_x2
                                  LDI                               7
                                  STW                               drawLine_y2
                                  AtLineCursor                      
                                  DrawVTLine                        
                                  BRA                               _endif_0x02bb               ; Main: line 7, 7

_elseif_0x0293                    LDW                               _r
                                  XORI                              1
                                  BNE                               _endif_0x02bb               ; Main: elseif r &&= 1

                                  LDW                               _xy
                                  ADDI                              7
                                  STW                               cursorXY                    ; Main: set CURSOR_XY, xy + 7

                                  LDWI                              -7
                                  STW                               drawLine_x2
                                  LDI                               7
                                  STW                               drawLine_y2
                                  AtLineCursor                      
                                  DrawVTLine                                                    ; Main: line -7, 7

_endif_0x02bb                     LD                                _xy
                                  ADDI                              8
                                  ST                                _xy                         ; Main: xy.lo = xy.lo + 8

                                  LD                                _xy
                                  SUBI                              160
                                  BLT                               _endif_0x02ee               ; Main: if xy.lo &&>= 160

                                  LDI                               0
                                  ST                                _xy                         ; Main: xy.lo = 0

                                  LD                                _xy + 1
                                  ADDI                              8
                                  ST                                _xy + 1                     ; Main: xy.hi = xy.hi + 8

                                  LD                                _xy + 1
                                  SUBI                              120
                                  BLT                               _endif_0x02ee               ; Main: if xy.hi &&>= 120

                                  LDI                               112
                                  ST                                _xy + 1                     ; Main: xy.hi = 112

                                  NewLine                                                       ; Main: print

_endif_0x02ee                     BRA                               _loop                       ; Main: goto &loop

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x7ba0
rand16bit                         EQU     0x7aa2
scanlineMode                      EQU     0x7ca0
resetVideoFlags                   EQU     0x77c3
initClearFuncs                    EQU     0x79b5
clearVertBlinds                   EQU     0x78c9
clearCursorRow                    EQU     0x77cf
drawPixel                         EQU     0x79a8
drawVTLine                        EQU     0x7caa
drawVTLineExt                     EQU     0x79c6
drawVTLineLoop                    EQU     0x7bb7
drawVTLineLoadXY                  EQU     0x78a2
atLineCursor                      EQU     0x7ac0
printInit                         EQU     0x7aaa
newLineScroll                     EQU     0x7da2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET




drawVTLine          PUSH                                    ;matches drawVTLineLoop's POP
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2                     ;sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawVTL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2                    ;dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                               ;sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawVTL_dy          LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h                      ;h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawVTL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1                    ;dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy                     ;sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawVTL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2                    ;if(sx < sy) dy2 = -1
    
drawVTL_ext         LDWI    drawVTLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawVTLineExt
                    CALL    giga_vAC



drawVTLineExt       LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawVTL_num
                    LDI     0
                    STW     drawLine_dx2                    ;if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx                     ;swap sx with sy
                    LDW     drawLine_h
                    BLE     drawVTL_num
                    LDI     1
                    STW     drawLine_dy2                    ;if(h > 0) dy2 = 1
    
drawVTL_num         LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     48
                    ADDI    1
                    STW     drawLine_num                    ;numerator = sx>>1
                    STW     drawLine_count                  ;for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawVTLineLoadDXY
                    CALL    giga_vAC
                    LDWI    drawVTLineLoop
                    CALL    giga_vAC



drawPixel           LD      drawPixel_xy + 1                ; poke peek(256 + 2*y)*256 + x, fg_colour
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      drawPixel_xy + 1
                    LD      fgbgColour + 1
                    POKE    drawPixel_xy
                    RET


drawVTLineLoop      LDW     drawLine_xy1
                    STW     drawPixel_xy
                    LDWI    drawPixel
                    CALL    giga_vAC                        ;plot start pixel

                    LDW     drawLine_xy2
                    STW     drawPixel_xy
                    LDWI    drawPixel
                    CALL    giga_vAC                        ;plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num                    ;numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawVTL_flip                    ;if(numerator <= sx) goto flip
                    STW     drawLine_num                    ;numerator -= sx
                    
                    LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1                    ;xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2                    ;xy2 -= dxy1
                    BRA     drawVTL_count
                    
drawVTL_flip        LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1                    ;xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2                    ;xy2 -= dxy2

%if TIME_SLICING
drawVTL_count       CALL    realTimeStubAddr
                    LDW     drawLine_count
%else
drawVTL_count       LDW     drawLine_count
%endif
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawVTLineLoop
                    POP                                     ;matches drawVTLine's PUSH
                    RET


drawVTLineLoadXY    LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ST      drawLine_xy1 + 1                ;xy1 = x1 | (y1<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ST      drawLine_xy2 + 1                ;xy2 = x2 | (y2<<8)
                    RET
                    
drawVTLineLoadDXY   LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     28
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1                   ;dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     28
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2                   ;dxy2 = dx2 + (dy2<<8)
                    RET


atLineCursor        LD      cursorXY
                    STW     drawLine_x1
                    SUBI    giga_xres
                    BLT     atLC_x1good
                    LDI     0
                    STW     drawLine_x1
                    
atLC_x1good         LD      cursorXY
                    ADDW    drawLine_x2
                    SUBI    giga_xres
                    BLT     atLC_x2good
                    LDWI    -giga_xres
                    
atLC_x2good         ADDI    giga_xres
                    STW     drawLine_x2
                    ST      cursorXY

                    LD      cursorXY + 1
                    STW     drawLine_y1
                    SUBI    giga_yres
                    BLT     atLC_y1good
                    LDI     giga_yres - 1
                    STW     drawLine_y1
                    
atLC_y1good         LD      cursorXY + 1
                    ADDW    drawLine_y2
                    SUBI    giga_yres
                    BLT     atLC_y2good
                    LDWI    -1
                    
atLC_y2good         ADDI    giga_yres
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    RET




; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

