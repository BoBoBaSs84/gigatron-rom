_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x028e
_midiOff                          EQU                               0x02c2
_1                                EQU                               0x02ce
_2                                EQU                               0x02d6
_3                                EQU                               0x02de
_4                                EQU                               0x02e6
_5                                EQU                               0x02ee
_6                                EQU                               0x0306
_7                                EQU                               0x030e
_8                                EQU                               0x0316
_9                                EQU                               0x031e
_10                               EQU                               0x0326
_11                               EQU                               0x032e
_12                               EQU                               0x0336
_13                               EQU                               0x033e
_14                               EQU                               0x0346
_48                               EQU                               0x036d
_49                               EQU                               0x0374
_50                               EQU                               0x0384
_51                               EQU                               0x0394
_52                               EQU                               0x03a4
_53                               EQU                               0x03b4
_54                               EQU                               0x03c4
_55                               EQU                               0x03d4
_56                               EQU                               0x03ec
_57                               EQU                               0x04da
_113                              EQU                               0x04f2
_119                              EQU                               0x09ec
_101                              EQU                               0x4caf
_114                              EQU                               0x4cc7
_vuMeter                          EQU                               0x4cdf
_decay                            EQU                               0x4eab
_siren                            EQU                               0x50b2
_crash                            EQU                               0x51f3
_beep                             EQU                               0x53de
_tictoc                           EQU                               0x54bd
_pucDeath                         EQU                               0x55ad
_ghostMove                        EQU                               0x56c7
_invaderMove                      EQU                               0x57bf
_invaderShootOld                  EQU                               0x58dc
_invaderShoot                     EQU                               0x59d4
_saucerMove                       EQU                               0x5ae3
_invaderExplode                   EQU                               0x5bc5
_testSfx                          EQU                               0x5cc3
_saucerExplode                    EQU                               0x5dd5
_playerExplode                    EQU                               0x5fbd
_else_0x02ba                      EQU                               0x02af
_page_0x0300                      EQU                               0x0300
_else_0x0369                      EQU                               0x0366
_endif_0x036e                     EQU                               0x036b
_page_0x04cf                      EQU                               0x04cf
_page_0x08e0                      EQU                               0x08e0
_page_0x09e8                      EQU                               0x09e8
_page_0x4ca0                      EQU                               0x4ca0
_next_0x047c                      EQU                               0x4ce4
_page_0x4da0                      EQU                               0x4da0
_else_0x04f1                      EQU                               0x4dd9
_page_0x4ea0                      EQU                               0x4ea0
_endif_0x0543                     EQU                               0x4ec7
_page_0x4fa0                      EQU                               0x4fa0
_endif_0x05c2                     EQU                               0x4fd9
_page_0x50a0                      EQU                               0x50a0
_page_0x51a0                      EQU                               0x51a0
_endif_0x06a6                     EQU                               0x51f1
_page_0x52a0                      EQU                               0x52a0
_page_0x53a0                      EQU                               0x53a0
_endif_0x075c                     EQU                               0x53dc
_page_0x54a0                      EQU                               0x54a0
_endif_0x0794                     EQU                               0x54bb
_page_0x55a0                      EQU                               0x55a0
_endif_0x07e7                     EQU                               0x55ab
_page_0x56a0                      EQU                               0x56a0
_endif_0x0855                     EQU                               0x56a8
_endif_0x0876                     EQU                               0x56c5
_page_0x57a0                      EQU                               0x57a0
_endif_0x08d2                     EQU                               0x57b9
_page_0x58a0                      EQU                               0x58a0
_endif_0x0946                     EQU                               0x58c5
_elseif_0x094b                    EQU                               0x58ca
_endif_0x095f                     EQU                               0x58da
_page_0x59a0                      EQU                               0x59a0
_endif_0x09ba                     EQU                               0x59d2
_page_0x5aa0                      EQU                               0x5aa0
_endif_0x0a33                     EQU                               0x5ae1
_page_0x5ba0                      EQU                               0x5ba0
_endif_0x0a74                     EQU                               0x5bc3
_else_0x0ab3                      EQU                               0x5bf6
_page_0x5ca0                      EQU                               0x5ca0
_endif_0x0adc                     EQU                               0x5cc1
_page_0x5da0                      EQU                               0x5da0
_endif_0x0b56                     EQU                               0x5dd3
_page_0x5ea0                      EQU                               0x5ea0
_page_0x5fa0                      EQU                               0x5fa0
_endif_0x0c06                     EQU                               0x5fbb
_page_0x60a0                      EQU                               0x60a0
_else_0x0c86                      EQU                               0x60dc
_page_0x61a0                      EQU                               0x61a0
_endif_0x0caf                     EQU                               0x61a7

; Global Variables
_t                                EQU                               0x0030
_f                                EQU                               0x0032
_v                                EQU                               0x0034
_kk                               EQU                               0x0036
_state                            EQU                               0x0038
_k                                EQU                               0x003a
_vv                               EQU                               0x003c
_i                                EQU                               0x003e
_i8                               EQU                               0x0040
_vol                              EQU                               0x0042
_y                                EQU                               0x0044
_i4                               EQU                               0x0046
_lut                              EQU                               0x0048
_save                             EQU                               0x004a
_v_lut                            EQU                               0x004c
_f_lut                            EQU                               0x004e
_d_lut                            EQU                               0x0050
_t_lut                            EQU                               0x0052
_n                                EQU                               0x0054
_ff                               EQU                               0x0056
_vvv                              EQU                               0x0058
_m                                EQU                               0x005a

; Local Variables

; Arrays
_volume_array                     EQU                               0x7dd7
_volume_array                     DB                                0x7f 0x7f 0x7f 0x7f 0x7f 
_ypos_array                       EQU                               0x7dd2
_ypos_array                       DB                                0x01 0x01 0x01 0x01 0x01 
_pnotes_array                     EQU                               0x7dc2
_pnotes_array                     DB                                0x4a 0x48 0x47 0x45 0x43 0x41 0x40 0x3e 0x3c 0x3e 0x40 0x41 0x43 0x45 0x47 0x48 
_gnotes_array                     EQU                               0x7db2
_gnotes_array                     DB                                0x3c 0x3e 0x40 0x41 0x43 0x45 0x47 0x48 0x4a 0x48 0x47 0x45 0x43 0x41 0x40 0x3e 
_inotes_array                     EQU                               0x7dae
_inotes_array                     DB                                0x28 0x26 0x24 0x22 

; Strings

; Constant Strings
_str_0x7dee                       EQU                               0x7dee
_str_0x7dee                       DB                                16 'Keys: <1> to <0>' 0
_str_0x7ddc                       EQU                               0x7ddc
_str_0x7ddc                       DB                                16 '      <q> to <r>' 0

; Data

; Time

; Define Bytes
def_bytes_0x08a0                  EQU                               0x08a0
def_bytes_0x08a0                  DB                                8 8 9 9 10 11 13 14 16 18 20 23 25 28 30 33 36 38 41 43 46 48 51 53 55 57 58 60 61 62 62 63 63 63 62 62 61 60 58 57 55 53 51 48 46 43 41 38 36 33 30 28 25 23 20 18 16 14 13 11 10 9 9 8 
def_bytes_0x09a0                  EQU                               0x09a0
def_bytes_0x09a0                  DB                                63 61 59 57 54 53 51 49 47 45 44 42 40 39 37 36 35 33 32 31 30 29 27 26 25 24 23 23 22 21 20 19 19 18 17 17 16 15 15 14 14 13 13 12 12 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 8 8 8 7 
def_bytes_0x09e0                  EQU                               0x09e0
def_bytes_0x09e0                  DB                                63 4 21 34 43 49 54 57 
def_bytes_0x0701                  EQU                               0x0701
def_bytes_0x0701                  DB(4)                                32 38 43 48 52 56 60 62 63 63 61 59 55 50 44 38 31 24 17 11 7 3 1 1 3 7 13 20 28 37 45 52 58 62 63 62 57 51 42 33 23 14 7 2 1 3 9 18 28 39 50 58 62 63 58 50 39 27 15 6 1 2 8 18 
def_bytes_0x6ea0                  EQU                               0x6ea0
def_bytes_0x6ea0                  DB                                32 32 32 32 32 31 31 30 30 29 27 26 25 23 21 19 17 15 13 11 9 8 6 5 4 3 2 2 1 1 1 0 
def_bytes_0x0aa0                  EQU                               0x0aa0
def_bytes_0x0aa0                  DB                                144 71 71 145 54 73 14 144 70 85 145 61 65 4 144 71 
def_bytes_0x0ab0                  EQU                               0x0ab0
def_bytes_0x0ab0                  DB                                74 4 144 70 81 7 144 66 76 145 54 76 14 144 73 76 
def_bytes_0x0ac0                  EQU                               0x0ac0
def_bytes_0x0ac0                  DB                                145 59 67 7 144 75 72 8 144 73 77 145 54 75 7 144 
def_bytes_0x0ad0                  EQU                               0x0ad0
def_bytes_0x0ad0                  DB                                75 76 7 144 71 73 145 61 65 7 144 73 73 7 144 71 
def_bytes_0x0ae0                  EQU                               0x0ae0
def_bytes_0x0ae0                  DB                                72 145 54 74 8 144 70 73 7 144 66 77 145 59 75 14 
def_bytes_0x0af0                  EQU                               0x0af0
def_bytes_0x0af0                  DB                                144 71 71 145 54 73 15 144 70 85 145 61 65 208 160 11 
def_bytes_0x0ba0                  EQU                               0x0ba0
def_bytes_0x0ba0                  DB                                4 144 71 74 5 144 70 81 5 144 66 76 145 54 76 14 
def_bytes_0x0bb0                  EQU                               0x0bb0
def_bytes_0x0bb0                  DB                                144 73 76 145 59 67 8 144 75 72 7 144 73 77 145 54 
def_bytes_0x0bc0                  EQU                               0x0bc0
def_bytes_0x0bc0                  DB                                75 146 66 64 144 73 64 147 38 64 145 54 64 7 144 75 
def_bytes_0x0bd0                  EQU                               0x0bd0
def_bytes_0x0bd0                  DB                                76 7 144 71 73 145 61 65 7 144 73 73 8 144 69 72 
def_bytes_0x0be0                  EQU                               0x0be0
def_bytes_0x0be0                  DB                                145 54 74 7 144 68 73 7 146 66 77 144 59 75 129 14 
def_bytes_0x0bf0                  EQU                               0x0bf0
def_bytes_0x0bf0                  DB                                145 69 71 144 54 73 130 15 145 68 85 208 160 12 
def_bytes_0x0ca0                  EQU                               0x0ca0
def_bytes_0x0ca0                  DB                                144 61 65 3 145 69 74 4 145 68 81 7 145 64 76 144 
def_bytes_0x0cb0                  EQU                               0x0cb0
def_bytes_0x0cb0                  DB                                54 76 15 145 73 76 144 59 67 7 145 74 72 7 145 73 
def_bytes_0x0cc0                  EQU                               0x0cc0
def_bytes_0x0cc0                  DB                                77 144 54 75 7 145 74 76 7 145 73 73 144 61 65 8 
def_bytes_0x0cd0                  EQU                               0x0cd0
def_bytes_0x0cd0                  DB                                145 71 73 7 145 69 72 144 54 74 7 145 68 73 7 145 
def_bytes_0x0ce0                  EQU                               0x0ce0
def_bytes_0x0ce0                  DB                                66 77 144 59 75 15 145 69 71 144 54 73 14 145 68 85 
def_bytes_0x0cf0                  EQU                               0x0cf0
def_bytes_0x0cf0                  DB                                144 61 65 5 145 69 74 5 145 68 81 4 208 160 13 
def_bytes_0x0da0                  EQU                               0x0da0
def_bytes_0x0da0                  DB                                145 64 76 144 54 76 15 145 73 76 144 59 67 7 145 74 
def_bytes_0x0db0                  EQU                               0x0db0
def_bytes_0x0db0                  DB                                72 7 145 73 77 144 54 75 7 145 74 76 8 145 73 73 
def_bytes_0x0dc0                  EQU                               0x0dc0
def_bytes_0x0dc0                  DB                                144 61 65 7 145 71 73 7 145 69 72 144 54 74 7 145 
def_bytes_0x0dd0                  EQU                               0x0dd0
def_bytes_0x0dd0                  DB                                68 73 7 145 66 77 144 59 75 15 145 69 71 144 54 73 
def_bytes_0x0de0                  EQU                               0x0de0
def_bytes_0x0de0                  DB                                14 145 68 85 144 61 65 5 145 69 74 5 145 68 81 5 
def_bytes_0x0df0                  EQU                               0x0df0
def_bytes_0x0df0                  DB                                145 64 76 144 54 76 14 145 73 76 144 59 67 208 160 14 
def_bytes_0x0ea0                  EQU                               0x0ea0
def_bytes_0x0ea0                  DB                                7 145 74 72 7 145 73 77 144 54 75 8 145 74 76 7 
def_bytes_0x0eb0                  EQU                               0x0eb0
def_bytes_0x0eb0                  DB                                145 73 73 144 61 65 7 145 71 73 7 145 69 72 144 54 
def_bytes_0x0ec0                  EQU                               0x0ec0
def_bytes_0x0ec0                  DB                                74 7 145 68 73 4 146 76 90 4 145 66 77 144 59 75 
def_bytes_0x0ed0                  EQU                               0x0ed0
def_bytes_0x0ed0                  DB                                146 81 89 3 146 76 86 4 146 81 83 3 146 76 78 146 
def_bytes_0x0ee0                  EQU                               0x0ee0
def_bytes_0x0ee0                  DB                                78 89 4 144 81 70 146 78 70 144 80 86 145 76 86 130 
def_bytes_0x0ef0                  EQU                               0x0ef0
def_bytes_0x0ef0                  DB                                4 145 76 65 144 80 65 144 78 83 145 81 83 208 160 15 
def_bytes_0x0fa0                  EQU                               0x0fa0
def_bytes_0x0fa0                  DB                                3 145 81 65 144 78 65 144 80 78 145 76 78 4 145 76 
def_bytes_0x0fb0                  EQU                               0x0fb0
def_bytes_0x0fb0                  DB                                64 144 80 64 144 78 70 145 81 70 3 145 81 64 144 78 
def_bytes_0x0fc0                  EQU                               0x0fc0
def_bytes_0x0fc0                  DB                                64 144 80 65 145 76 65 4 145 76 64 144 80 64 144 78 
def_bytes_0x0fd0                  EQU                               0x0fd0
def_bytes_0x0fd0                  DB                                65 145 81 65 4 145 81 64 144 78 64 144 80 64 145 76 
def_bytes_0x0fe0                  EQU                               0x0fe0
def_bytes_0x0fe0                  DB                                64 3 145 76 64 144 80 64 144 78 64 145 81 64 4 145 
def_bytes_0x0ff0                  EQU                               0x0ff0
def_bytes_0x0ff0                  DB                                81 64 144 78 64 144 80 64 145 76 64 3 208 160 16 
def_bytes_0x10a0                  EQU                               0x10a0
def_bytes_0x10a0                  DB                                145 76 64 144 80 64 144 78 64 145 81 64 4 145 81 64 
def_bytes_0x10b0                  EQU                               0x10b0
def_bytes_0x10b0                  DB                                144 78 64 144 80 64 145 76 64 4 145 76 64 144 80 64 
def_bytes_0x10c0                  EQU                               0x10c0
def_bytes_0x10c0                  DB                                144 78 64 145 81 64 3 145 81 64 144 78 64 144 80 64 
def_bytes_0x10d0                  EQU                               0x10d0
def_bytes_0x10d0                  DB                                145 76 64 4 145 76 64 144 80 64 144 78 64 145 81 64 
def_bytes_0x10e0                  EQU                               0x10e0
def_bytes_0x10e0                  DB                                3 145 81 65 144 78 65 144 80 64 145 76 64 4 145 76 
def_bytes_0x10f0                  EQU                               0x10f0
def_bytes_0x10f0                  DB                                66 144 80 66 144 78 64 145 81 64 4 208 160 17 
def_bytes_0x11a0                  EQU                               0x11a0
def_bytes_0x11a0                  DB                                145 81 66 144 78 66 144 80 64 145 76 64 3 145 76 67 
def_bytes_0x11b0                  EQU                               0x11b0
def_bytes_0x11b0                  DB                                144 80 67 144 78 65 145 81 65 4 145 81 67 144 78 67 
def_bytes_0x11c0                  EQU                               0x11c0
def_bytes_0x11c0                  DB                                144 80 66 145 76 66 3 145 76 67 144 80 67 144 78 66 
def_bytes_0x11d0                  EQU                               0x11d0
def_bytes_0x11d0                  DB                                145 81 66 4 145 81 68 144 78 68 144 80 67 145 76 67 
def_bytes_0x11e0                  EQU                               0x11e0
def_bytes_0x11e0                  DB                                4 145 76 68 144 80 68 144 78 67 145 81 67 3 145 81 
def_bytes_0x11f0                  EQU                               0x11f0
def_bytes_0x11f0                  DB                                67 144 78 67 144 80 67 145 76 67 4 208 160 18 
def_bytes_0x12a0                  EQU                               0x12a0
def_bytes_0x12a0                  DB                                145 76 67 144 80 67 144 78 68 145 81 68 3 145 81 67 
def_bytes_0x12b0                  EQU                               0x12b0
def_bytes_0x12b0                  DB                                144 78 67 144 80 68 145 76 68 4 145 76 67 144 80 67 
def_bytes_0x12c0                  EQU                               0x12c0
def_bytes_0x12c0                  DB                                144 78 67 145 81 67 4 145 81 66 144 78 66 144 80 67 
def_bytes_0x12d0                  EQU                               0x12d0
def_bytes_0x12d0                  DB                                145 76 67 3 145 76 65 144 80 65 144 78 67 145 81 67 
def_bytes_0x12e0                  EQU                               0x12e0
def_bytes_0x12e0                  DB                                4 145 81 64 144 78 64 144 80 67 145 76 67 3 145 76 
def_bytes_0x12f0                  EQU                               0x12f0
def_bytes_0x12f0                  DB                                76 144 80 76 144 78 66 145 81 66 4 208 160 19 
def_bytes_0x13a0                  EQU                               0x13a0
def_bytes_0x13a0                  DB                                145 81 87 144 78 87 144 80 65 145 76 65 4 145 76 99 
def_bytes_0x13b0                  EQU                               0x13b0
def_bytes_0x13b0                  DB                                144 80 99 144 78 64 145 81 64 3 146 54 73 144 80 78 
def_bytes_0x13c0                  EQU                               0x13c0
def_bytes_0x13c0                  DB                                145 76 78 4 144 78 91 145 81 91 3 144 80 105 145 76 
def_bytes_0x13d0                  EQU                               0x13d0
def_bytes_0x13d0                  DB                                105 4 128 129 4 144 61 65 145 66 64 130 131 14 144 54 
def_bytes_0x13e0                  EQU                               0x13e0
def_bytes_0x13e0                  DB                                76 14 144 59 67 145 68 64 15 144 54 75 145 68 64 14 
def_bytes_0x13f0                  EQU                               0x13f0
def_bytes_0x13f0                  DB                                144 61 65 15 144 54 74 14 144 59 75 208 160 20 
def_bytes_0x14a0                  EQU                               0x14a0
def_bytes_0x14a0                  DB                                145 69 64 14 144 54 73 145 69 64 15 144 61 65 14 144 
def_bytes_0x14b0                  EQU                               0x14b0
def_bytes_0x14b0                  DB                                54 76 15 144 59 67 145 71 64 14 144 54 75 145 71 64 
def_bytes_0x14c0                  EQU                               0x14c0
def_bytes_0x14c0                  DB                                14 144 61 65 15 144 54 74 14 144 59 75 145 68 64 4 
def_bytes_0x14d0                  EQU                               0x14d0
def_bytes_0x14d0                  DB                                146 69 65 3 145 68 66 130 4 145 69 68 4 144 54 73 
def_bytes_0x14e0                  EQU                               0x14e0
def_bytes_0x14e0                  DB                                145 68 69 145 68 64 3 145 69 71 145 69 65 4 145 68 
def_bytes_0x14f0                  EQU                               0x14f0
def_bytes_0x14f0                  DB                                72 145 68 66 3 145 69 74 145 69 68 4 208 160 21 
def_bytes_0x15a0                  EQU                               0x15a0
def_bytes_0x15a0                  DB                                144 61 65 145 68 75 145 68 69 4 145 69 75 145 69 71 
def_bytes_0x15b0                  EQU                               0x15b0
def_bytes_0x15b0                  DB                                3 145 68 75 145 68 72 4 145 69 76 145 69 74 3 144 
def_bytes_0x15c0                  EQU                               0x15c0
def_bytes_0x15c0                  DB                                54 76 145 68 76 145 68 75 4 145 69 76 145 69 75 4 
def_bytes_0x15d0                  EQU                               0x15d0
def_bytes_0x15d0                  DB                                145 68 76 145 68 75 3 145 69 76 145 69 76 4 144 59 
def_bytes_0x15e0                  EQU                               0x15e0
def_bytes_0x15e0                  DB                                67 145 68 76 145 68 76 3 145 69 76 145 69 76 4 145 
def_bytes_0x15f0                  EQU                               0x15f0
def_bytes_0x15f0                  DB                                68 76 145 68 76 4 145 69 76 145 69 76 3 208 160 22 
def_bytes_0x16a0                  EQU                               0x16a0
def_bytes_0x16a0                  DB                                144 54 75 145 68 76 145 68 76 4 145 69 76 145 69 76 
def_bytes_0x16b0                  EQU                               0x16b0
def_bytes_0x16b0                  DB                                3 145 68 76 145 68 76 4 145 69 76 145 69 76 4 144 
def_bytes_0x16c0                  EQU                               0x16c0
def_bytes_0x16c0                  DB                                61 65 145 68 76 145 68 76 3 145 69 76 145 69 76 4 
def_bytes_0x16d0                  EQU                               0x16d0
def_bytes_0x16d0                  DB                                145 68 76 145 68 76 3 145 69 76 145 69 76 4 144 54 
def_bytes_0x16e0                  EQU                               0x16e0
def_bytes_0x16e0                  DB                                74 145 68 76 145 68 76 4 145 69 77 145 69 76 3 145 
def_bytes_0x16f0                  EQU                               0x16f0
def_bytes_0x16f0                  DB                                68 77 145 68 76 4 145 69 64 145 69 76 3 208 160 23 
def_bytes_0x17a0                  EQU                               0x17a0
def_bytes_0x17a0                  DB                                144 59 75 145 80 67 146 68 76 4 147 81 69 146 69 77 
def_bytes_0x17b0                  EQU                               0x17b0
def_bytes_0x17b0                  DB                                4 145 80 72 146 68 77 131 3 145 81 75 146 69 64 4 
def_bytes_0x17c0                  EQU                               0x17c0
def_bytes_0x17c0                  DB                                144 54 73 145 80 75 145 80 67 130 3 145 81 75 145 81 
def_bytes_0x17d0                  EQU                               0x17d0
def_bytes_0x17d0                  DB                                69 4 145 80 75 145 80 72 4 145 81 76 145 81 75 3 
def_bytes_0x17e0                  EQU                               0x17e0
def_bytes_0x17e0                  DB                                144 61 65 145 80 76 145 80 75 4 145 81 76 145 81 75 
def_bytes_0x17f0                  EQU                               0x17f0
def_bytes_0x17f0                  DB                                3 145 80 76 145 80 75 4 145 81 76 208 160 24 
def_bytes_0x18a0                  EQU                               0x18a0
def_bytes_0x18a0                  DB                                145 81 76 4 144 54 76 145 80 76 145 80 76 3 145 81 
def_bytes_0x18b0                  EQU                               0x18b0
def_bytes_0x18b0                  DB                                76 145 81 76 4 145 80 76 145 80 76 3 145 81 77 145 
def_bytes_0x18c0                  EQU                               0x18c0
def_bytes_0x18c0                  DB                                81 76 4 144 59 67 145 75 64 146 80 76 4 147 76 67 
def_bytes_0x18d0                  EQU                               0x18d0
def_bytes_0x18d0                  DB                                146 81 76 3 145 75 70 146 80 76 131 4 145 76 73 146 
def_bytes_0x18e0                  EQU                               0x18e0
def_bytes_0x18e0                  DB                                81 77 3 144 54 75 145 75 76 145 75 64 130 4 145 76 
def_bytes_0x18f0                  EQU                               0x18f0
def_bytes_0x18f0                  DB                                79 145 76 67 4 145 75 79 145 75 70 3 208 160 25 
def_bytes_0x19a0                  EQU                               0x19a0
def_bytes_0x19a0                  DB                                145 76 79 145 76 73 4 144 61 65 145 75 80 145 75 76 
def_bytes_0x19b0                  EQU                               0x19b0
def_bytes_0x19b0                  DB                                3 145 76 80 145 76 79 4 145 75 80 145 75 79 4 145 
def_bytes_0x19c0                  EQU                               0x19c0
def_bytes_0x19c0                  DB                                76 80 145 76 79 3 144 54 74 145 75 81 145 75 80 4 
def_bytes_0x19d0                  EQU                               0x19d0
def_bytes_0x19d0                  DB                                145 76 81 145 76 80 3 145 75 81 145 75 80 4 145 76 
def_bytes_0x19e0                  EQU                               0x19e0
def_bytes_0x19e0                  DB                                81 145 76 80 4 146 61 64 144 59 75 145 66 82 147 75 
def_bytes_0x19f0                  EQU                               0x19f0
def_bytes_0x19f0                  DB                                81 3 147 76 81 4 147 75 81 3 147 76 81 208 160 26 
def_bytes_0x1aa0                  EQU                               0x1aa0
def_bytes_0x1aa0                  DB                                4 144 54 73 145 66 82 131 14 146 61 65 128 15 144 54 
def_bytes_0x1ab0                  EQU                               0x1ab0
def_bytes_0x1ab0                  DB                                76 130 14 146 69 64 144 59 67 145 68 64 15 144 54 75 
def_bytes_0x1ac0                  EQU                               0x1ac0
def_bytes_0x1ac0                  DB                                145 68 64 14 144 61 65 14 144 54 74 15 146 64 64 144 
def_bytes_0x1ad0                  EQU                               0x1ad0
def_bytes_0x1ad0                  DB                                59 75 145 69 64 14 144 54 73 145 69 64 15 144 61 65 
def_bytes_0x1ae0                  EQU                               0x1ae0
def_bytes_0x1ae0                  DB                                14 144 54 76 14 146 63 64 144 59 67 145 71 64 15 144 
def_bytes_0x1af0                  EQU                               0x1af0
def_bytes_0x1af0                  DB                                54 75 145 71 64 14 144 61 65 15 144 54 74 208 160 27 
def_bytes_0x1ba0                  EQU                               0x1ba0
def_bytes_0x1ba0                  DB                                14 146 61 64 144 59 75 145 68 64 4 147 69 65 3 145 
def_bytes_0x1bb0                  EQU                               0x1bb0
def_bytes_0x1bb0                  DB                                68 66 131 4 145 69 68 3 144 54 73 145 68 69 145 68 
def_bytes_0x1bc0                  EQU                               0x1bc0
def_bytes_0x1bc0                  DB                                64 4 145 69 71 145 69 65 4 145 68 72 145 68 66 3 
def_bytes_0x1bd0                  EQU                               0x1bd0
def_bytes_0x1bd0                  DB                                145 69 74 145 69 68 4 146 61 65 144 68 75 144 68 69 
def_bytes_0x1be0                  EQU                               0x1be0
def_bytes_0x1be0                  DB                                129 3 144 69 75 144 69 71 4 144 68 75 144 68 72 4 
def_bytes_0x1bf0                  EQU                               0x1bf0
def_bytes_0x1bf0                  DB                                144 69 76 144 69 74 3 145 54 76 144 68 76 208 160 28 
def_bytes_0x1ca0                  EQU                               0x1ca0
def_bytes_0x1ca0                  DB                                144 68 75 130 4 144 69 76 144 69 75 3 144 68 76 144 
def_bytes_0x1cb0                  EQU                               0x1cb0
def_bytes_0x1cb0                  DB                                68 75 4 144 69 76 144 69 76 4 144 69 64 145 59 67 
def_bytes_0x1cc0                  EQU                               0x1cc0
def_bytes_0x1cc0                  DB                                144 68 76 144 68 76 3 144 69 76 144 69 76 4 144 68 
def_bytes_0x1cd0                  EQU                               0x1cd0
def_bytes_0x1cd0                  DB                                76 144 68 76 3 144 69 76 144 69 76 4 145 54 75 144 
def_bytes_0x1ce0                  EQU                               0x1ce0
def_bytes_0x1ce0                  DB                                68 76 144 68 76 4 144 69 76 144 69 76 3 144 68 76 
def_bytes_0x1cf0                  EQU                               0x1cf0
def_bytes_0x1cf0                  DB                                144 68 76 4 144 69 76 144 69 76 3 208 160 29 
def_bytes_0x1da0                  EQU                               0x1da0
def_bytes_0x1da0                  DB                                145 61 65 144 68 76 144 68 76 4 144 69 76 144 69 76 
def_bytes_0x1db0                  EQU                               0x1db0
def_bytes_0x1db0                  DB                                4 144 68 76 144 68 76 3 144 69 76 144 69 76 4 145 
def_bytes_0x1dc0                  EQU                               0x1dc0
def_bytes_0x1dc0                  DB                                54 74 144 68 76 144 68 76 3 144 69 77 144 69 76 4 
def_bytes_0x1dd0                  EQU                               0x1dd0
def_bytes_0x1dd0                  DB                                144 68 77 144 68 76 4 144 69 64 144 69 76 3 144 64 
def_bytes_0x1de0                  EQU                               0x1de0
def_bytes_0x1de0                  DB                                64 145 59 75 146 80 67 147 68 76 4 147 69 77 3 146 
def_bytes_0x1df0                  EQU                               0x1df0
def_bytes_0x1df0                  DB                                80 72 147 68 77 4 146 81 75 147 69 64 4 208 160 30 
def_bytes_0x1ea0                  EQU                               0x1ea0
def_bytes_0x1ea0                  DB                                145 54 73 146 80 75 146 80 67 131 3 146 81 75 146 81 
def_bytes_0x1eb0                  EQU                               0x1eb0
def_bytes_0x1eb0                  DB                                69 4 146 80 75 146 80 72 3 146 81 76 146 81 75 4 
def_bytes_0x1ec0                  EQU                               0x1ec0
def_bytes_0x1ec0                  DB                                145 61 65 146 80 76 146 80 75 4 146 81 76 146 81 75 
def_bytes_0x1ed0                  EQU                               0x1ed0
def_bytes_0x1ed0                  DB                                3 146 80 76 146 80 75 4 146 81 76 146 81 76 3 145 
def_bytes_0x1ee0                  EQU                               0x1ee0
def_bytes_0x1ee0                  DB                                54 76 146 80 76 146 80 76 4 146 81 76 146 81 76 4 
def_bytes_0x1ef0                  EQU                               0x1ef0
def_bytes_0x1ef0                  DB                                146 80 76 146 80 76 3 146 81 77 146 81 76 208 160 31 
def_bytes_0x1fa0                  EQU                               0x1fa0
def_bytes_0x1fa0                  DB                                4 144 63 64 145 59 67 146 75 64 147 80 76 3 147 81 
def_bytes_0x1fb0                  EQU                               0x1fb0
def_bytes_0x1fb0                  DB                                76 4 146 75 70 147 80 76 4 146 76 73 147 81 77 3 
def_bytes_0x1fc0                  EQU                               0x1fc0
def_bytes_0x1fc0                  DB                                145 54 75 146 75 76 146 75 64 131 4 146 76 79 146 76 
def_bytes_0x1fd0                  EQU                               0x1fd0
def_bytes_0x1fd0                  DB                                67 3 146 75 79 146 75 70 4 146 76 79 146 76 73 4 
def_bytes_0x1fe0                  EQU                               0x1fe0
def_bytes_0x1fe0                  DB                                145 61 65 146 75 80 146 75 76 3 146 76 80 146 76 79 
def_bytes_0x1ff0                  EQU                               0x1ff0
def_bytes_0x1ff0                  DB                                4 146 75 80 146 75 79 3 146 76 80 208 160 32 
def_bytes_0x20a0                  EQU                               0x20a0
def_bytes_0x20a0                  DB                                146 76 79 4 145 54 74 146 75 81 146 75 80 4 146 76 
def_bytes_0x20b0                  EQU                               0x20b0
def_bytes_0x20b0                  DB                                81 146 76 80 3 146 75 81 146 75 80 4 146 76 81 146 
def_bytes_0x20c0                  EQU                               0x20c0
def_bytes_0x20c0                  DB                                76 80 3 144 68 70 145 59 75 146 75 81 147 30 64 147 
def_bytes_0x20d0                  EQU                               0x20d0
def_bytes_0x20d0                  DB                                30 64 4 146 76 81 4 146 75 81 3 146 76 81 4 145 
def_bytes_0x20e0                  EQU                               0x20e0
def_bytes_0x20e0                  DB                                54 73 130 14 144 61 65 129 15 145 66 76 144 54 76 14 
def_bytes_0x20f0                  EQU                               0x20f0
def_bytes_0x20f0                  DB                                145 69 64 144 59 67 146 42 64 146 42 64 208 160 33 
def_bytes_0x21a0                  EQU                               0x21a0
def_bytes_0x21a0                  DB                                131 7 145 68 74 7 145 66 78 144 54 75 15 145 64 64 
def_bytes_0x21b0                  EQU                               0x21b0
def_bytes_0x21b0                  DB                                144 61 65 7 145 63 74 7 144 61 77 144 54 74 145 33 
def_bytes_0x21c0                  EQU                               0x21c0
def_bytes_0x21c0                  DB                                64 145 33 64 130 15 146 71 64 144 59 75 145 35 64 145 
def_bytes_0x21d0                  EQU                               0x21d0
def_bytes_0x21d0                  DB                                35 64 7 146 69 71 7 146 68 78 144 54 73 145 37 64 
def_bytes_0x21e0                  EQU                               0x21e0
def_bytes_0x21e0                  DB                                145 37 64 14 146 64 71 144 61 65 145 40 64 145 40 64 
def_bytes_0x21f0                  EQU                               0x21f0
def_bytes_0x21f0                  DB                                15 146 66 76 144 54 76 14 146 68 75 208 160 34 
def_bytes_0x22a0                  EQU                               0x22a0
def_bytes_0x22a0                  DB                                144 59 67 15 146 69 71 144 54 75 145 33 64 145 33 64 
def_bytes_0x22b0                  EQU                               0x22b0
def_bytes_0x22b0                  DB                                14 146 71 67 144 61 65 145 35 64 145 35 64 14 146 73 
def_bytes_0x22c0                  EQU                               0x22c0
def_bytes_0x22c0                  DB                                68 144 54 74 145 37 64 145 37 64 15 146 68 70 144 59 
def_bytes_0x22d0                  EQU                               0x22d0
def_bytes_0x22d0                  DB                                75 145 30 64 145 30 64 14 144 54 73 15 144 61 65 130 
def_bytes_0x22e0                  EQU                               0x22e0
def_bytes_0x22e0                  DB                                14 146 66 76 144 54 76 14 146 69 64 144 59 67 145 42 
def_bytes_0x22f0                  EQU                               0x22f0
def_bytes_0x22f0                  DB                                64 145 42 64 8 146 68 74 7 146 66 78 208 160 35 
def_bytes_0x23a0                  EQU                               0x23a0
def_bytes_0x23a0                  DB                                144 54 75 14 146 64 64 144 61 65 7 146 63 74 8 144 
def_bytes_0x23b0                  EQU                               0x23b0
def_bytes_0x23b0                  DB                                61 77 144 54 74 145 33 64 145 33 64 130 14 146 71 64 
def_bytes_0x23c0                  EQU                               0x23c0
def_bytes_0x23c0                  DB                                144 59 75 145 35 64 145 35 64 7 146 69 71 7 146 68 
def_bytes_0x23d0                  EQU                               0x23d0
def_bytes_0x23d0                  DB                                78 144 54 73 145 37 64 145 37 64 15 146 64 71 144 61 
def_bytes_0x23e0                  EQU                               0x23e0
def_bytes_0x23e0                  DB                                65 145 40 64 145 40 64 14 146 66 76 144 54 76 15 146 
def_bytes_0x23f0                  EQU                               0x23f0
def_bytes_0x23f0                  DB                                68 75 144 59 67 14 146 69 71 144 54 75 208 160 36 
def_bytes_0x24a0                  EQU                               0x24a0
def_bytes_0x24a0                  DB                                145 33 64 145 33 64 14 146 71 67 144 61 65 145 35 64 
def_bytes_0x24b0                  EQU                               0x24b0
def_bytes_0x24b0                  DB                                145 35 64 15 146 73 68 144 54 74 145 37 64 145 37 64 
def_bytes_0x24c0                  EQU                               0x24c0
def_bytes_0x24c0                  DB                                14 146 68 70 144 59 75 145 30 64 145 30 64 15 144 54 
def_bytes_0x24d0                  EQU                               0x24d0
def_bytes_0x24d0                  DB                                73 147 62 64 144 54 64 7 147 62 64 144 54 64 7 144 
def_bytes_0x24e0                  EQU                               0x24e0
def_bytes_0x24e0                  DB                                61 65 130 14 146 66 76 144 54 76 145 42 64 145 42 64 
def_bytes_0x24f0                  EQU                               0x24f0
def_bytes_0x24f0                  DB                                15 146 69 64 144 59 67 7 146 68 74 7 208 160 37 
def_bytes_0x25a0                  EQU                               0x25a0
def_bytes_0x25a0                  DB                                146 66 78 144 54 75 15 146 64 64 144 61 65 145 40 64 
def_bytes_0x25b0                  EQU                               0x25b0
def_bytes_0x25b0                  DB                                145 40 64 7 146 63 74 7 144 61 77 144 54 74 130 14 
def_bytes_0x25c0                  EQU                               0x25c0
def_bytes_0x25c0                  DB                                146 71 64 144 59 75 8 146 69 71 7 146 68 78 144 54 
def_bytes_0x25d0                  EQU                               0x25d0
def_bytes_0x25d0                  DB                                73 145 37 64 145 37 64 14 146 64 71 144 61 65 145 40 
def_bytes_0x25e0                  EQU                               0x25e0
def_bytes_0x25e0                  DB                                64 145 40 64 15 146 66 76 144 54 76 145 37 64 145 37 
def_bytes_0x25f0                  EQU                               0x25f0
def_bytes_0x25f0                  DB                                64 14 146 68 75 144 59 67 145 42 64 208 160 38 
def_bytes_0x26a0                  EQU                               0x26a0
def_bytes_0x26a0                  DB                                145 42 64 14 146 69 71 144 54 75 145 37 64 145 37 64 
def_bytes_0x26b0                  EQU                               0x26b0
def_bytes_0x26b0                  DB                                15 146 71 67 144 61 65 145 40 64 145 40 64 14 146 73 
def_bytes_0x26c0                  EQU                               0x26c0
def_bytes_0x26c0                  DB                                68 144 54 74 145 37 64 145 37 64 15 146 68 70 144 59 
def_bytes_0x26d0                  EQU                               0x26d0
def_bytes_0x26d0                  DB                                75 145 30 64 145 30 64 14 144 54 73 14 144 61 65 130 
def_bytes_0x26e0                  EQU                               0x26e0
def_bytes_0x26e0                  DB                                15 146 66 76 144 54 76 145 42 64 145 42 64 14 146 69 
def_bytes_0x26f0                  EQU                               0x26f0
def_bytes_0x26f0                  DB                                64 144 59 67 7 146 68 74 8 146 66 78 208 160 39 
def_bytes_0x27a0                  EQU                               0x27a0
def_bytes_0x27a0                  DB                                144 54 75 14 146 64 64 144 61 65 145 40 64 145 40 64 
def_bytes_0x27b0                  EQU                               0x27b0
def_bytes_0x27b0                  DB                                7 146 63 74 7 144 61 77 144 54 74 130 15 146 71 64 
def_bytes_0x27c0                  EQU                               0x27c0
def_bytes_0x27c0                  DB                                144 59 75 7 146 69 71 7 146 68 78 144 54 73 145 37 
def_bytes_0x27d0                  EQU                               0x27d0
def_bytes_0x27d0                  DB                                64 145 37 64 15 146 64 71 144 61 65 145 40 64 145 40 
def_bytes_0x27e0                  EQU                               0x27e0
def_bytes_0x27e0                  DB                                64 14 146 66 76 144 54 76 145 37 64 145 37 64 14 146 
def_bytes_0x27f0                  EQU                               0x27f0
def_bytes_0x27f0                  DB                                68 75 144 59 67 145 42 64 145 42 64 15 208 160 40 
def_bytes_0x28a0                  EQU                               0x28a0
def_bytes_0x28a0                  DB                                146 69 71 144 54 75 145 37 64 145 37 64 14 146 71 67 
def_bytes_0x28b0                  EQU                               0x28b0
def_bytes_0x28b0                  DB                                144 61 65 145 40 64 145 40 64 15 146 73 68 144 54 74 
def_bytes_0x28c0                  EQU                               0x28c0
def_bytes_0x28c0                  DB                                145 37 64 145 37 64 14 146 64 76 144 59 75 145 30 64 
def_bytes_0x28d0                  EQU                               0x28d0
def_bytes_0x28d0                  DB                                145 30 64 14 144 54 73 128 131 15 144 61 65 7 129 7 
def_bytes_0x28e0                  EQU                               0x28e0
def_bytes_0x28e0                  DB                                144 54 76 145 30 64 145 30 64 130 15 146 64 77 147 69 
def_bytes_0x28f0                  EQU                               0x28f0
def_bytes_0x28f0                  DB                                64 144 59 67 145 32 64 145 32 64 7 208 160 41 
def_bytes_0x29a0                  EQU                               0x29a0
def_bytes_0x29a0                  DB                                146 63 79 147 68 74 7 146 61 82 147 66 78 144 54 75 
def_bytes_0x29b0                  EQU                               0x29b0
def_bytes_0x29b0                  DB                                145 30 64 145 30 64 14 146 59 77 147 64 64 144 61 65 
def_bytes_0x29c0                  EQU                               0x29c0
def_bytes_0x29c0                  DB                                129 8 145 57 80 146 63 74 131 7 144 61 83 145 56 83 
def_bytes_0x29d0                  EQU                               0x29d0
def_bytes_0x29d0                  DB                                144 54 74 146 33 64 146 33 64 14 145 66 78 147 71 64 
def_bytes_0x29e0                  EQU                               0x29e0
def_bytes_0x29e0                  DB                                144 59 75 146 30 64 146 30 64 7 145 64 80 147 69 71 
def_bytes_0x29f0                  EQU                               0x29f0
def_bytes_0x29f0                  DB                                8 145 63 82 147 68 78 144 54 73 130 14 208 160 42 
def_bytes_0x2aa0                  EQU                               0x2aa0
def_bytes_0x2aa0                  DB                                145 61 83 146 64 71 145 61 65 144 35 64 144 35 64 131 
def_bytes_0x2ab0                  EQU                               0x2ab0
def_bytes_0x2ab0                  DB                                14 145 59 82 146 66 76 147 54 76 144 33 64 144 33 64 
def_bytes_0x2ac0                  EQU                               0x2ac0
def_bytes_0x2ac0                  DB                                15 145 61 79 146 68 75 147 59 67 144 35 64 144 35 64 
def_bytes_0x2ad0                  EQU                               0x2ad0
def_bytes_0x2ad0                  DB                                14 145 63 79 146 69 71 147 54 75 144 37 64 144 37 64 
def_bytes_0x2ae0                  EQU                               0x2ae0
def_bytes_0x2ae0                  DB                                15 145 64 79 146 71 67 147 61 65 144 40 64 144 40 64 
def_bytes_0x2af0                  EQU                               0x2af0
def_bytes_0x2af0                  DB                                14 145 66 82 146 73 68 147 54 74 144 42 64 208 160 43 
def_bytes_0x2ba0                  EQU                               0x2ba0
def_bytes_0x2ba0                  DB                                144 42 64 14 145 64 80 146 68 64 147 59 75 144 30 64 
def_bytes_0x2bb0                  EQU                               0x2bb0
def_bytes_0x2bb0                  DB                                144 30 64 15 147 54 73 14 147 61 65 7 128 8 144 54 
def_bytes_0x2bc0                  EQU                               0x2bc0
def_bytes_0x2bc0                  DB                                76 145 30 64 145 30 64 130 131 14 146 64 77 147 69 64 
def_bytes_0x2bd0                  EQU                               0x2bd0
def_bytes_0x2bd0                  DB                                144 59 67 145 32 64 145 32 64 7 146 63 79 147 68 74 
def_bytes_0x2be0                  EQU                               0x2be0
def_bytes_0x2be0                  DB                                7 146 61 82 147 66 78 144 54 75 145 30 64 145 30 64 
def_bytes_0x2bf0                  EQU                               0x2bf0
def_bytes_0x2bf0                  DB                                15 146 59 77 147 64 64 144 61 65 129 7 208 160 44 
def_bytes_0x2ca0                  EQU                               0x2ca0
def_bytes_0x2ca0                  DB                                145 57 80 146 63 74 131 7 144 61 83 145 56 83 144 54 
def_bytes_0x2cb0                  EQU                               0x2cb0
def_bytes_0x2cb0                  DB                                74 146 33 64 146 33 64 15 145 66 78 147 71 64 144 59 
def_bytes_0x2cc0                  EQU                               0x2cc0
def_bytes_0x2cc0                  DB                                75 146 30 64 146 30 64 7 145 64 80 147 69 71 7 145 
def_bytes_0x2cd0                  EQU                               0x2cd0
def_bytes_0x2cd0                  DB                                63 82 147 68 78 144 54 73 130 14 145 61 83 146 64 71 
def_bytes_0x2ce0                  EQU                               0x2ce0
def_bytes_0x2ce0                  DB                                145 61 65 144 35 64 144 35 64 131 15 145 59 82 146 66 
def_bytes_0x2cf0                  EQU                               0x2cf0
def_bytes_0x2cf0                  DB                                76 147 54 76 144 33 64 144 33 64 14 208 160 45 
def_bytes_0x2da0                  EQU                               0x2da0
def_bytes_0x2da0                  DB                                145 61 79 146 68 75 147 59 67 144 35 64 144 35 64 15 
def_bytes_0x2db0                  EQU                               0x2db0
def_bytes_0x2db0                  DB                                145 63 79 146 69 71 147 54 75 144 37 64 144 37 64 14 
def_bytes_0x2dc0                  EQU                               0x2dc0
def_bytes_0x2dc0                  DB                                145 64 79 146 71 67 147 61 65 144 40 64 144 40 64 14 
def_bytes_0x2dd0                  EQU                               0x2dd0
def_bytes_0x2dd0                  DB                                145 66 82 146 73 68 147 54 74 144 42 64 144 42 64 15 
def_bytes_0x2de0                  EQU                               0x2de0
def_bytes_0x2de0                  DB                                145 64 80 146 68 64 147 59 75 144 30 64 144 30 64 14 
def_bytes_0x2df0                  EQU                               0x2df0
def_bytes_0x2df0                  DB                                147 54 73 147 54 64 7 147 54 64 8 208 160 46 
def_bytes_0x2ea0                  EQU                               0x2ea0
def_bytes_0x2ea0                  DB                                147 61 65 14 145 66 76 146 54 76 144 42 64 144 42 64 
def_bytes_0x2eb0                  EQU                               0x2eb0
def_bytes_0x2eb0                  DB                                131 14 145 69 64 146 59 67 8 145 68 74 7 145 66 78 
def_bytes_0x2ec0                  EQU                               0x2ec0
def_bytes_0x2ec0                  DB                                146 54 75 14 145 64 64 146 61 65 144 40 64 144 40 64 
def_bytes_0x2ed0                  EQU                               0x2ed0
def_bytes_0x2ed0                  DB                                7 145 63 74 8 146 61 77 145 54 74 130 14 146 71 64 
def_bytes_0x2ee0                  EQU                               0x2ee0
def_bytes_0x2ee0                  DB                                145 59 75 7 146 69 71 7 146 68 78 145 54 73 144 37 
def_bytes_0x2ef0                  EQU                               0x2ef0
def_bytes_0x2ef0                  DB                                64 144 37 64 15 146 64 71 145 61 65 208 160 47 
def_bytes_0x2fa0                  EQU                               0x2fa0
def_bytes_0x2fa0                  DB                                144 40 64 144 40 64 14 146 66 76 145 54 76 144 37 64 
def_bytes_0x2fb0                  EQU                               0x2fb0
def_bytes_0x2fb0                  DB                                144 37 64 15 146 68 75 145 59 67 144 42 64 144 42 64 
def_bytes_0x2fc0                  EQU                               0x2fc0
def_bytes_0x2fc0                  DB                                14 146 69 71 145 54 75 144 37 64 144 37 64 14 146 71 
def_bytes_0x2fd0                  EQU                               0x2fd0
def_bytes_0x2fd0                  DB                                67 145 61 65 144 40 64 144 40 64 15 146 73 68 145 54 
def_bytes_0x2fe0                  EQU                               0x2fe0
def_bytes_0x2fe0                  DB                                74 144 37 64 144 37 64 14 146 68 64 145 59 75 144 30 
def_bytes_0x2ff0                  EQU                               0x2ff0
def_bytes_0x2ff0                  DB                                64 144 30 64 15 145 54 73 14 145 61 65 14 208 160 48 
def_bytes_0x30a0                  EQU                               0x30a0
def_bytes_0x30a0                  DB                                146 66 76 145 54 76 144 42 64 144 42 64 15 146 69 64 
def_bytes_0x30b0                  EQU                               0x30b0
def_bytes_0x30b0                  DB                                145 59 67 7 146 68 74 7 146 66 78 145 54 75 15 146 
def_bytes_0x30c0                  EQU                               0x30c0
def_bytes_0x30c0                  DB                                64 64 145 61 65 144 40 64 144 40 64 7 146 63 74 7 
def_bytes_0x30d0                  EQU                               0x30d0
def_bytes_0x30d0                  DB                                145 61 77 145 54 74 130 14 146 71 64 145 59 75 8 146 
def_bytes_0x30e0                  EQU                               0x30e0
def_bytes_0x30e0                  DB                                69 71 7 146 68 78 145 54 73 144 37 64 144 37 64 14 
def_bytes_0x30f0                  EQU                               0x30f0
def_bytes_0x30f0                  DB                                146 64 71 145 61 65 144 40 64 144 40 64 15 208 160 49 
def_bytes_0x31a0                  EQU                               0x31a0
def_bytes_0x31a0                  DB                                146 66 76 145 54 76 144 37 64 144 37 64 14 146 68 75 
def_bytes_0x31b0                  EQU                               0x31b0
def_bytes_0x31b0                  DB                                145 59 67 144 42 64 144 42 64 14 146 69 71 145 54 75 
def_bytes_0x31c0                  EQU                               0x31c0
def_bytes_0x31c0                  DB                                144 37 64 144 37 64 15 146 71 67 145 61 65 144 40 64 
def_bytes_0x31d0                  EQU                               0x31d0
def_bytes_0x31d0                  DB                                144 40 64 14 146 73 68 145 54 74 144 37 64 144 37 64 
def_bytes_0x31e0                  EQU                               0x31e0
def_bytes_0x31e0                  DB                                15 146 68 64 145 59 75 146 68 64 147 61 64 144 30 64 
def_bytes_0x31f0                  EQU                               0x31f0
def_bytes_0x31f0                  DB                                144 30 64 14 145 52 82 147 61 82 146 68 82 208 160 50 
def_bytes_0x32a0                  EQU                               0x32a0
def_bytes_0x32a0                  DB                                29 144 42 64 144 42 64 130 7 145 49 64 146 52 64 147 
def_bytes_0x32b0                  EQU                               0x32b0
def_bytes_0x32b0                  DB                                61 64 7 129 130 131 22 145 49 82 146 52 82 147 61 82 
def_bytes_0x32c0                  EQU                               0x32c0
def_bytes_0x32c0                  DB                                7 144 40 64 144 40 64 43 144 37 64 144 37 64 15 144 
def_bytes_0x32d0                  EQU                               0x32d0
def_bytes_0x32d0                  DB                                40 64 144 40 64 14 144 37 64 144 37 64 14 144 42 64 
def_bytes_0x32e0                  EQU                               0x32e0
def_bytes_0x32e0                  DB                                144 42 64 15 144 37 64 144 37 64 14 144 40 64 144 40 
def_bytes_0x32f0                  EQU                               0x32f0
def_bytes_0x32f0                  DB                                64 15 144 37 64 144 37 64 14 144 30 64 208 160 51 
def_bytes_0x33a0                  EQU                               0x33a0
def_bytes_0x33a0                  DB                                144 30 64 36 145 49 64 146 52 64 147 61 64 7 144 42 
def_bytes_0x33b0                  EQU                               0x33b0
def_bytes_0x33b0                  DB                                64 144 42 64 22 145 49 82 146 52 82 147 61 82 21 144 
def_bytes_0x33c0                  EQU                               0x33c0
def_bytes_0x33c0                  DB                                40 64 144 40 64 44 144 37 64 144 37 64 14 144 40 64 
def_bytes_0x33d0                  EQU                               0x33d0
def_bytes_0x33d0                  DB                                144 40 64 14 144 37 64 144 37 64 15 144 42 64 144 42 
def_bytes_0x33e0                  EQU                               0x33e0
def_bytes_0x33e0                  DB                                64 14 144 37 64 144 37 64 15 144 40 64 144 40 64 14 
def_bytes_0x33f0                  EQU                               0x33f0
def_bytes_0x33f0                  DB                                144 37 64 144 37 64 14 144 30 64 144 30 64 208 160 52 
def_bytes_0x34a0                  EQU                               0x34a0
def_bytes_0x34a0                  DB                                36 145 54 64 146 57 64 147 66 64 8 144 42 64 144 42 
def_bytes_0x34b0                  EQU                               0x34b0
def_bytes_0x34b0                  DB                                64 21 145 54 82 146 57 82 147 66 82 22 144 40 64 144 
def_bytes_0x34c0                  EQU                               0x34c0
def_bytes_0x34c0                  DB                                40 64 43 144 37 64 144 37 64 14 144 40 64 144 40 64 
def_bytes_0x34d0                  EQU                               0x34d0
def_bytes_0x34d0                  DB                                15 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 
def_bytes_0x34e0                  EQU                               0x34e0
def_bytes_0x34e0                  DB                                37 64 144 37 64 14 144 40 64 144 40 64 14 144 37 64 
def_bytes_0x34f0                  EQU                               0x34f0
def_bytes_0x34f0                  DB                                144 37 64 15 144 30 64 144 30 64 21 208 160 53 
def_bytes_0x35a0                  EQU                               0x35a0
def_bytes_0x35a0                  DB                                145 54 64 146 57 64 147 66 64 22 144 42 64 144 42 64 
def_bytes_0x35b0                  EQU                               0x35b0
def_bytes_0x35b0                  DB                                7 145 54 82 146 57 82 147 66 82 36 144 40 64 144 40 
def_bytes_0x35c0                  EQU                               0x35c0
def_bytes_0x35c0                  DB                                64 43 144 37 64 144 37 64 15 144 40 64 144 40 64 14 
def_bytes_0x35d0                  EQU                               0x35d0
def_bytes_0x35d0                  DB                                144 37 64 144 37 64 15 144 42 64 144 42 64 14 144 37 
def_bytes_0x35e0                  EQU                               0x35e0
def_bytes_0x35e0                  DB                                64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 
def_bytes_0x35f0                  EQU                               0x35f0
def_bytes_0x35f0                  DB                                37 64 14 144 30 64 144 30 64 15 145 54 64 208 160 54 
def_bytes_0x36a0                  EQU                               0x36a0
def_bytes_0x36a0                  DB                                146 57 64 147 66 64 28 145 54 82 146 57 82 147 66 82 
def_bytes_0x36b0                  EQU                               0x36b0
def_bytes_0x36b0                  DB                                144 42 64 144 42 64 44 144 40 64 144 40 64 43 145 75 
def_bytes_0x36c0                  EQU                               0x36c0
def_bytes_0x36c0                  DB                                64 146 68 64 147 59 64 144 37 64 144 37 64 14 144 40 
def_bytes_0x36d0                  EQU                               0x36d0
def_bytes_0x36d0                  DB                                64 144 40 64 15 145 75 82 146 68 82 147 59 82 144 37 
def_bytes_0x36e0                  EQU                               0x36e0
def_bytes_0x36e0                  DB                                64 144 37 64 14 144 42 64 144 42 64 14 144 37 64 144 
def_bytes_0x36f0                  EQU                               0x36f0
def_bytes_0x36f0                  DB                                37 64 15 144 40 64 144 40 64 14 144 37 64 208 160 55 
def_bytes_0x37a0                  EQU                               0x37a0
def_bytes_0x37a0                  DB                                144 37 64 15 144 30 64 144 30 64 14 145 76 64 146 69 
def_bytes_0x37b0                  EQU                               0x37b0
def_bytes_0x37b0                  DB                                64 147 60 64 29 145 76 82 146 69 82 147 60 82 144 42 
def_bytes_0x37c0                  EQU                               0x37c0
def_bytes_0x37c0                  DB                                64 144 42 64 43 144 40 64 144 40 64 43 145 75 64 146 
def_bytes_0x37d0                  EQU                               0x37d0
def_bytes_0x37d0                  DB                                68 64 147 59 64 144 37 64 144 37 64 15 144 40 64 144 
def_bytes_0x37e0                  EQU                               0x37e0
def_bytes_0x37e0                  DB                                40 64 14 145 75 82 146 68 82 147 59 82 144 37 64 144 
def_bytes_0x37f0                  EQU                               0x37f0
def_bytes_0x37f0                  DB                                37 64 14 144 42 64 144 42 64 15 144 37 64 208 160 56 
def_bytes_0x38a0                  EQU                               0x38a0
def_bytes_0x38a0                  DB                                144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 
def_bytes_0x38b0                  EQU                               0x38b0
def_bytes_0x38b0                  DB                                64 14 144 30 64 144 30 64 14 145 54 64 146 57 64 147 
def_bytes_0x38c0                  EQU                               0x38c0
def_bytes_0x38c0                  DB                                66 64 4 147 66 82 4 131 3 147 69 82 4 131 3 147 
def_bytes_0x38d0                  EQU                               0x38d0
def_bytes_0x38d0                  DB                                73 82 4 147 73 64 131 4 147 78 82 3 145 54 82 146 
def_bytes_0x38e0                  EQU                               0x38e0
def_bytes_0x38e0                  DB                                57 82 144 42 64 144 42 64 131 4 147 73 82 3 131 4 
def_bytes_0x38f0                  EQU                               0x38f0
def_bytes_0x38f0                  DB                                147 69 82 4 131 3 147 66 82 4 147 66 64 208 160 57 
def_bytes_0x39a0                  EQU                               0x39a0
def_bytes_0x39a0                  DB                                131 3 147 61 82 4 131 4 147 66 82 3 131 4 147 69 
def_bytes_0x39b0                  EQU                               0x39b0
def_bytes_0x39b0                  DB                                82 3 144 40 64 144 40 64 131 4 147 73 82 4 147 73 
def_bytes_0x39c0                  EQU                               0x39c0
def_bytes_0x39c0                  DB                                64 131 3 147 78 82 4 131 3 147 73 82 4 131 4 147 
def_bytes_0x39d0                  EQU                               0x39d0
def_bytes_0x39d0                  DB                                69 82 3 131 4 147 66 82 3 131 4 147 63 82 4 145 
def_bytes_0x39e0                  EQU                               0x39e0
def_bytes_0x39e0                  DB                                75 64 146 68 64 144 37 64 144 37 64 131 3 146 68 82 
def_bytes_0x39f0                  EQU                               0x39f0
def_bytes_0x39f0                  DB                                4 145 75 64 130 3 145 71 82 4 144 40 64 208 160 58 
def_bytes_0x3aa0                  EQU                               0x3aa0
def_bytes_0x3aa0                  DB                                144 40 64 146 80 64 129 4 145 75 82 130 3 145 75 64 
def_bytes_0x3ab0                  EQU                               0x3ab0
def_bytes_0x3ab0                  DB                                129 4 145 80 82 3 146 75 82 147 68 82 144 37 64 144 
def_bytes_0x3ac0                  EQU                               0x3ac0
def_bytes_0x3ac0                  DB                                37 64 129 4 146 75 82 4 147 68 64 130 3 145 71 82 
def_bytes_0x3ad0                  EQU                               0x3ad0
def_bytes_0x3ad0                  DB                                131 4 144 42 64 144 42 64 146 63 64 129 3 145 68 82 
def_bytes_0x3ae0                  EQU                               0x3ae0
def_bytes_0x3ae0                  DB                                130 4 145 68 64 129 4 145 63 82 3 144 37 64 144 37 
def_bytes_0x3af0                  EQU                               0x3af0
def_bytes_0x3af0                  DB                                64 146 71 64 129 4 145 68 82 130 3 208 160 59 
def_bytes_0x3ba0                  EQU                               0x3ba0
def_bytes_0x3ba0                  DB                                146 75 64 129 4 145 71 82 130 4 144 40 64 144 40 64 
def_bytes_0x3bb0                  EQU                               0x3bb0
def_bytes_0x3bb0                  DB                                146 80 64 129 3 145 75 82 130 4 145 75 64 129 3 145 
def_bytes_0x3bc0                  EQU                               0x3bc0
def_bytes_0x3bc0                  DB                                80 82 4 144 37 64 144 37 64 146 71 64 129 4 145 75 
def_bytes_0x3bd0                  EQU                               0x3bd0
def_bytes_0x3bd0                  DB                                82 130 3 146 68 64 129 4 145 71 82 130 3 144 30 64 
def_bytes_0x3be0                  EQU                               0x3be0
def_bytes_0x3be0                  DB                                144 30 64 146 64 64 129 4 145 68 82 130 4 146 69 64 
def_bytes_0x3bf0                  EQU                               0x3bf0
def_bytes_0x3bf0                  DB                                129 3 145 64 82 130 4 146 76 64 147 69 64 208 160 60 
def_bytes_0x3ca0                  EQU                               0x3ca0
def_bytes_0x3ca0                  DB                                129 3 147 69 82 4 146 76 64 131 4 145 72 82 130 3 
def_bytes_0x3cb0                  EQU                               0x3cb0
def_bytes_0x3cb0                  DB                                146 81 64 129 4 145 76 82 130 3 145 76 64 129 4 145 
def_bytes_0x3cc0                  EQU                               0x3cc0
def_bytes_0x3cc0                  DB                                81 82 4 146 76 82 147 69 82 144 42 64 144 42 64 129 
def_bytes_0x3cd0                  EQU                               0x3cd0
def_bytes_0x3cd0                  DB                                3 146 76 82 4 147 69 64 130 3 145 72 82 131 4 146 
def_bytes_0x3ce0                  EQU                               0x3ce0
def_bytes_0x3ce0                  DB                                64 64 129 4 145 69 82 130 3 145 69 64 129 4 145 64 
def_bytes_0x3cf0                  EQU                               0x3cf0
def_bytes_0x3cf0                  DB                                82 3 146 72 64 129 4 145 69 82 130 4 208 160 61 
def_bytes_0x3da0                  EQU                               0x3da0
def_bytes_0x3da0                  DB                                146 76 64 129 3 145 72 82 130 4 144 40 64 144 40 64 
def_bytes_0x3db0                  EQU                               0x3db0
def_bytes_0x3db0                  DB                                146 81 64 129 3 145 76 82 130 4 145 76 64 129 4 145 
def_bytes_0x3dc0                  EQU                               0x3dc0
def_bytes_0x3dc0                  DB                                81 82 3 146 72 64 129 4 145 76 82 130 3 146 69 64 
def_bytes_0x3dd0                  EQU                               0x3dd0
def_bytes_0x3dd0                  DB                                129 4 145 72 82 130 4 146 63 64 129 3 145 69 82 130 
def_bytes_0x3de0                  EQU                               0x3de0
def_bytes_0x3de0                  DB                                4 146 68 64 129 3 145 63 82 130 4 146 75 64 147 68 
def_bytes_0x3df0                  EQU                               0x3df0
def_bytes_0x3df0                  DB                                64 144 37 64 144 37 64 129 4 147 68 82 3 208 160 62 
def_bytes_0x3ea0                  EQU                               0x3ea0
def_bytes_0x3ea0                  DB                                146 75 64 131 4 145 71 82 130 3 144 40 64 144 40 64 
def_bytes_0x3eb0                  EQU                               0x3eb0
def_bytes_0x3eb0                  DB                                146 80 64 129 4 145 75 82 130 4 145 75 64 129 3 145 
def_bytes_0x3ec0                  EQU                               0x3ec0
def_bytes_0x3ec0                  DB                                80 82 4 146 75 82 147 68 82 144 37 64 144 37 64 129 
def_bytes_0x3ed0                  EQU                               0x3ed0
def_bytes_0x3ed0                  DB                                3 146 75 82 4 147 68 64 130 4 145 71 82 131 3 144 
def_bytes_0x3ee0                  EQU                               0x3ee0
def_bytes_0x3ee0                  DB                                42 64 144 42 64 146 63 64 129 4 145 68 82 130 3 145 
def_bytes_0x3ef0                  EQU                               0x3ef0
def_bytes_0x3ef0                  DB                                68 64 129 4 145 63 82 4 144 37 64 208 160 63 
def_bytes_0x3fa0                  EQU                               0x3fa0
def_bytes_0x3fa0                  DB                                144 37 64 146 71 64 129 3 145 68 82 130 4 146 75 64 
def_bytes_0x3fb0                  EQU                               0x3fb0
def_bytes_0x3fb0                  DB                                129 3 145 71 82 130 4 144 40 64 144 40 64 146 80 64 
def_bytes_0x3fc0                  EQU                               0x3fc0
def_bytes_0x3fc0                  DB                                129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 3 
def_bytes_0x3fd0                  EQU                               0x3fd0
def_bytes_0x3fd0                  DB                                144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 4 
def_bytes_0x3fe0                  EQU                               0x3fe0
def_bytes_0x3fe0                  DB                                146 68 64 129 3 145 71 82 130 4 144 30 64 144 30 64 
def_bytes_0x3ff0                  EQU                               0x3ff0
def_bytes_0x3ff0                  DB                                146 61 64 129 3 145 68 82 130 4 146 66 64 208 160 64 
def_bytes_0x40a0                  EQU                               0x40a0
def_bytes_0x40a0                  DB                                129 4 145 61 82 130 3 146 54 64 147 57 64 129 4 145 
def_bytes_0x40b0                  EQU                               0x40b0
def_bytes_0x40b0                  DB                                66 82 3 129 4 145 69 82 4 129 3 145 73 82 4 145 
def_bytes_0x40c0                  EQU                               0x40c0
def_bytes_0x40c0                  DB                                73 64 129 3 145 78 82 4 146 54 82 147 57 82 144 42 
def_bytes_0x40d0                  EQU                               0x40d0
def_bytes_0x40d0                  DB                                64 144 42 64 129 4 145 73 82 3 129 4 145 69 82 3 
def_bytes_0x40e0                  EQU                               0x40e0
def_bytes_0x40e0                  DB                                129 4 145 66 82 4 145 66 64 129 3 145 61 82 4 129 
def_bytes_0x40f0                  EQU                               0x40f0
def_bytes_0x40f0                  DB                                3 145 66 82 4 129 4 145 69 82 3 208 160 65 
def_bytes_0x41a0                  EQU                               0x41a0
def_bytes_0x41a0                  DB                                144 40 64 144 40 64 129 4 145 73 82 3 145 73 64 129 
def_bytes_0x41b0                  EQU                               0x41b0
def_bytes_0x41b0                  DB                                4 145 78 82 4 129 3 145 73 82 4 129 3 145 69 82 
def_bytes_0x41c0                  EQU                               0x41c0
def_bytes_0x41c0                  DB                                4 129 4 145 66 82 3 129 4 145 63 82 3 146 75 64 
def_bytes_0x41d0                  EQU                               0x41d0
def_bytes_0x41d0                  DB                                147 68 64 144 37 64 144 37 64 129 4 147 68 82 4 146 
def_bytes_0x41e0                  EQU                               0x41e0
def_bytes_0x41e0                  DB                                75 64 131 3 145 71 82 130 4 144 40 64 144 40 64 146 
def_bytes_0x41f0                  EQU                               0x41f0
def_bytes_0x41f0                  DB                                80 64 129 3 145 75 82 130 4 145 75 64 208 160 66 
def_bytes_0x42a0                  EQU                               0x42a0
def_bytes_0x42a0                  DB                                129 4 145 80 82 3 146 75 82 147 68 82 144 37 64 144 
def_bytes_0x42b0                  EQU                               0x42b0
def_bytes_0x42b0                  DB                                37 64 129 4 146 75 82 3 147 68 64 130 4 145 71 82 
def_bytes_0x42c0                  EQU                               0x42c0
def_bytes_0x42c0                  DB                                131 4 144 42 64 144 42 64 146 63 64 129 3 145 68 82 
def_bytes_0x42d0                  EQU                               0x42d0
def_bytes_0x42d0                  DB                                130 4 145 68 64 129 3 145 63 82 4 144 37 64 144 37 
def_bytes_0x42e0                  EQU                               0x42e0
def_bytes_0x42e0                  DB                                64 146 71 64 129 4 145 68 82 130 3 146 75 64 129 4 
def_bytes_0x42f0                  EQU                               0x42f0
def_bytes_0x42f0                  DB                                145 71 82 130 3 144 40 64 144 40 64 208 160 67 
def_bytes_0x43a0                  EQU                               0x43a0
def_bytes_0x43a0                  DB                                146 80 64 129 4 145 75 82 130 4 145 75 64 129 3 145 
def_bytes_0x43b0                  EQU                               0x43b0
def_bytes_0x43b0                  DB                                80 82 4 144 37 64 144 37 64 146 71 64 129 3 145 75 
def_bytes_0x43c0                  EQU                               0x43c0
def_bytes_0x43c0                  DB                                82 130 4 146 68 64 129 4 145 71 82 130 3 144 30 64 
def_bytes_0x43d0                  EQU                               0x43d0
def_bytes_0x43d0                  DB                                144 30 64 146 64 64 129 4 145 68 82 130 3 146 69 64 
def_bytes_0x43e0                  EQU                               0x43e0
def_bytes_0x43e0                  DB                                129 4 145 64 82 130 4 146 76 64 147 69 64 129 3 147 
def_bytes_0x43f0                  EQU                               0x43f0
def_bytes_0x43f0                  DB                                69 82 4 146 76 64 131 3 145 72 82 130 4 208 160 68 
def_bytes_0x44a0                  EQU                               0x44a0
def_bytes_0x44a0                  DB                                146 81 64 129 4 145 76 82 130 3 145 76 64 129 4 145 
def_bytes_0x44b0                  EQU                               0x44b0
def_bytes_0x44b0                  DB                                81 82 3 146 76 82 147 69 82 144 42 64 144 42 64 129 
def_bytes_0x44c0                  EQU                               0x44c0
def_bytes_0x44c0                  DB                                4 146 76 82 4 147 69 64 130 3 145 72 82 131 4 146 
def_bytes_0x44d0                  EQU                               0x44d0
def_bytes_0x44d0                  DB                                64 64 129 3 145 69 82 130 4 145 69 64 129 4 145 64 
def_bytes_0x44e0                  EQU                               0x44e0
def_bytes_0x44e0                  DB                                82 3 146 72 64 129 4 145 69 82 130 3 146 76 64 129 
def_bytes_0x44f0                  EQU                               0x44f0
def_bytes_0x44f0                  DB                                4 145 72 82 130 4 144 40 64 144 40 64 208 160 69 
def_bytes_0x45a0                  EQU                               0x45a0
def_bytes_0x45a0                  DB                                146 81 64 129 3 145 76 82 130 4 145 76 64 129 3 145 
def_bytes_0x45b0                  EQU                               0x45b0
def_bytes_0x45b0                  DB                                81 82 4 146 72 64 129 4 145 76 82 130 3 146 69 64 
def_bytes_0x45c0                  EQU                               0x45c0
def_bytes_0x45c0                  DB                                129 4 145 72 82 130 3 146 63 64 129 4 145 69 82 130 
def_bytes_0x45d0                  EQU                               0x45d0
def_bytes_0x45d0                  DB                                4 146 68 64 129 3 145 63 82 130 4 146 75 64 147 68 
def_bytes_0x45e0                  EQU                               0x45e0
def_bytes_0x45e0                  DB                                64 144 37 64 144 37 64 129 3 147 68 82 4 146 75 64 
def_bytes_0x45f0                  EQU                               0x45f0
def_bytes_0x45f0                  DB                                131 4 145 71 82 130 3 144 40 64 144 40 64 208 160 70 
def_bytes_0x46a0                  EQU                               0x46a0
def_bytes_0x46a0                  DB                                146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 
def_bytes_0x46b0                  EQU                               0x46b0
def_bytes_0x46b0                  DB                                80 82 4 146 75 82 147 68 82 144 37 64 144 37 64 129 
def_bytes_0x46c0                  EQU                               0x46c0
def_bytes_0x46c0                  DB                                3 146 75 82 4 147 68 64 130 3 145 71 82 131 4 144 
def_bytes_0x46d0                  EQU                               0x46d0
def_bytes_0x46d0                  DB                                42 64 144 42 64 146 63 64 129 4 145 68 82 130 3 145 
def_bytes_0x46e0                  EQU                               0x46e0
def_bytes_0x46e0                  DB                                68 64 129 4 145 63 82 3 144 37 64 144 37 64 146 71 
def_bytes_0x46f0                  EQU                               0x46f0
def_bytes_0x46f0                  DB                                64 129 4 145 68 82 130 4 146 75 64 129 3 208 160 71 
def_bytes_0x47a0                  EQU                               0x47a0
def_bytes_0x47a0                  DB                                145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 
def_bytes_0x47b0                  EQU                               0x47b0
def_bytes_0x47b0                  DB                                145 75 82 130 4 145 75 64 129 4 145 80 82 3 144 37 
def_bytes_0x47c0                  EQU                               0x47c0
def_bytes_0x47c0                  DB                                64 144 37 64 146 71 64 129 4 145 75 82 130 3 146 68 
def_bytes_0x47d0                  EQU                               0x47d0
def_bytes_0x47d0                  DB                                64 129 4 145 71 82 130 4 144 30 64 144 30 64 146 61 
def_bytes_0x47e0                  EQU                               0x47e0
def_bytes_0x47e0                  DB                                64 129 3 145 68 82 130 4 146 66 64 129 3 145 61 82 
def_bytes_0x47f0                  EQU                               0x47f0
def_bytes_0x47f0                  DB                                130 4 146 54 64 147 57 64 129 4 145 66 83 208 160 72 
def_bytes_0x48a0                  EQU                               0x48a0
def_bytes_0x48a0                  DB                                3 129 4 145 69 83 3 129 4 145 73 84 4 145 73 66 
def_bytes_0x48b0                  EQU                               0x48b0
def_bytes_0x48b0                  DB                                129 3 145 78 85 4 146 54 82 147 57 82 129 3 145 73 
def_bytes_0x48c0                  EQU                               0x48c0
def_bytes_0x48c0                  DB                                85 4 129 4 145 69 86 3 129 4 145 66 87 3 145 66 
def_bytes_0x48d0                  EQU                               0x48d0
def_bytes_0x48d0                  DB                                69 129 4 145 61 87 4 129 3 145 66 88 4 129 3 145 
def_bytes_0x48e0                  EQU                               0x48e0
def_bytes_0x48e0                  DB                                69 89 4 129 4 145 73 90 3 145 73 72 129 4 145 78 
def_bytes_0x48f0                  EQU                               0x48f0
def_bytes_0x48f0                  DB                                90 3 129 4 145 73 91 4 129 3 145 69 92 208 160 73 
def_bytes_0x49a0                  EQU                               0x49a0
def_bytes_0x49a0                  DB                                4 129 3 145 66 92 4 145 66 76 129 4 145 61 93 3 
def_bytes_0x49b0                  EQU                               0x49b0
def_bytes_0x49b0                  DB                                129 4 145 66 94 3 129 4 145 69 94 4 129 3 145 73 
def_bytes_0x49c0                  EQU                               0x49c0
def_bytes_0x49c0                  DB                                95 4 145 73 79 129 3 145 78 96 4 129 4 145 73 96 
def_bytes_0x49d0                  EQU                               0x49d0
def_bytes_0x49d0                  DB                                3 129 4 145 69 97 3 129 4 145 66 98 4 145 66 82 
def_bytes_0x49e0                  EQU                               0x49e0
def_bytes_0x49e0                  DB                                129 3 145 61 98 4 129 3 145 66 99 4 129 4 145 69 
def_bytes_0x49f0                  EQU                               0x49f0
def_bytes_0x49f0                  DB                                100 3 129 4 145 73 100 3 145 73 85 129 4 208 160 74 
def_bytes_0x4aa0                  EQU                               0x4aa0
def_bytes_0x4aa0                  DB                                145 78 101 4 129 3 145 73 102 4 129 3 145 69 102 4 
def_bytes_0x4ab0                  EQU                               0x4ab0
def_bytes_0x4ab0                  DB                                129 4 145 66 103 3 145 66 88 129 4 145 61 104 3 144 
def_bytes_0x4ac0                  EQU                               0x4ac0
def_bytes_0x4ac0                  DB                                69 89 129 4 144 66 105 4 145 73 90 128 3 144 69 105 
def_bytes_0x4ad0                  EQU                               0x4ad0
def_bytes_0x4ad0                  DB                                129 4 145 78 91 128 3 144 73 106 129 4 144 73 92 128 
def_bytes_0x4ae0                  EQU                               0x4ae0
def_bytes_0x4ae0                  DB                                4 144 78 107 3 145 69 92 128 4 144 73 107 129 3 145 
def_bytes_0x4af0                  EQU                               0x4af0
def_bytes_0x4af0                  DB                                66 93 128 4 144 69 108 129 4 145 61 94 208 160 75 
def_bytes_0x4ba0                  EQU                               0x4ba0
def_bytes_0x4ba0                  DB                                128 3 144 66 109 129 4 144 66 95 128 3 144 61 109 4 
def_bytes_0x4bb0                  EQU                               0x4bb0
def_bytes_0x4bb0                  DB                                145 69 96 128 4 144 66 110 129 3 145 73 96 128 4 144 
def_bytes_0x4bc0                  EQU                               0x4bc0
def_bytes_0x4bc0                  DB                                69 111 129 3 145 78 97 128 4 144 73 111 129 4 144 73 
def_bytes_0x4bd0                  EQU                               0x4bd0
def_bytes_0x4bd0                  DB                                98 128 3 144 78 112 4 145 69 99 128 3 144 73 113 129 
def_bytes_0x4be0                  EQU                               0x4be0
def_bytes_0x4be0                  DB                                4 145 66 100 128 4 144 69 113 129 3 145 61 100 128 4 
def_bytes_0x4bf0                  EQU                               0x4bf0
def_bytes_0x4bf0                  DB                                144 66 114 129 3 144 66 101 128 4 144 61 115 208 160 10 

; Define Words
def_words_0x0500                  EQU                               0x0500
def_words_0x0500                  DW                                5000 5049 5098 5147 5196 5245 5293 5342 5390 5438 5486 5533 5581 5627 5674 5720 5765 5810 5855 5899 5943 5986 6028 6070 6111 6152 6191 6230 6269 6306 6343 6379 6414 6448 6482 6514 6546 6577 6606 6635 6663 6690 6715 6740 6764 6786 6808 6828 6848 6866 6883 6899 6914 6928 6940 6951 6962 6971 6978 6985 6990 6995 6998 6999 7000 6999 6998 6995 6990 6985 6978 6971 6962 6951 6940 6928 6914 6899 6883 6866 6848 6828 6808 6786 6764 6740 6715 6690 6663 6635 6606 6577 6546 6514 6482 6448 6414 6379 6343 6306 6269 6230 6191 6152 6111 6070 6028 5986 5943 5899 5855 5810 5765 5720 5674 5627 5581 5533 5486 5438 5390 5342 5293 5245 5196 5147 5098 5049 5000 4951 4902 4853 4804 4755 4707 4658 4610 4562 4514 4467 4419 4373 4326 4280 4235 4190 4145 4101 4057 4014 3972 3930 3889 3848 3809 3770 3731 3694 3657 3621 3586 3552 3518 3486 3454 3423 3394 3365 3337 3310 3285 3260 3236 3214 3192 3172 3152 3134 3117 3101 3086 3072 3060 3049 3038 3029 3022 3015 3010 3005 3002 3001 3000 3001 3002 3005 3010 3015 3022 3029 3038 3049 3060 3072 3086 3101 3117 3134 3152 3172 3192 3214 3236 3260 3285 3310 3337 3365 3394 3423 3454 3486 3518 3552 3586 3621 3657 3694 3731 3770 3809 3848 3889 3930 3972 4014 4057 4101 4145 4190 4235 4280 4326 4373 4419 4467 4514 4562 4610 4658 4707 4755 4804 4853 4902 4951 
def_words_0x6da0                  EQU                               0x6da0
def_words_0x6da0                  DW                                20000 19463 18974 18529 18124 17755 17419 17113 16834 16581 16350 16139 15948 15774 15615 15470 15339 15219 15110 15011 14920 14838 14763 14695 14632 14576 14524 14477 14435 14396 14360 14328 
def_words_0x6ca0                  EQU                               0x6ca0
def_words_0x6ca0                  DW                                3000 3300 3600 3900 4200 4500 3000 3300 3600 3900 4200 4500 
def_words_0x6ba0                  EQU                               0x6ba0
def_words_0x6ba0                  DW                                0 2361 3793 
def_words_0x69a0                  EQU                               0x69a0
def_words_0x69a0                  DW                                3000 3300 3600 3900 4200 4500 3000 3300 3600 3900 4200 4500 
def_words_0x6aa0                  EQU                               0x6aa0
def_words_0x6aa0                  DW                                188 131 159 9 216 178 225 122 169 94 272 0 178 206 84 150 103 225 56 103 263 206 206 291 188 244 56 216 234 281 272 66 

; Define Images

; Define Loader Image Chunks

; Define Sprites
def_sprites_0x0400                EQU                               0x0400
def_sprites_0x0400                DB                                0 0 0 0 0 0 255 
def_sprites_0x0407                EQU                               0x0407
def_sprites_0x0407                DB                                0 0 0 0 0 0 255 
def_sprites_0x040e                EQU                               0x040e
def_sprites_0x040e                DB                                4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 224 

; Define Fonts

; Lookup Tables
_lut_numericLabs                  EQU                               0x7cc6
_lut_numericLabs                  DW                                1 2 3 4 5 6 7 8 9 10 11 12 13 14 48 49 50 51 52 53 54 55 56 57 113 119 101 114 0x0000
_lut_numericAddrs                 EQU                               0x7bc8
_lut_numericAddrs                 DW                                0x02ce 0x02d6 0x02de 0x02e6 0x02ee 0x0306 0x030e 0x0316 0x031e 0x0326 0x032e 0x0336 0x033e 0x0346 0x036d 0x0374 0x0384 0x0394 0x03a4 0x03b4 0x03c4 0x03d4 0x03ec 0x04da 0x04f2 0x09ec 0x4caf 0x4cc7 
_spriteLut_0x7da4                 EQU                               0x7da4
_spriteLut_0x7da4                 DW                                0x0400 0x0000 0x0407 0x0006 0x0000
_spriteLut_0x7cc0                 EQU                               0x7cc0
_spriteLut_0x7cc0                 DW                                0x040e 0x1f00 0x0000
_spritesLut_                      EQU                               0x7da0
_spritesLut_                      DW                                0x7da4 0x7cc0 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitRealTimeStub                
%define TIME_SLICING                                                                            ; Main: INIT

                                  LDI                               0
                                  STW                               _t
                                  STW                               _f
                                  LDI                               0
                                  STW                               _v                          ; Main: t = 0 : f = t : v = 0

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  SoundAllOff                                                   ; Main: sound off

                                  LDWI                              15360
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, &h3C00

                                  ClearVertBlinds                                               ; Main: cls

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  LDI                               33
                                  ST                                cursorXY
                                  LDI                               2
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7dee
                                  NewLine                                                       ; Main: at 33,2 : print "Keys: <1> to <0>"

                                  LDI                               33
                                  ST                                cursorXY
                                  AtTextCursor                      
                                  PrintString                       _str_0x7ddc
                                  NewLine                                                       ; Main: at 33 :   print "      <q> to <r>"

                                  LDI                               255
                                  STW                               _kk                         ; Main: kk = 255

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  LDWI                              playMidiVol
                                  STW                               realTimeProc0
                                  LDWI                              setRealTimeProc0
                                  CALL                              giga_vAC                    ; Main: init midiv

_loop                             LDI                               2
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 2

                                  LDWI                              _vuMeter
                                  CALL                              giga_vAC                    ; Main: gosub vuMeter

                                  LD                                giga_serialRaw
                                  STW                               _k                          ; Main: k = get("SERIAL_RAW")

                                  LDW                               _kk
                                  XORI                              255
                                  BNE                               _else_0x02ba
                                  LDW                               _k
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: if kk &&= 255 then gosub k

_else_0x02ba                      LDW                               _state
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: gosub state

                                  LDW                               _k
                                  STW                               _kk                         ; Main: kk = k

                                  BRA                               _loop                       ; Main: goto &loop

_midiOff                          PUSH                              
                                  LDI                               0
                                  STW                               midiStream                  ; Main: set MIDI_STREAM, &h0000

                                  SoundAllOff                                                   ; Main: sound off

                                  Return                                                        ; Main: return

_1                                PUSH                              
                                  LDWI                              _siren
                                  CALL                              giga_vAC                    ; Main: gosub siren

                                  Return                                                        ; Main: return

_2                                PUSH                              
                                  LDWI                              _crash
                                  CALL                              giga_vAC                    ; Main: gosub crash

                                  Return                                                        ; Main: return

_3                                PUSH                              
                                  LDWI                              _beep
                                  CALL                              giga_vAC                    ; Main: gosub beep

                                  Return                                                        ; Main: return

_4                                PUSH                              
                                  LDWI                              _tictoc
                                  CALL                              giga_vAC                    ; Main: gosub tictoc

                                  Return                                                        ; Main: return

_5                                PUSH                              
                                  LDWI                              _pucDeath
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  CALL                              giga_vAC                    ; Main: gosub pucDeath

                                  Return                                                        ; Main: return

_6                                PUSH                              
                                  LDWI                              _ghostMove
                                  CALL                              giga_vAC                    ; Main: gosub ghostMove

                                  Return                                                        ; Main: return

_7                                PUSH                              
                                  LDWI                              _invaderMove
                                  CALL                              giga_vAC                    ; Main: gosub invaderMove

                                  Return                                                        ; Main: return

_8                                PUSH                              
                                  LDWI                              _invaderShoot
                                  CALL                              giga_vAC                    ; Main: gosub invaderShoot

                                  Return                                                        ; Main: return

_9                                PUSH                              
                                  LDWI                              _saucerMove
                                  CALL                              giga_vAC                    ; Main: gosub saucerMove

                                  Return                                                        ; Main: return

_10                               PUSH                              
                                  LDWI                              _invaderExplode
                                  CALL                              giga_vAC                    ; Main: gosub invaderExplode

                                  Return                                                        ; Main: return

_11                               PUSH                              
                                  LDWI                              _testSfx
                                  CALL                              giga_vAC                    ; Main: gosub testSfx

                                  Return                                                        ; Main: return

_12                               PUSH                              
                                  LDWI                              _saucerExplode
                                  CALL                              giga_vAC                    ; Main: gosub saucerExplode

                                  Return                                                        ; Main: return

_13                               PUSH                              
                                  LDWI                              _playerExplode
                                  CALL                              giga_vAC                    ; Main: gosub playerExplode

                                  Return                                                        ; Main: return

_14                               PUSH                              
                                  LDW                               midiStream
                                  XORI                              0
                                  JumpEQ                            _else_0x0369 1              ; Main: if get("MIDI_STREAM") &= &h0000

                                  LDI                               2
                                  ST                                waveType + 1
                                  LDWI                              2720
                                  PlayMidiV                         
                                  LDWI                              _endif_0x036e
                                  CALL                              giga_vAC                    ; Main: play midiv, &h0AA0, 2

_else_0x0369                      TickMidiV                                                     ; Main: tick midiv

_endif_0x036e                     Return                                                        ; Main: return

_48                               PUSH                              
                                  LDI                               14
                                  STW                               _state                      ; Main: state = 14

                                  Return                                                        ; Main: return

_49                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               1
                                  STW                               _state                      ; Main: state = 1

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_50                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               2
                                  STW                               _state                      ; Main: state = 2

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_51                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               3
                                  STW                               _state                      ; Main: state = 3

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_52                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               4
                                  STW                               _state                      ; Main: state = 4

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_53                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               5
                                  STW                               _state                      ; Main: state = 5

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_54                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               6
                                  STW                               _state                      ; Main: state = 6

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_55                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  LDI                               7
                                  STW                               _state                      ; Main: state = 7

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_56                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               8
                                  STLW                              0xFE
                                  LDWI                              _page_0x04cf
                                  CALL                              giga_vAC
_page_0x04cf                      LDLW                              0xFE
                                  STW                               _state                      ; Main: state = 8

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_57                               PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  LDI                               9
                                  STW                               _state                      ; Main: state = 9

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_113                              PUSH                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x08e0
                                  CALL                              giga_vAC
_page_0x08e0                      LDLW                              0xFE
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  LDI                               10
                                  STW                               _state                      ; Main: state = 10

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  STLW                              0xFE
                                  LDWI                              _page_0x09e8
                                  CALL                              giga_vAC
_page_0x09e8                      LDLW                              0xFE
                                  Return                                                        ; Main: return

_119                              PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               63
                                  STLW                              0xFE
                                  LDWI                              _page_0x4ca0
                                  CALL                              giga_vAC
_page_0x4ca0                      LDLW                              0xFE
                                  STW                               _vv                         ; Main: vv = 63

                                  LDI                               11
                                  STW                               _state                      ; Main: state = 11

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_101                              PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               60
                                  STW                               _vv                         ; Main: vv = 60

                                  LDI                               12
                                  STW                               _state                      ; Main: state = 12

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_114                              PUSH                              
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  LDI                               13
                                  STW                               _state                      ; Main: state = 13

                                  LDWI                              _midiOff
                                  CALL                              giga_vAC                    ; Main: gosub midiOff

                                  Return                                                        ; Main: return

_vuMeter                          PUSH                              
                                  LDI                               1
                                  STW                               _i                          ; Main: for i=1 to 4

_next_0x047c                      LD                                _i
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  STW                               _i8                         ; Main: i8 = i LSL 8

                                  LDW                               _i8
                                  ADDI                              250
                                  PEEK                              
                                  STW                               _v                          ; Main: v = peek(i8 + &h00FA)

                                  LDWI                              0x7dd7
                                  STLW                              0xFE
                                  LDWI                              _page_0x4da0
                                  CALL                              giga_vAC
_page_0x4da0                      LDLW                              0xFE
                                  ADDW                              _i
                                  PEEK                              
                                  STW                               _vol                        ; Main: vol = volume(i)

                                  LDWI                              0x7dd2
                                  ADDW                              _i
                                  PEEK                              
                                  STW                               _y                          ; Main: y = ypos(i)

                                  LDW                               _v
                                  SUBI                              64
                                  JumpGE                            _endif_0x05c2 7             ; Main: if v &>= VU_LEVELS

                                  LDW                               _i
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  ADDI                              34
                                  STW                               _i4                         ; Main: i4 = (i LSL 4) + X_POS

                                  LDW                               _i8
                                  ADDI                              252
                                  DEEK                              
                                  XORI                              0
                                  JumpEQ                            _else_0x04f1 3
                                  LDWI                              _decay
                                  CALL                              giga_vAC                    ; Main: if deek(i8 + &h00FC) &= 0 then goto decay 'if frequency is 0, (i.e. note off), then decay

_else_0x04f1                      LDW                               _v
                                  SUBW                              _vol
                                  JumpLT                            _decay 4                    ; Main: if v &< vol

                                  LDW                               _v
                                  SUBI                              64
                                  STW                               0xe8
                                  LDI                               63
                                  SUBW                              0xe8
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  STW                               _y                          ; Main: y = ((VU_LEVELS-1) - (v - VU_LEVELS)) LSR 1 'transform 127->64 to 0->63

                                  STLW                              0xFE
                                  LDWI                              _page_0x4ea0
                                  CALL                              giga_vAC
_page_0x4ea0                      LDLW                              0xFE
                                  LDW                               _v
                                  STW                               _vol
                                  LDWI                              _endif_0x0543
                                  CALL                              giga_vAC                    ; Main: vol = v

_decay                            LDW                               _y
                                  SUBI                              1
                                  STW                               _y                          ; Main: dec y

                                  INC                               _vol                        ; Main: inc vol

                                  LDW                               _y
                                  SUBI                              1
                                  JumpLT                            _endif_0x0543 5             ; Main: if y &< 1

                                  INC                               _y                          ; Main: inc y

                                  LDW                               _vol
                                  SUBI                              1
                                  STW                               _vol                        ; Main: dec vol

_endif_0x0543                     LDI                               0
                                  STW                               spriteId
                                  LDW                               _i4
                                  ST                                spriteXY
                                  LDW                               _y
                                  ADDI                              1
                                  STW                               0xe8
                                  LDI                               78
                                  SUBW                              0xe8
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite noFlip, 0, i4, (Y_POS + 32) - (y + 1)

                                  LDW                               _y
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _y
                                  ADDW                              _y
                                  STW                               0xec
                                  LDI                               0x01
                                  STW                               spriteId
                                  GetSpriteLUT                      
                                  ADDW                              0xec
                                  STLW                              0xFE
                                  LDWI                              _page_0x4fa0
                                  CALL                              giga_vAC
_page_0x4fa0                      LDLW                              0xFE
                                  STW                               _lut                        ; Main: lut = (y LSL 2) + y + y + get("SPRITE_LUT", 1)

                                  LDW                               _lut
                                  PEEK                              
                                  STW                               _save                       ; Main: save = peek(lut)

                                  LDI                               -1
                                  POKE                              _lut                        ; Main: poke lut, -1

                                  LDI                               1
                                  STW                               spriteId
                                  LDW                               _i4
                                  ST                                spriteXY
                                  LDI                               46
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteY                                                   ; Main: sprite flipY, 1, i4, Y_POS

                                  LDI                               1
                                  STW                               spriteId
                                  LDW                               _i4
                                  ADDI                              6
                                  ST                                spriteXY
                                  LDI                               46
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteY                                                   ; Main: sprite flipY, 1, i4 + 6, Y_POS

                                  LDW                               _save
                                  POKE                              _lut                        ; Main: poke lut, save

_endif_0x05c2                     LDWI                              0x7dd7
                                  ADDW                              _i
                                  STW                               memAddr
                                  LDW                               _vol
                                  POKE                              memAddr                     ; Main: volume(i) = vol

                                  LDWI                              0x7dd2
                                  ADDW                              _i
                                  STW                               memAddr
                                  LDW                               _y
                                  POKE                              memAddr                     ; Main: ypos(i) = y

                                  STLW                              0xFE
                                  LDWI                              _page_0x50a0
                                  CALL                              giga_vAC
_page_0x50a0                      LDLW                              0xFE
                                  ForNextFarInc                     _i _next_0x047c 4           ; Main: next i

                                  Return                                                        ; Main: return

_siren                            PUSH                              
                                  LDW                               _t
                                  ANDI                              63
                                  STW                               0xe8
                                  LDWI                              2208
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               _v_lut                      ; Main: v_lut = peek(V_LUT + (t AND (V_SIZ - 1)))

                                  LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              1280
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _f_lut                      ; Main: f_lut = deek(F_LUT + (t LSL 1))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _f_lut
                                  STW                               sndFrequency
                                  LDW                               _v_lut
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, f_lut    , v_lut, 2

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _f_lut
                                  ADDI                              100
                                  STW                               sndFrequency
                                  LDW                               _v_lut
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  STLW                              0xFE
                                  LDWI                              _page_0x51a0
                                  CALL                              giga_vAC
_page_0x51a0                      LDLW                              0xFE
                                  SoundOnV                                                      ; Main: sound on, 2, f_lut+100, v_lut, 2

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  LDW                               _f_lut
                                  ADDI                              200
                                  STW                               sndFrequency
                                  LDW                               _v_lut
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 3, f_lut+200, v_lut, 2

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  LDWI                              300
                                  ADDW                              _f_lut
                                  STW                               sndFrequency
                                  LDW                               _v_lut
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 4, f_lut+300, v_lut, 2

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              64
                                  JumpEQ                            _endif_0x06a6 8             ; Main: if t &= 64

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x06a6                     Return                                                        ; Main: return

_crash                            PUSH                              
                                  LDW                               _t
                                  ANDI                              63
                                  STLW                              0xFE
                                  LDWI                              _page_0x52a0
                                  CALL                              giga_vAC
_page_0x52a0                      LDLW                              0xFE
                                  STW                               0xe8
                                  LDWI                              2464
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               _d_lut                      ; Main: d_lut = peek(D_LUT + (t AND (D_SIZ - 1)))

                                  LDW                               _t
                                  ANDI                              1
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              1280
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _f_lut                      ; Main: f_lut = deek(F_LUT + ((t AND 1) LSL 1))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _f_lut
                                  STW                               sndFrequency
                                  LDW                               _d_lut
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, f_lut    , d_lut, 0

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _f_lut
                                  ADDI                              100
                                  STW                               sndFrequency
                                  LDW                               _d_lut
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, f_lut+100, d_lut, 0

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  LDW                               _f_lut
                                  ADDI                              200
                                  STW                               sndFrequency
                                  LDW                               _d_lut
                                  STW                               sndVolume
                                  LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x53a0
                                  CALL                              giga_vAC
_page_0x53a0                      LDLW                              0xFE
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 3, f_lut+200, d_lut, 0

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  LDWI                              300
                                  ADDW                              _f_lut
                                  STW                               sndFrequency
                                  LDW                               _d_lut
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 4, f_lut+300, d_lut, 0

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              64
                                  JumpEQ                            _endif_0x075c 9             ; Main: if t &= 64

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x075c                     Return                                                        ; Main: return

_beep                             PUSH                              
                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDWI                              8000
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               1
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, 8000, 63, 1

                                  INC                               _t                          ; Main: inc t

                                  STLW                              0xFE
                                  LDWI                              _page_0x54a0
                                  CALL                              giga_vAC
_page_0x54a0                      LDLW                              0xFE
                                  LDW                               _t
                                  XORI                              3
                                  JumpEQ                            _endif_0x0794 10            ; Main: if t &= 3

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0794                     Return                                                        ; Main: return

_tictoc                           PUSH                              
                                  LDW                               _t
                                  ANDI                              7
                                  STW                               0xe8
                                  LDWI                              2528
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               _t_lut                      ; Main: t_lut = peek(T_LUT + (t AND (T_SIZ - 1)))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _t_lut
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               sndFrequency
                                  LDW                               _t_lut
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, t_lut LSL 4, t_lut, 0

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              6
                                  JumpEQ                            _endif_0x07e7 11            ; Main: if t &= T_SIZ-2

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  STLW                              0xFE
                                  LDWI                              _page_0x55a0
                                  CALL                              giga_vAC
_page_0x55a0                      LDLW                              0xFE
                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x07e7                     Return                                                        ; Main: return

_pucDeath                         PUSH                              
                                  LDW                               _t
                                  ANDI                              15
                                  STW                               0xe8
                                  LDWI                              32194
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _n                          ; Main: n = get("MIDI_NOTE", peek(@pnotes + (t AND 15)))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _n
                                  SUBW                              _f
                                  STW                               sndFrequency
                                  LDW                               _t
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  STW                               0xec
                                  LDI                               63
                                  SUBW                              0xec
                                  STW                               sndVolume
                                  LDI                               1
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, n - f, 63 - (t LSR 2), 1

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  ANDI                              7
                                  XORI                              0
                                  JumpEQ                            _endif_0x0855 12            ; Main: if (t AND 7) &= 0

                                  STLW                              0xFE
                                  LDWI                              _page_0x56a0
                                  CALL                              giga_vAC
_page_0x56a0                      LDLW                              0xFE
                                  LDW                               _f
                                  ADDI                              200
                                  STW                               _f                          ; Main: f = f + 200

_endif_0x0855                     LDW                               _t
                                  XORI                              128
                                  JumpEQ                            _endif_0x0876 13            ; Main: if t &= 128

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0876                     Return                                                        ; Main: return

_ghostMove                        PUSH                              
                                  LDW                               _t
                                  ANDI                              15
                                  STW                               0xe8
                                  LDWI                              32178
                                  ADDW                              0xe8
                                  PEEK                              
                                  ADDI                              10
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _n                          ; Main: n = get("MIDI_NOTE", peek(@gnotes + (t AND 15)) + 10)

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _n
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, n, 63, 2

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  STLW                              0xFE
                                  LDWI                              _page_0x57a0
                                  CALL                              giga_vAC
_page_0x57a0                      LDLW                              0xFE
                                  XORI                              128
                                  JumpEQ                            _endif_0x08d2 14            ; Main: if t &= 128

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x08d2                     Return                                                        ; Main: return

                                  LDI                               0
                                  STW                               _vv                         ; Main: vv = 0

_invaderMove                      PUSH                              
                                  LDW                               _f
                                  ANDI                              3
                                  STW                               0xe8
                                  LDWI                              32174
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _n                          ; Main: n = get("MIDI_NOTE", peek(@inotes + (f AND 3)))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _n
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               3
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, n, vv, 3

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              25
                                  JumpEQ                            _elseif_0x094b 16           ; Main: if t &= 25

                                  STLW                              0xFE
                                  LDWI                              _page_0x58a0
                                  CALL                              giga_vAC
_page_0x58a0                      LDLW                              0xFE
                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  INC                               _f                          ; Main: inc f

                                  LDW                               _f
                                  XORI                              4
                                  JumpEQ                            _endif_0x0946 15            ; Main: if f &= 4

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0946                     LDWI                              _endif_0x095f
                                  CALL                              giga_vAC                    ; Main: endif

_elseif_0x094b                    LDW                               _t
                                  XORI                              4
                                  JumpEQ                            _endif_0x095f 17            ; Main: elseif t &= 4

                                  LDI                               0
                                  STW                               _vv                         ; Main: vv = 0

_endif_0x095f                     Return                                                        ; Main: return

_invaderShootOld                  LDWI                              25000
                                  SUBW                              _f
                                  STW                               intSrcA
                                  LDWI                              13000
                                  IntMax                            
                                  STW                               _ff                         ; Main: ff = max(25000 - f, 13000)

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STW                               sndFrequency
                                  STLW                              0xFE
                                  LDWI                              _page_0x59a0
                                  CALL                              giga_vAC
_page_0x59a0                      LDLW                              0xFE
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, ff, vv, 2

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _vv
                                  SUBI                              2
                                  STW                               _vv                         ; Main: vv = vv - 2

                                  LDW                               _vv
                                  JumpLE                            _endif_0x09ba 18            ; Main: if vv &<= 0

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x09ba                     Return                                                        ; Main: return

_invaderShoot                     PUSH                              
                                  LDW                               _t
                                  ANDI                              31
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              28064
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _ff                         ; Main: ff = deek(IF_LUT + ((t AND 31) LSL 1))

                                  LDW                               _t
                                  ANDI                              31
                                  STW                               0xe8
                                  LDWI                              28320
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               _vvv                        ; Main: vvv = peek(I_LUT + (t AND 31))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STLW                              0xFE
                                  LDWI                              _page_0x5aa0
                                  CALL                              giga_vAC
_page_0x5aa0                      LDLW                              0xFE
                                  STW                               sndFrequency
                                  LDW                               _vvv
                                  STW                               sndVolume
                                  LDI                               3
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, ff, vvv, 3

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STW                               sndFrequency
                                  LDW                               _vvv
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, ff, vvv, 0

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              32
                                  JumpEQ                            _endif_0x0a33 19            ; Main: if t &= 32

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0a33                     Return                                                        ; Main: return

_saucerMove                       PUSH                              
                                  LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              27808
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _ff                         ; Main: ff = deek(SF_LUT + (t LSL 1))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STLW                              0xFE
                                  LDWI                              _page_0x5ba0
                                  CALL                              giga_vAC
_page_0x5ba0                      LDLW                              0xFE
                                  STW                               sndFrequency
                                  LDI                               32
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, ff, 32, 2

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              12
                                  JumpEQ                            _endif_0x0a74 20            ; Main: if t &= SF_SIZ

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

_endif_0x0a74                     Return                                                        ; Main: return

_invaderExplode                   PUSH                              
                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              27552
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, deek(IE_LUT + (t LSL 1)), vv, 2

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              3
                                  JumpEQ                            _else_0x0ab3 21
                                  LDI                               0
                                  STW                               _t                          ; Main: if t &= IE_SIZ then t = 0

_else_0x0ab3                      LDW                               _vv
                                  STLW                              0xFE
                                  LDWI                              _page_0x5ca0
                                  CALL                              giga_vAC
_page_0x5ca0                      LDLW                              0xFE
                                  SUBI                              2
                                  STW                               _vv                         ; Main: vv = vv - 2

                                  LDW                               _vv
                                  JumpLE                            _endif_0x0adc 22            ; Main: if vv &<= 0

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               60
                                  STW                               _vv                         ; Main: vv = 60

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0adc                     Return                                                        ; Main: return

_testSfx                          PUSH                              
                                  LD                                _vv
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  STW                               0xe8
                                  LDWI                              16384
                                  SUBW                              0xe8
                                  ADDW                              _f
                                  STW                               _ff                         ; Main: ff = 16384 - (vv LSL 8) + f

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, ff, vv, 2

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _vv
                                  SUBI                              8
                                  STW                               _vv                         ; Main: vv = vv - 8

                                  LDW                               _vv
                                  STLW                              0xFE
                                  LDWI                              _page_0x5da0
                                  CALL                              giga_vAC
_page_0x5da0                      LDLW                              0xFE
                                  JumpLE                            _endif_0x0b56 24            ; Main: if vv &<= 0

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               63
                                  STW                               _vv                         ; Main: vv = 63

                                  LDWI                              1000
                                  ADDW                              _f
                                  STW                               _f                          ; Main: f = f + 1000

                                  LDWI                              4000
                                  XORW                              _f
                                  JumpEQ                            _endif_0x0b56 23            ; Main: if f &= 4000

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0b56                     Return                                                        ; Main: return

_saucerExplode                    PUSH                              
                                  LDW                               _vv
                                  ADDI                              10
                                  STW                               intSrcA
                                  LDI                               63
                                  IntMin                            
                                  STW                               _m                          ; Main: m = min(vv + 10, 63)

                                  LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              27040
                                  ADDW                              0xea
                                  DEEK                              
                                  SUBW                              _f
                                  STW                               _ff                         ; Main: ff = deek(SEF_LUT + (t LSL 1)) - f

                                  LDI                               1
                                  STLW                              0xFE
                                  LDWI                              _page_0x5ea0
                                  CALL                              giga_vAC
_page_0x5ea0                      LDLW                              0xFE
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, ff, vv, 2

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _ff
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, ff LSR 4, vv, 0

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              12
                                  JumpEQ                            _endif_0x0c06 26            ; Main: if t &= SEF_SIZ

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDWI                              600
                                  ADDW                              _f
                                  STW                               _f                          ; Main: f = f + 600

                                  LDW                               _vv
                                  SUBI                              15
                                  STW                               _vv                         ; Main: vv = vv - 15

                                  LDW                               _vv
                                  STLW                              0xFE
                                  LDWI                              _page_0x5fa0
                                  CALL                              giga_vAC
_page_0x5fa0                      LDLW                              0xFE
                                  JumpLE                            _endif_0x0c06 25            ; Main: if vv &<= 0

                                  LDI                               0
                                  STW                               _f                          ; Main: f = 0

                                  LDI                               60
                                  STW                               _vv                         ; Main: vv = 60

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0c06                     Return                                                        ; Main: return

_playerExplode                    PUSH                              
                                  LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              27296
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _f                          ; Main: f = deek(PEF_LUT + (t LSL 1))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _f
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, f, vv, 0

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _f
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, f, vv, 0

                                  LDI                               3
                                  STLW                              0xFE
                                  LDWI                              _page_0x60a0
                                  CALL                              giga_vAC
_page_0x60a0                      LDLW                              0xFE
                                  ST                                sndChannel + 1
                                  LDW                               _f
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 3, f, vv, 0

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  LDW                               _f
                                  STW                               sndFrequency
                                  LDW                               _vv
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 4, f, vv, 0

                                  INC                               _t                          ; Main: inc t

                                  LDW                               _t
                                  XORI                              32
                                  JumpEQ                            _else_0x0c86 27
                                  LDI                               0
                                  STW                               _t                          ; Main: if t &= PEF_SIZ then t = 0

_else_0x0c86                      LDW                               _vv
                                  SUBI                              1
                                  STW                               _vv                         ; Main: vv = vv - 1

                                  LDW                               _vv
                                  JumpLE                            _endif_0x0caf 28            ; Main: if vv &<= 0

                                  LDI                               0
                                  STW                               _t                          ; Main: t = 0

                                  LDI                               60
                                  STW                               _vv                         ; Main: vv = 60

                                  LDI                               0
                                  STW                               _state                      ; Main: state = 0

                                  STLW                              0xFE
                                  LDWI                              _page_0x61a0
                                  CALL                              giga_vAC
_page_0x61a0                      LDLW                              0xFE
                                  SoundAllOff                                                   ; Main: sound off

_endif_0x0caf                     Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x72cf
realTimeStub                      EQU     0x76a3
setRealTimeProc0                  EQU     0x71ed
integerMin                        EQU     0x77a2
integerMax                        EQU     0x71cf
shiftRight1bit                    EQU     0x78a0
shiftRight2bit                    EQU     0x73a0
shiftRight4bit                    EQU     0x70f5
gosubNumericLabel                 EQU     0x74cd
scanlineMode                      EQU     0x70eb
resetVideoFlags                   EQU     0x71a9
initClearFuncs                    EQU     0x71dc
clearVertBlinds                   EQU     0x75c9
clearCursorRow                    EQU     0x73cf
drawSprite_                       EQU     0x7ba0
drawSprite                        EQU     0x71c2
drawSpriteY                       EQU     0x71b5
getSpriteLUT                      EQU     0x70e1
resetMidi                         EQU     0x74a3
playMidi                          EQU     0x77af
playMidiVol                       EQU     0x78aa
midiStartNote                     EQU     0x76b5
midiGetNote                       EQU     0x7ca7
soundAllOff                       EQU     0x72b9
soundOnV                          EQU     0x75a1
printInit                         EQU     0x72a3
printText                         EQU     0x72e6
printChar                         EQU     0x79a7
atTextCursor                      EQU     0x73aa
newLineScroll                     EQU     0x7aa2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


integerMin          LDW     intSrcA
                    SUBW    intSrcB
                    BLE     integerMi_A
                    LDW     intSrcB
                    RET

integerMi_A         LDW     intSrcA
                    RET


integerMax          LDW     intSrcA
                    SUBW    intSrcB
                    BGE     integerMa_A
                    LDW     intSrcB
                    RET

integerMa_A         LDW     intSrcA
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite_         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawS_loop          LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     drawS_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    BRA     drawS_loop
                    
drawS_exit          POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteY         PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


getSpriteLUT        LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    DEEK
                    RET



audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


                    ; adds 10*16.66667ms delay between giga_frameCount and midiDelay so that if there ; is substantial processing between resetMidi and playMidi giga_frameCount will
                    ; not overflow past midiDelay and cause an extra initial 256*16.66667ms delay
resetMidi           LDI     0      
                    ST      giga_frameCount
                    ADDI    10
                    STW     midiDelay                       ; instant MIDI startup
                    LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMi_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr    
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMi_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0                     ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDW     midiCommand
                    ANDI    0xF0                    
                    XORI    0x90                            ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            			; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                            ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         			; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                            ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playM_exit1                     ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


playMidiVol         LDW     midiStream
                    BEQ     playMV_exit0                    ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playMV_start
playMV_exit0        RET

playMV_start        PUSH
playMV_process      LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDW     midiCommand
                    ANDI    0xF0
                    XORI    0x90                            ; check for start note
                    BNE     playMV_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC                        ; start note
                    LDWI    midiSetVolume
                    CALL    giga_vAC                        ; set note volume
                    BRA     playMV_process
                    
playMV_endnote      XORI    0x10                            ; check for end note
                    BNE     playMV_segment
    
                    LDWI    midiEndNote                     ; end note
                    CALL    giga_vAC
                    BRA     playMV_process

playMV_segment      XORI    0x50                            ; check for new segment
                    BNE     playMV_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playMV_exit1                    ; 0x0000 = stop
                    BRA     playMV_process
    
playMV_delay        LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playMV_exit1        POP
                    RET


midiStartNote       LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     midiPtr
                    LDW     midiStream                      ; midi note
                    PEEK
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                            ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                            ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; note address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr                         ; set note
                    
midiSN_exit         LDW     midiStream
                    ADDI    0x01                            ; midiStream++
                    STW     midiStream
                    RET

midiSetVolume       LDI     0xFA
                    ST      midiPtr                         ; wavA address 0x01FA <-> 0x04FA, (midiPtr is still valid from midiStartNote)
                    LDW     midiStream                      ; midi volume
                    PEEK
                    POKE    midiPtr
                    BRA     midiSN_exit                     ; save a few bytes by using midiStartNote's epilogue
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr                         ; end note
                    RET


midiGetNote         LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     musicPtr
                    LD      musicNote
                    LSLW
                    ADDW    musicPtr
                    STW     musicPtr
                    LUP     0x00                            ; get ROM note low byte
                    ;LSLW                                    ; left shift low byte as SOUND command expects
                    ST      musicNote                       ; a non system internal frequency
                    LDW     musicPtr
                    LUP     0x01                            ; get ROM note high byte
                    ST      musicNote + 1
                    LDW     musicNote                       ; this is needed for GET("MIDI_NOTE")
                    RET


soundAllOff         LDWI    0x01FC
                    STW     sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel 0
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 1
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 2
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 3
                    RET


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

