_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_2                                EQU                               0x0237
_3                                EQU                               0x023b
_4                                EQU                               0x0249
_5                                EQU                               0x024d
_6                                EQU                               0x0252
_7                                EQU                               0x0257
_100                              EQU                               0x0259
_198                              EQU                               0x0294
_199                              EQU                               0x02a4
_200                              EQU                               0x02b3
_204                              EQU                               0x02b8
_205                              EQU                               0x02cf
_206                              EQU                               0x02df
_207                              EQU                               0x0302
_208                              EQU                               0x030e
_209                              EQU                               0x031a
_1000                             EQU                               0x0326
_next_0x026c                      EQU                               0x025e
_page_0x0300                      EQU                               0x0300
_else_0x0340                      EQU                               0x033d
_else_0x035a                      EQU                               0x0353
_else_0x0374                      EQU                               0x0369
_else_0x038e                      EQU                               0x037f
_else_0x03a8                      EQU                               0x0395
_else_0x03c2                      EQU                               0x03ab
_else_0x03dc                      EQU                               0x03c1
_else_0x03f6                      EQU                               0x03d7
_else_0x0410                      EQU                               0x03ed
_page_0x0400                      EQU                               0x0400
_else_0x042a                      EQU                               0x0414
_else_0x0444                      EQU                               0x042a
_else_0x045e                      EQU                               0x0440
_else_0x0478                      EQU                               0x0456
_else_0x0492                      EQU                               0x046c
_else_0x04ac                      EQU                               0x0482
_else_0x04c6                      EQU                               0x0498
_else_0x04e0                      EQU                               0x04ae
_else_0x0513                      EQU                               0x04d7

; Global Variables
_a                                EQU                               0x0030
_b                                EQU                               0x0032
_p                                EQU                               0x0034
_z                                EQU                               0x0036
_d                                EQU                               0x0038
_k                                EQU                               0x003a
_c                                EQU                               0x003c

; Local Variables

; Arrays

; Strings

; Constant Strings
_str_0x7dec                       EQU                               0x7dec
_str_0x7dec                       DB                                18 ' 2 3   5 6 7   9 0' 0
_str_0x7dd7                       EQU                               0x7dd7
_str_0x7dd7                       DB                                19 'Q W E R T Y U I O P' 0
_str_0x7dd2                       EQU                               0x7dd2
_str_0x7dd2                       DB                                3 'Z: ' 0
_str_0x7dc0                       EQU                               0x7dc0
_str_0x7dc0                       DB                                8 'Metallic' 0
_str_0x7db6                       EQU                               0x7db6
_str_0x7db6                       DB                                8 'Triangle' 0
_str_0x7dac                       EQU                               0x7dac
_str_0x7dac                       DB                                8 'Pulse   ' 0
_str_0x7da2                       EQU                               0x7da2
_str_0x7da2                       DB                                8 'Sawtooth' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_onAddrs_0x7dca               EQU                               0x7dca
_lut_onAddrs_0x7dca               DW                                0x02df 0x0302 0x030e 0x031a 

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDI                               0
                                  STW                               _a
                                  LDI                               0
                                  STW                               _b
                                  LDWI                              508
                                  STW                               _p
                                  ClearVertBlinds                   
                                  LDI                               2
                                  STW                               _z
                                  LDI                               0
                                  STW                               _d
                                  LDWI                              _198
                                  CALL                              giga_vAC                    ; Main: a=0 : b=0 : p=256+252 : cls : z=2 : d=0 : gosub 198

_2                                LD                                giga_buttonState
                                  STW                               _k                          ; Main: k=get("BUTTON_STATE")

_3                                LDW                               _k
                                  SUBI                              126
                                  JumpGT                            _4 0
                                  BRA                               _2                          ; Main: if k &> 126 then goto &2

_4                                LDI                               30
                                  STW                               _d                          ; Main: d = 30

_5                                LDWI                              _1000
                                  CALL                              giga_vAC                    ; Main: gosub 1000

_6                                LDWI                              _100
                                  CALL                              giga_vAC                    ; Main: gosub 100

_7                                BRA                               _2                          ; Main: goto &2

_100                              PUSH                              
                                  LDI                               1
                                  STW                               _c
_next_0x026c                      LD                                _c
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDI                              252
                                  STW                               _p
                                  SUBI                              1
                                  STW                               0xea
                                  LDW                               _z
                                  POKE                              0xea
                                  LDW                               _a
                                  POKE                              _p
                                  LDW                               _p
                                  ADDI                              1
                                  STW                               0xec
                                  LDW                               _b
                                  POKE                              0xec
                                  ForNextFarInc                     _c _next_0x026c 4           ; Main: for c=1 to 4 : p=(c LSL 8)+252 : poke p-1,z : poke p,a : poke p+1,b : next c

                                  LDW                               _d
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER,d

                                  Return                                                        ; Main: return

_198                              PUSH                              
                                  PrintString                       _str_0x7dec
                                  NewLine                                                       ; Main: print " 2 3   5 6 7   9 0"

_199                              PrintString                       _str_0x7dd7
                                  NewLine                                                       ; Main: print "Q W E R T Y U I O P"

_200                              LDWI                              _100
                                  CALL                              giga_vAC                    ; Main: gosub 100

_204                              LDI                               2
                                  ST                                cursorXY
                                  LDI                               24
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7dd2                 ; Main: at 2,24:print "Z: ";

_205                              LDW                               _z
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x7dca
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: on z goto 206,207,208,209

_206                              PrintString                       _str_0x7dc0
                                  Return                                                        ; Main: print "Metallic";:return

                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
_207                              PrintString                       _str_0x7db6
                                  Return                                                        ; Main: print "Triangle";:return

_208                              PrintString                       _str_0x7dac
                                  Return                                                        ; Main: print "Pulse   ";:return

_209                              PrintString                       _str_0x7da2
                                  Return                                                        ; Main: print "Sawtooth";:return

_1000                             PUSH                              
                                  LDW                               _k
                                  XORI                              113
                                  JumpEQ                            _else_0x0340 1
                                  LDI                               73
                                  STW                               _a
                                  LDI                               8
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 113 then a=73 :b=8 :return:'C

_else_0x0340                      LDW                               _k
                                  XORI                              50
                                  JumpEQ                            _else_0x035a 2
                                  LDI                               11
                                  STW                               _a
                                  LDI                               9
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 50  then a=11 :b=9 :return:'C#

_else_0x035a                      LDW                               _k
                                  XORI                              119
                                  JumpEQ                            _else_0x0374 3
                                  LDI                               80
                                  STW                               _a
                                  LDI                               9
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 119 then a=80 :b=9 :return:'D

_else_0x0374                      LDW                               _k
                                  XORI                              51
                                  JumpEQ                            _else_0x038e 4
                                  LDI                               25
                                  STW                               _a
                                  LDI                               10
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 51  then a=25 :b=10:return:'D#

_else_0x038e                      LDW                               _k
                                  XORI                              101
                                  JumpEQ                            _else_0x03a8 5
                                  LDI                               103
                                  STW                               _a
                                  LDI                               10
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 101 then a=103:b=10:return:'E

_else_0x03a8                      LDW                               _k
                                  XORI                              114
                                  JumpEQ                            _else_0x03c2 6
                                  LDI                               57
                                  STW                               _a
                                  LDI                               11
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 114 then a=57 :b=11:return:'F

_else_0x03c2                      LDW                               _k
                                  XORI                              53
                                  JumpEQ                            _else_0x03dc 7
                                  LDI                               16
                                  STW                               _a
                                  LDI                               12
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 53  then a=16 :b=12:return:'F#

_else_0x03dc                      LDW                               _k
                                  XORI                              116
                                  JumpEQ                            _else_0x03f6 8
                                  LDI                               108
                                  STW                               _a
                                  LDI                               12
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 116 then a=108:b=12:return:'G

_else_0x03f6                      LDW                               _k
                                  XORI                              54
                                  JumpEQ                            _else_0x0410 9
                                  LDI                               78
                                  STW                               _a
                                  LDI                               13
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 54  then a=78 :b=13:return:'G#

_else_0x0410                      LDW                               _k
                                  XORI                              121
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  JumpEQ                            _else_0x042a 10
                                  LDI                               53
                                  STW                               _a
                                  LDI                               14
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 121 then a=53 :b=14:return:'A

_else_0x042a                      LDW                               _k
                                  XORI                              55
                                  JumpEQ                            _else_0x0444 11
                                  LDI                               35
                                  STW                               _a
                                  LDI                               15
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 55  then a=35 :b=15:return:'A#

_else_0x0444                      LDW                               _k
                                  XORI                              117
                                  JumpEQ                            _else_0x045e 12
                                  LDI                               23
                                  STW                               _a
                                  LDI                               16
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 117 then a=23 :b=16:return:'B

_else_0x045e                      LDW                               _k
                                  XORI                              105
                                  JumpEQ                            _else_0x0478 13
                                  LDI                               19
                                  STW                               _a
                                  LDI                               17
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 105 then a=19 :b=17:return:'C

_else_0x0478                      LDW                               _k
                                  XORI                              57
                                  JumpEQ                            _else_0x0492 14
                                  LDI                               21
                                  STW                               _a
                                  LDI                               18
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 57  then a=21 :b=18:return:'C#

_else_0x0492                      LDW                               _k
                                  XORI                              111
                                  JumpEQ                            _else_0x04ac 15
                                  LDI                               31
                                  STW                               _a
                                  LDI                               19
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 111 then a=31 :b=19:return:'D

_else_0x04ac                      LDW                               _k
                                  XORI                              48
                                  JumpEQ                            _else_0x04c6 16
                                  LDI                               50
                                  STW                               _a
                                  LDI                               20
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 48  then a=50 :b=20:return:'D#

_else_0x04c6                      LDW                               _k
                                  XORI                              112
                                  JumpEQ                            _else_0x04e0 17
                                  LDI                               77
                                  STW                               _a
                                  LDI                               21
                                  STW                               _b
                                  Return                                                        ; Main: if k &= 112 then a=77 :b=21:return:'E

_else_0x04e0                      LDW                               _k
                                  XORI                              122
                                  JumpEQ                            _else_0x0513 18
                                  LDI                               255
                                  ST                                giga_buttonState
                                  LDW                               _z
                                  ADDI                              1
                                  ANDI                              3
                                  STW                               _z
                                  LDI                               0
                                  STW                               _a
                                  LDI                               0
                                  STW                               _b
                                  LDI                               0
                                  STW                               _d
                                  LDWI                              _200
                                  CALL                              giga_vAC                    ; Main: if k &= 122 then set BUTTON_STATE,&hFF : z=(z+1)AND3 : a=0 : b=0 : d=0 : goto 200

_else_0x0513                      LDI                               0
                                  STW                               _a
                                  LDI                               0
                                  STW                               _b
                                  LDI                               0
                                  STW                               _d
                                  Return                                                        ; Main: a=0 : b=0 : d=0 : return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

resetVideoFlags                   EQU     0x78b7
initClearFuncs                    EQU     0x78c3
clearVertBlinds                   EQU     0x79c3
clearCursorRow                    EQU     0x7ab6
printInit                         EQU     0x7aa0
printText                         EQU     0x79aa
printChar                         EQU     0x7ba7
atTextCursor                      EQU     0x78da
newLineScroll                     EQU     0x7ca2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

