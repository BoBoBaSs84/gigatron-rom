_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_1                                EQU                               0x0212
_2                                EQU                               0x0217
_3                                EQU                               0x0241
_4                                EQU                               0x026b
_5                                EQU                               0x0280
_6                                EQU                               0x0295
_7                                EQU                               0x02ab
_8                                EQU                               0x02c8
_9                                EQU                               0x02e0
_10                               EQU                               0x0302
_11                               EQU                               0x030a
_12                               EQU                               0x031f
_page_0x0300                      EQU                               0x0300
_next_0x0364                      EQU                               0x0306
_end_0x03a3                       EQU                               0x0335

; Global Variables
_a                                EQU                               0x0030
_b                                EQU                               0x0032
_c                                EQU                               0x0034
_d                                EQU                               0x0036
_x                                EQU                               0x0038
_y                                EQU                               0x003a
_q                                EQU                               0x003c
_u                                EQU                               0x003e
_v                                EQU                               0x0040
_p                                EQU                               0x0042
_t                                EQU                               0x0044

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

_1                                ClearVertBlinds                                               ; Main: cls : rem Lines demo

_2                                Rand                              
                                  ANDI                              127
                                  STW                               0xe8
                                  Rand                              
                                  ANDI                              31
                                  ADDW                              0xe8
                                  STW                               _a
                                  Rand                              
                                  ANDI                              63
                                  STW                               0xec
                                  Rand                              
                                  ANDI                              63
                                  ADDW                              0xec
                                  ORI                               8
                                  STW                               _b                          ; Main: a=(rnd(0) AND &h7F) + (rnd(0) AND &h1F) : b=(rnd(0) AND &h3F) + (rnd(0) AND &h3F) OR 8

_3                                Rand                              
                                  ANDI                              127
                                  STW                               0xe8
                                  Rand                              
                                  ANDI                              31
                                  ADDW                              0xe8
                                  STW                               _c
                                  Rand                              
                                  ANDI                              63
                                  STW                               0xec
                                  Rand                              
                                  ANDI                              63
                                  ADDW                              0xec
                                  ORI                               8
                                  STW                               _d                          ; Main: c=(rnd(0) AND &h7F) + (rnd(0) AND &h1F) : d=(rnd(0) AND &h3F) + (rnd(0) AND &h3F) OR 8

_4                                LDW                               _c
                                  SUBW                              _a
                                  STW                               _x
                                  LDW                               _d
                                  SUBW                              _b
                                  STW                               _y
                                  Rand                              
                                  ANDI                              63
                                  STW                               _q                          ; Main: x=c-a : y=d-b : q=rnd(0) AND 63

_5                                LDI                               1
                                  STW                               _u
                                  LDW                               _x
                                  BGE                               _6
                                  LDI                               0
                                  SUBW                              _x
                                  STW                               _x
                                  LDI                               0
                                  SUBW                              _u
                                  STW                               _u                          ; Main: u=1 : if x &&< 0 then x=-x : u=-u

_6                                LDWI                              256
                                  STW                               _v
                                  LDW                               _y
                                  BGE                               _7
                                  LDI                               0
                                  SUBW                              _y
                                  STW                               _y
                                  LDI                               0
                                  SUBW                              _v
                                  STW                               _v                          ; Main: v=256 : if y &&< 0 then y=-y : v=-v

_7                                LD                                _b
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              _a
                                  STW                               _p
                                  LDW                               _y
                                  SUBW                              _x
                                  JumpLT                            _8 2
                                  LDWI                              _9
                                  CALL                              giga_vAC                    ; Main: p=a + (b LSL 8) : if y &< x then goto 9

_8                                LDW                               _x
                                  STW                               _t
                                  LDW                               _y
                                  STW                               _x
                                  LDW                               _t
                                  STW                               _y
                                  LDW                               _u
                                  STW                               _t
                                  LDW                               _v
                                  STW                               _u
                                  LDW                               _t
                                  STW                               _v                          ; Main: t=x : x=y : y=t : t=u : u=v : v=t

_9                                LDI                               0
                                  SUBW                              _x
                                  STW                               _d
                                  LDW                               _x
                                  ADDW                              _x
                                  STW                               _x
                                  LDW                               _y
                                  ADDW                              _y
                                  STW                               _y                          ; Main: d=-x : x=x+x : y=y+y

                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
_10                               LDW                               _d
                                  STW                               _t
_next_0x0364                      LDW                               _q
                                  POKE                              _p                          ; Main: for t=d &to 0 : poke p,q

_11                               LDW                               _d
                                  ADDW                              _y
                                  STW                               _d
                                  BLE                               _12
                                  LDW                               _d
                                  SUBW                              _x
                                  STW                               _d
                                  LDW                               _p
                                  ADDW                              _v
                                  STW                               _p                          ; Main: d=d+y : if d &&> 0 then d=d-x : p=p+v

_12                               LDW                               _p
                                  ADDW                              _u
                                  STW                               _p
                                  ForNextAdd                        _t _next_0x0364 0 1
                                  LDWI                              _2
                                  CALL                              giga_vAC                    ; Main: p=p+u : next t : goto 2

_end_0x03a3                       BRA                               _end_0x03a3                 ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

rand16bit                         EQU     0x7cf7
resetVideoFlags                   EQU     0x7da0
initClearFuncs                    EQU     0x7dac
clearVertBlinds                   EQU     0x7dc3
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

