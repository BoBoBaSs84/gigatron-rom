_startAddress_                EQU                               0x0200

; Internal Variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal Buffers
regsWorkArea                  EQU                               0x0000
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_10                           EQU                               0x0225
_20                           EQU                               0x0225
_30                           EQU                               0x0229
_39                           EQU                               0x0225
_40                           EQU                               0x022d
_49                           EQU                               0x0225
_50                           EQU                               0x0231
_59                           EQU                               0x0225
_60                           EQU                               0x0235
_70                           EQU                               0x0248
_80                           EQU                               0x0225
_90                           EQU                               0x0256
_end_0x025d                   EQU                               0x025a

; Global Variables
_N                            EQU                               0x0030

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x20
                              STW                               romType
                              RomCheck                          
                              Initialise                        
                              InitLtOp                        
                              InitRealTimeStub                                                  ; Main: INIT

_20                           LDI                               1
                              ST                                giga_ledState                   ; Main: set LED_STATE,1

_30                           LDI                               0
                              STW                               _N                              ; Main: FOR N=0 TO 15

_40                           LDW                               _N
                              ST                                giga_xoutMask                   ; Main: set XOUT_MASK,N

_50                           LDI                               0
                              ST                                giga_frameCount                 ; Main: set FRAME_COUNT,0

_60                           LD                                giga_frameCount
                              SUBI                              30
                              CALL                              convertLtOpAddr
                              JumpFalse                         _70 0
                              LDWI                              _60
                              CALL                              giga_vAC                        ; Main: IF get("FRAME_COUNT")<30 THEN GOTO 60

_70                           ForNextFarInc                     _N _40 15                       ; Main: NEXT N

_90                           LDI                               0
                              ST                                giga_ledState                   ; Main: set LED_STATE,0

_end_0x025d                   BRA                               _end_0x025d                     ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x7de8
realTimeStub                  EQU     0x7dd6
convertLtOp                   EQU     0x7dc1
resetVideoFlags               EQU     0x7dca
convertEqOpAddr               EQU     0x00c0
convertNeOpAddr               EQU     0x00c2
convertLeOpAddr               EQU     0x00c4
convertGeOpAddr               EQU     0x00c6
convertLtOpAddr               EQU     0x00c8
convertGtOpAddr               EQU     0x00ca
convert8Arr2dAddr             EQU     0x00cc
convert8Arr3dAddr             EQU     0x00ce
convert16Arr2dAddr            EQU     0x00d0
convert16Arr3dAddr            EQU     0x00d2
realTimeStubAddr              EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET

