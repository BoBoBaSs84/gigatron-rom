_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x024e
_50                               EQU                               0x0264
_51                               EQU                               0x0274
_53                               EQU                               0x0284
_54                               EQU                               0x0294
_55                               EQU                               0x02a4
_101                              EQU                               0x02b4
_105                              EQU                               0x02c4
_113                              EQU                               0x02d4
_114                              EQU                               0x02e4
_116                              EQU                               0x0304
_117                              EQU                               0x0314
_119                              EQU                               0x0324
_121                              EQU                               0x0334
_note                             EQU                               0x0344
_page_0x0300                      EQU                               0x0300
_next_0x033d                      EQU                               0x0349
_end_0x0371                       EQU                               0x0377

; Global Variables
_a                                EQU                               0x0030
_b                                EQU                               0x0032
_p                                EQU                               0x0034
_k                                EQU                               0x0036
_c                                EQU                               0x0038

; Local Variables

; Arrays

; Strings

; Constant Strings
_str_0x7df2                       EQU                               0x7df2
_str_0x7df2                       DB                                12 ' 2 3   5 6 7' 0
_str_0x7de1                       EQU                               0x7de1
_str_0x7de1                       DB                                15 'Q W E R T Y U I' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_numericLabs                  EQU                               0x7dc5
_lut_numericLabs                  DW                                50 51 53 54 55 101 105 113 114 116 117 119 121 0x0000
_lut_numericAddrs                 EQU                               0x7dab
_lut_numericAddrs                 DW                                0x0264 0x0274 0x0284 0x0294 0x02a4 0x02b4 0x02c4 0x02d4 0x02e4 0x0304 0x0314 0x0324 0x0334 

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  ClearVertBlinds                                               ; Main: cls

                                  LDI                               0
                                  STW                               _a
                                  STW                               _b
                                  LDI                               0
                                  STW                               _p                          ; Main: a=0 : b=a : p=0

                                  LDWI                              _note
                                  CALL                              giga_vAC                    ; Main: gosub note

                                  PrintString                       _str_0x7df2
                                  NewLine                                                       ; Main: print " 2 3   5 6 7"

                                  PrintString                       _str_0x7de1
                                  NewLine                                                       ; Main: print "Q W E R T Y U I"

                                  LDW                               _p
                                  SUBI                              2
                                  STW                               0xe8
                                  LDI                               2
                                  POKE                              0xe8                        ; Main: poke p-2,2

_loop                             LD                                giga_serialRaw
                                  STW                               _k                          ; Main: k=get("SERIAL_RAW")

                                  LDW                               _k
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: gosub k

                                  LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: goto loop

_50                               PUSH                              
                                  LDI                               11
                                  STW                               _a
                                  LDI                               9
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=11  : b=9  : gosub note : return

_51                               PUSH                              
                                  LDI                               25
                                  STW                               _a
                                  LDI                               10
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=25  : b=10 : gosub note : return

_53                               PUSH                              
                                  LDI                               16
                                  STW                               _a
                                  LDI                               12
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=16  : b=12 : gosub note : return

_54                               PUSH                              
                                  LDI                               78
                                  STW                               _a
                                  LDI                               13
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=78  : b=13 : gosub note : return

_55                               PUSH                              
                                  LDI                               35
                                  STW                               _a
                                  LDI                               15
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=35  : b=15 : gosub note : return

_101                              PUSH                              
                                  LDI                               103
                                  STW                               _a
                                  LDI                               10
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=103 : b=10 : gosub note : return

_105                              PUSH                              
                                  LDI                               19
                                  STW                               _a
                                  LDI                               17
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=19  : b=17 : gosub note : return

_113                              PUSH                              
                                  LDI                               73
                                  STW                               _a
                                  LDI                               8
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=73  : b=8  : gosub note : return

_114                              PUSH                              
                                  LDI                               57
                                  STW                               _a
                                  LDI                               11
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  Return                                                        ; Main: a=57  : b=11 : gosub note : return

_116                              PUSH                              
                                  LDI                               108
                                  STW                               _a
                                  LDI                               12
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=108 : b=12 : gosub note : return

_117                              PUSH                              
                                  LDI                               23
                                  STW                               _a
                                  LDI                               16
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=23  : b=16 : gosub note : return

_119                              PUSH                              
                                  LDI                               80
                                  STW                               _a
                                  LDI                               9
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=80  : b=9  : gosub note : return

_121                              PUSH                              
                                  LDI                               53
                                  STW                               _a
                                  LDI                               14
                                  STW                               _b
                                  LDWI                              _note
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: a=53  : b=14 : gosub note : return

_note                             PUSH                              
                                  LDI                               1
                                  STW                               _c
_next_0x033d                      LD                                _c
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDI                              252
                                  STW                               _p
                                  LDW                               _a
                                  POKE                              _p
                                  LDW                               _p
                                  ADDI                              1
                                  STW                               0xea
                                  LDW                               _b
                                  POKE                              0xea
                                  ForNextFarInc                     _c _next_0x033d 4           ; Main: for c=1 to 4 : p=(c LSL 8)+252 : poke p,a : poke p+1,b : next c

                                  LDI                               15
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER,15

                                  Return                                                        ; Main: return

_end_0x0371                       BRA                               _end_0x0371                 ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

gosubNumericLabel                 EQU     0x78cd
resetVideoFlags                   EQU     0x78aa
initClearFuncs                    EQU     0x78b6
clearVertBlinds                   EQU     0x79c3
clearCursorRow                    EQU     0x7ab6
printInit                         EQU     0x7aa0
printText                         EQU     0x79aa
printChar                         EQU     0x7ba7
newLineScroll                     EQU     0x7ca2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

