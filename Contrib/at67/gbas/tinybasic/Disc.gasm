_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_10                               EQU                               0x0212
_20                               EQU                               0x021e
_30                               EQU                               0x0229
_40                               EQU                               0x0240
_50                               EQU                               0x0257
_60                               EQU                               0x0267
_70                               EQU                               0x0276
_80                               EQU                               0x0286
_else_0x02d3                      EQU                               0x0295

; Global Variables
_x                                EQU                               0x0030
_y                                EQU                               0x0032
_u                                EQU                               0x0034
_v                                EQU                               0x0036
_w                                EQU                               0x0038

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

_10                               LDI                               80
                                  STW                               _x
                                  LDI                               60
                                  STW                               _y
                                  LDI                               45
                                  STW                               _u                          ; Main: x=80:y=60:u=45:'Radius

_20                               ClearVertBlinds                   
                                  LDI                               0
                                  STW                               _v
                                  STW                               _w                          ; Main: cls:v=0:w=v

_30                               LDW                               _x
                                  SUBW                              _u
                                  STW                               drawHLine_x1
                                  LDW                               _y
                                  SUBW                              _v
                                  STW                               drawHLine_y1
                                  LDW                               _x
                                  ADDW                              _u
                                  STW                               drawHLine_x2
                                  DrawHLine                                                     ; Main: hline x-u, y-v, x+u

_40                               LDW                               _x
                                  SUBW                              _u
                                  STW                               drawHLine_x1
                                  LDW                               _y
                                  ADDW                              _v
                                  STW                               drawHLine_y1
                                  LDW                               _x
                                  ADDW                              _u
                                  STW                               drawHLine_x2
                                  DrawHLine                                                     ; Main: hline x-u, y+v, x+u

_50                               LDW                               _w
                                  ADDW                              _v
                                  ADDW                              _v
                                  ADDI                              1
                                  STW                               _w
                                  LDW                               _v
                                  ADDI                              1
                                  STW                               _v                          ; Main: w=w+v+v+1:v=v+1

_60                               LDW                               _w
                                  JumpLT                            _70 0
                                  LDWI                              _30
                                  CALL                              giga_vAC                    ; Main: if w&<0 then goto 30

_70                               LDW                               _w
                                  SUBW                              _u
                                  SUBW                              _u
                                  ADDI                              1
                                  STW                               _w
                                  LDW                               _u
                                  SUBI                              1
                                  STW                               _u                          ; Main: w=w-u-u+1:u=u-1

_80                               LDW                               _u
                                  JumpGT                            _else_0x02d3 1
                                  LDWI                              _60
                                  CALL                              giga_vAC                    ; Main: if u&>0 then goto 60

_else_0x02d3                      BRA                               _else_0x02d3                ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

resetVideoFlags                   EQU     0x7ca0
initClearFuncs                    EQU     0x7cac
clearVertBlinds                   EQU     0x7cc3
drawHLine                         EQU     0x7da2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y8        EQU     register2
drawVLine_y2        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15


drawHLine           PUSH
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LDW     drawHLine_x2
                    STW     drawLine_tmp
                    LDW     drawHLine_x1
                    STW     drawHLine_x2
                    LDW     drawLine_tmp
                    STW     drawHLine_x1                    ; if x2 < x1 then swap x2 with x1
                    
drawHL_cont         LD      drawHLine_x1
                    ST      giga_sysArg4
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg5
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    SUBI    4
                    BLT     drawHL_loop1
                    
                    LD      fgbgColour + 1
                    ST      giga_sysArg0
                    ST      giga_sysArg1
                    ST      giga_sysArg2
                    ST      giga_sysArg3                    ; 4 pixels of fg colour
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    
                    LDW     drawHLine_x2        
                    SUBI    3
                    STW     drawHLine_x4                    ; 4 pixel chunks limit

drawHL_loop0        SYS     30
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      giga_sysArg4
                    ADDI    4
                    ST      giga_sysArg4
                    SUBW    drawHLine_x4
                    BLT     drawHL_loop0                    ; all 4 pixel chunks
                    
drawHL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg4
                    LD      giga_sysArg4
                    BEQ     drawHL_exit
                    SUBW    drawHLine_x2
                    BLE     drawHL_loop1                    ; remaining pixels
                    
drawHL_exit         POP
                    RET

