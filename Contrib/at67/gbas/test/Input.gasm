_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x79a2
textWorkArea                      EQU                               0x7ea0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_page_0x0300                      EQU                               0x0300
_page_0x0400                      EQU                               0x0400
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_page_0x09a0                      EQU                               0x09a0

; Global Variables
_a                                EQU                               0x0030
_d                                EQU                               0x0032
_b                                EQU                               0x0034
_c                                EQU                               0x0036
_dog                              EQU                               0x0038
_hours                            EQU                               0x003a
_minutes                          EQU                               0x003c
_seconds                          EQU                               0x003e
_e                                EQU                               0x0040
_f                                EQU                               0x0042
_t                                EQU                               0x0044
_cs                               EQU                               0x0046
_db                               EQU                               0x0048

; Local Variables

; Arrays
_arr_array                        EQU                               0x7df4
_arr_array                        DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings
_t1$                              EQU                               0x7ca0
_t1$                              DB                                4 'yes ' 0
_t2$                              EQU                               0x7ba0
_t2$                              DB                                3 'no ' 0
_test$                            EQU                               0x7aa0
_test$                            DB                                16 'cat dog furries ' 0
_cat$                             EQU                               0x78a0
_cat$                             DB                                3 'cat' 0

; Constant Strings
_str_0x7dec                       EQU                               0x7dec
_str_0x7dec                       DB                                6 'const ' 0
_str_0x7de6                       EQU                               0x7de6
_str_0x7de6                       DB                                4 'yes ' 0
_str_0x7de1                       EQU                               0x7de1
_str_0x7de1                       DB                                3 'no ' 0
_str_0x7dcf                       EQU                               0x7dcf
_str_0x7dcf                       DB                                16 'cat dog furries ' 0
_str_0x7dc7                       EQU                               0x7dc7
_str_0x7dc7                       DB                                6 'whoop ' 0
_str_0x7dc3                       EQU                               0x7dc3
_str_0x7dc3                       DB                                2 '1 ' 0
_str_0x7dbf                       EQU                               0x7dbf
_str_0x7dbf                       DB                                2 '2 ' 0
_str_0x7dbc                       EQU                               0x7dbc
_str_0x7dbc                       DB                                1 ' ' 0
_str_0x79c9                       EQU                               0x79c9
_str_0x79c9                       DB                                53 'aioujehfiadsuhgfaissuhfgdiughafpiusfghpdsiufghspi;udf' 0
_str_0x7db7                       EQU                               0x7db7
_str_0x7db7                       DB                                3 'cat' 0
_str_0x7da7                       EQU                               0x7da7
_str_0x7da7                       DB                                14 'Testing INPUT:' 0
_str_0x79bc                       EQU                               0x79bc
_str_0x79bc                       DB                                11 'Cats Name ?' 0
_str_0x7da2                       EQU                               0x7da2
_str_0x7da2                       DB                                3 'H ?' 0
_str_0x79b7                       EQU                               0x79b7
_str_0x79b7                       DB                                3 'M ?' 0
_str_0x79b2                       EQU                               0x79b2
_str_0x79b2                       DB                                3 'S ?' 0
_str_0x77d7                       EQU                               0x77d7
_str_0x77d7                       DB                                7 'Testing' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0x77f2                 EQU                               0x77f2
_inputVars_0x77f2                 DW                                0x78a0 0x003a 0x003c 0x003e 
_inputStrs_0x77ea                 EQU                               0x77ea
_inputStrs_0x77ea                 DW                                0x79bc 0x7da2 0x79b7 0x79b2 
_inputTypes_0x77e0                EQU                               0x77e0
_inputTypes_0x77e0                DW                                0x2145 0x0343 0x0343 0x0343 0x0000 
_input_0x77fa                     EQU                               0x77fa
_input_0x77fa                     DW                                0x77f2 0x77ea 0x77e0 

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  ClearVertBlinds                                               ; Main: cls

                                  LDWI                              0x7de6
                                  STW                               strSrcAddr
                                  LDWI                              0x7ca0
                                  StringCopy                                                    ; Main: t1$ = "yes "

                                  LDWI                              0x7de1
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba0
                                  StringCopy                                                    ; Main: t2$ = "no "

                                  LDWI                              0x7dcf
                                  STW                               strSrcAddr
                                  LDWI                              0x7ca0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7fa0
                                  StringConcat                      
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba0
                                  STW                               strSrcAddr2
                                  LDWI                              0x7fa0
                                  StringConcat                      
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7dc7
                                  STW                               strSrcAddr2
                                  LDWI                              0x7fa0
                                  StringConcat                      
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7dc3
                                  STW                               strSrcAddr2
                                  LDWI                              0x7fa0
                                  StringConcat                      
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7dbf
                                  STW                               strSrcAddr2
                                  LDWI                              0x7fa0
                                  StringConcat                      
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7dec
                                  STW                               strSrcAddr2
                                  LDWI                              0x7fa0
                                  StringConcat                      
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; Main: test$ = "cat dog furries " + t1$ + t2$ + "whoop " + "1 " + "2 " + cs$

                                  PrintString                       _test$
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7aa0
                                  PEEK                              
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print test$;" ";len(test$)

                                  LDI                               1
                                  STW                               _a                          ; Main: a = 1

                                  LDI                               48
                                  STW                               _d                          ; Main: d = @a

                                  LDI                               1
                                  ST                                _a + 1
                                  LDI                               0
                                  ST                                _a                          ; Main: a.hi = 1 : a.lo = 0

                                  LD                                _a + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  ADDI                              1
                                  STW                               _b                          ; Main: b = a.hi + 1

                                  LDI                               1
                                  ST                                _c + 1                      ; Main: c.hi = 1

                                  LDWI                              6368
                                  STW                               register0
                                  LD                                _a
                                  POKE                              register0                   ; Main: poke &h18E0, a.lo

                                  LD                                _b + 1
                                  STW                               mathX
                                  LDI                               3
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               0xe8
                                  LD                                _a
                                  SUBW                              0xe8
                                  ADDI                              1
                                  SUBW                              _a
                                  STW                               0xea
                                  LDWI                              6368
                                  STW                               register0
                                  LDW                               0xea
                                  DOKE                              register0                   ; Main: doke &h18E0, a.lo - b.hi * 3 + 1 - a

                                  LDI                               0
                                  STW                               _dog                        ; Main: dog=0

                                  LDWI                              0x7db7
                                  STW                               strSrcAddr
                                  LDWI                              0x78a0
                                  StringCopy                                                    ; Main: cat$="cat"

                                  PrintString                       _str_0x7da7
                                  LDWI                              0x77fa
                                  Input                                                         ; Main: input "Testing INPUT:", cat$,"Cats Name ?"32;, hours,"H ?"2;, minutes,"M ?"2;, seconds,"S ?"2;

                                  NewLine                                                       ; Main: print

                                  PrintString                       _cat$
                                  PrintString                       _str_0x7dbc
                                  LDW                               _hours
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDW                               _minutes
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDW                               _seconds
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print cat$;" ";hours;" ";minutes;" ";seconds

                                  LDI                               2
                                  RandMod                           
                                  ADDI                              2
                                  STW                               0xec
                                  LDWI                              0x78a0
                                  PEEK                              
                                  ADDW                              0xec
                                  ADDI                              27
                                  STW                               _a                          ; Main: a = rnd(len(dog)) + len(dog) + len(cat$) + 27

                                  LDI                               53
                                  ADDI                              2
                                  STW                               0xea
                                  LDI                               65
                                  STW                               strChr
                                  LDWI                              0x7ea0
                                  StringChr                         
                                  LDWI                              0x7ea0
                                  PEEK                              
                                  ADDW                              0xea
                                  STW                               0xec
                                  LDI                               2
                                  ST                                textLen
                                  LDWI                              0x00ff
                                  STW                               textHex
                                  LDWI                              0x7fa0
                                  StringHex                         
                                  LDWI                              0x7fa0
                                  PEEK                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  ADDW                              0xec
                                  STW                               0xee
                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0xfde8
                                  STW                               textHex
                                  LDWI                              0x7ea0
                                  StringHex                         
                                  LDWI                              0x7ea0
                                  PEEK                              
                                  ADDW                              0xee
                                  STW                               _b                          ; Main: b = len(big$) + len(a) + len(chr$(65)) + len(hex$(255, 2)) + len(hex$(65000, 4))

                                  NewLine                                                       ; Main: print

                                  LD                                _a
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LD                                _b + 1
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDW                               _b
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print a.lo;" ";b.hi;" ";b

                                  LDI                               64
                                  ADDW                              _d
                                  ADDI                              1
                                  STW                               _e                          ; Main: e = @e + d + 1

                                  LDWI                              31177
                                  STW                               _f                          ; Main: f = @big$

                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0x0034
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0x0036
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               _d
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               _e
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               _f
                                  STW                               textHex
                                  PrintHex                          
                                  NewLine                                                       ; Main: print hex$(@b, 4);" ";hex$(@c, 4);" ";hex$(d, 4);" ";hex$(e, 4);" ";hex$(f, 4)

                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0x7df4
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  LDWI                              0x78a0
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0x003a
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0x003c
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDI                               4
                                  ST                                textLen
                                  LDWI                              0x003e
                                  STW                               textHex
                                  PrintHex                          
                                  NewLine                                                       ; Main: print hex$(@arr, 4);" ";hex$(@cat$, 4);" ";hex$(@hours, 4);" ";hex$(@minutes, 4);" ";hex$(@seconds, 4)

                                  LDWI                              0x7df4
                                  STW                               memAddr
                                  LDI                               52
                                  POKE                              memAddr                     ; Main: arr(0).lo = &h34

                                  LDI                               18
                                  STW                               memValue
                                  LDWI                              0x7df4
                                  STW                               memAddr
                                  LDW                               memValue
                                  INC                               memAddr
                                  POKE                              memAddr                     ; Main: arr(0).hi = &h12

                                  LDWI                              0x7df4
                                  DEEK                              
                                  STW                               0xe8
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xe8
                                  STW                               textHex
                                  PrintHex                          
                                  NewLine                                                       ; Main: print hex$(arr(0), 4)

                                  LDWI                              0x7df6
                                  STW                               memAddr
                                  LD                                _f
                                  POKE                              memAddr                     ; Main: arr(1).lo = f.lo

                                  LD                                _f + 1
                                  STW                               memValue
                                  LDWI                              0x7df6
                                  STW                               memAddr
                                  LDW                               memValue
                                  INC                               memAddr
                                  POKE                              memAddr                     ; Main: arr(1).hi = f.hi

                                  LDWI                              0x7df6
                                  DEEK                              
                                  STW                               0xe8
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xe8
                                  STW                               textHex
                                  PrintHex                          
                                  NewLine                                                       ; Main: print hex$(arr(1), 4)

                                  LDWI                              0x7df4 + 1
                                  PEEK                              
                                  STW                               0xe8
                                  LDI                               2
                                  ST                                textLen
                                  LDW                               0xe8
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7df4
                                  PEEK                              
                                  STW                               0xec
                                  LDI                               2
                                  ST                                textLen
                                  LDW                               0xec
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7df6 + 1
                                  PEEK                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  STW                               0xe8
                                  LDI                               2
                                  ST                                textLen
                                  LDW                               0xe8
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7df6
                                  PEEK                              
                                  STW                               0xec
                                  LDI                               2
                                  ST                                textLen
                                  LDW                               0xec
                                  STW                               textHex
                                  PrintHex                          
                                  NewLine                                                       ; Main: print hex$(arr(0).hi, 2);" ";hex$(arr(0).lo, 2);" ";hex$(arr(1).hi, 2);" ";hex$(arr(1).lo, 2)

                                  LDWI                              0x7df4
                                  DEEK                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7df6
                                  DEEK                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7df4
                                  DEEK                              
                                  STW                               0xec
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xec
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x7df6
                                  DEEK                              
                                  STW                               0xe8
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xe8
                                  STW                               textHex
                                  PrintHex                          
                                  NewLine                                                       ; Main: print arr(0);" ";arr(1);" ";hex$(arr(0), 4);" ";hex$(arr(1), 4)

                                  Rand                              
                                  ANDI                              63
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDI                               53
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LD                                0x00
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDW                               0x00
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  PrintInt16                        0x79c9
                                  NewLine                                                       ; Main: print rnd(0) AND 63;" ";len(big$);" ";peek(0);" ";deek(0);" ";@big$

                                  LDI                               7
                                  STW                               _t                          ; Main: t = len("Testing")

                                  LDI                               53
                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDWI                              0x78a0
                                  PEEK                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDI                               7
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDW                               _t
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print len(big$);" ";len(cat$);" ";len("Testing");" ";t

                                  LDWI                              985
                                  STW                               _cs                         ; Main: cs = cos(10)*1000

                                  LDWI                              537
                                  STW                               _db                         ; Main: db = 231.5333333333 * 2.32

                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  PrintInt16                        0x0345
                                  PrintString                       _str_0x7dbc
                                  LDW                               _cs
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  LDW                               _db
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dbc
                                  PrintInt16                        0x0004
                                  NewLine                                                       ; Main: print sin(56.8333333)*1000;" ";cs;" ";db;" ";1.5333333333 * 2.32

                                  HALT                                                          ; Main: end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

loadRegs                          EQU     0x6ca2
saveRegs                          EQU     0x68e1
multiply16bit                     EQU     0x77a3
divide16bit                       EQU     0x72a8
rand16bit                         EQU     0x72a0
randMod16bit                      EQU     0x67c3
resetVideoFlags                   EQU     0x68a0
initClearFuncs                    EQU     0x6da5
clearVertBlinds                   EQU     0x6bc3
clearCursorRow                    EQU     0x6fb6
input                             EQU     0x6aa1
inputExt1                         EQU     0x74a6
inputExt2                         EQU     0x69d3
inputCursor                       EQU     0x68c3
inputKeys                         EQU     0x75a4
inputIntVar                       EQU     0x67d6
inputStrVar                       EQU     0x68ac
inputReturn                       EQU     0x6dbc
inputDelete                       EQU     0x6eb9
inputPrint                        EQU     0x69af
inputNewline                      EQU     0x67ea
printInit                         EQU     0x6fa0
printText                         EQU     0x6ea0
printDigit                        EQU     0x6ba1
printInt16                        EQU     0x71ae
printChr                          EQU     0x71a1
printChar                         EQU     0x73a7
printHex                          EQU     0x67b1
newLineScroll                     EQU     0x76a2
integerStr                        EQU     0x6cc0
stringChr                         EQU     0x70a0
stringHex                         EQU     0x6ac5
stringCopy                        EQU     0x69a2
stringAdd                         EQU     0x70b1
stringConcat                      EQU     0x67a9
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    
                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


                    ; hard coded to load register8 to register15
saveRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

saveRegs_loop       LDW     regsAddr
                    DEEK
                    DOKE    regsWork
                    INC     regsWork
                    INC     regsWork
                    INC     regsAddr
                    INC     regsAddr
                    LDW     regsAddr
                    SUBI    register15
                    BLE     saveRegs_loop
                    RET



                    ; hard coded to save register8 to register15
loadRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

loadRegs_loop       LDW     regsWork
                    DEEK
                    DOKE    regsAddr
                    INC     regsAddr
                    INC     regsAddr
                    INC     regsWork
                    INC     regsWork
                    LDW     regsAddr
                    SUBI    register15
                    BLE     loadRegs_loop
                    RET



                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     inpCursXYBak
                    STW     inpPrnXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     127
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; draws cursor
inputCursor         PUSH
                    LDW     textChr
                    XORI    127
                    BNE     inputC_skip         ; don't flash cursor if char != 127
                    LD      giga_ledState
                    ANDI    2
                    BNE     inputC_skip         ; use ledState as a hack timer
                    LDI     32
                    STW     textChr             ; alternate between 32 and 127
                    
inputC_skip         LDW     inpCursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      inpCursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     inpCursXYOfs        ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     32
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    5                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     inpCursXYOfs        ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     inpCursXYOfs        ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     inpPrnXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDW     inpCursXYBak        ; new cursor position
                    ADDW    inpCursXYOfs
                    STW     inpCursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


                    ; print textLen hex digits in textHex, (textStr, textHex, textLen = strAddr, strHex, strLen in string::stringHex)
printHex            PUSH
                    LDWI    textWorkArea
                    STW     strAddr
                    LDWI    stringHex
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; create a char string, (parameter in strChr)
stringChr           LDI     1
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strChr
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; creates a hex string at strAddr of strLen digits from strHex
stringHex           LDWI    SYS_LSRW4_50                        ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LDW     strAddr
                    STW     strTmpAddr                          ; store string start
                    LD      strLen
                    POKE    strAddr                             ; length byte
                    ADDI    1
                    ADDW    strAddr
                    STW     strAddr                             ; offset by length byte and zero delimeter
                    LDI     0
                    POKE    strAddr                             ; zero delimiter
                    
stringH_loop        LDW     strAddr
                    SUBI    1
                    STW     strAddr                             ; start at LSD and finish at MSD
                    SUBW    strTmpAddr
                    BEQ     stringH_done
                    LD      strHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     stringH_skip
                    ADDI    7
                    
stringH_skip        ADDI    0x3A
                    POKE    strAddr
                    LDW     strHex
                    SYS     50
                    STW     strHex                              ; next nibble
                    BRA     stringH_loop
                    
stringH_done        RET


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET



                    ; adds two strings together, (internal sub)
stringAdd           LDW     strDstAddr
                    STW     strTmpAddr
                    XORW    strSrcAddr
                    BNE     stringA_diff
                    LDW     strDstAddr                          ; if src = dst then skip first copy
                    PEEK
                    STW     strDstLen
                    ADDW    strDstAddr
                    STW     strDstAddr                          ; skip length byte and point to end of dst
                    INC     strDstAddr
                    BRA     stringA_copy1

stringA_diff        INC     strSrcAddr
                    INC     strDstAddr                          ; skip lengths
                    LDI     0
                    STW     strDstLen
                    
stringA_copy0       LDW     strSrcAddr                          ; assumes strSrcAddr is a valid string <= 94 length
                    PEEK
                    BEQ     stringA_copy1
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    INC     strDstLen
                    BRA     stringA_copy0
                    
stringA_copy1       LDW     strDstLen
                    SUBI    94
                    BGE     stringA_exit                        ; maximum destination length reached
                    INC     strSrcAddr2                         ; skips length first time
                    LDW     strSrcAddr2
                    PEEK
                    BEQ     stringA_exit                        ; copy char until terminating char
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    INC     strDstLen
                    BRA     stringA_copy1

stringA_exit        LDW     strDstLen
                    POKE    strTmpAddr                          ; save concatenated string length
                    LDI     0
                    POKE    strDstAddr                          ; terminating zero
                    RET


                    ; concatenates multiple strings together
stringConcat        PUSH
                    LDWI    stringAdd
                    CALL    giga_vAC
                    POP
                    RET

