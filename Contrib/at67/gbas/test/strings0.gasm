_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_page_0x0300                      EQU                               0x0300
_page_0x0400                      EQU                               0x0400
_next_0x0426                      EQU                               0x0430
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600

; Global Variables
_j                                EQU                               0x0030
_a                                EQU                               0x0032
_b                                EQU                               0x0034
_c                                EQU                               0x0036
_d                                EQU                               0x0038
_e                                EQU                               0x003a
_f                                EQU                               0x003c
_g                                EQU                               0x003e
_h                                EQU                               0x0040
_i                                EQU                               0x0042
_zzz                              EQU                               0x0044

; Local Variables

; Arrays
_dog_array                        EQU                               0x7cf3
_dog_array                        DW                                0x7da0 0x0003 0xb36b 0xd903 

; Strings
_yup$                             EQU                               0x7da0
_yup$                             DB                                3 'dog' 0
_b$                               EQU                               0x7ba0
_b$                               DB                                16 'hello test world' 0
_num0$                            EQU                               0x7aa0
_num0$                            DB                                5 '-1234' 0
_num1$                            EQU                               0x79a0
_num1$                            DB                                4 '1234' 0
_c$                               EQU                               0x78a0
_c$                               DB                                0 '' 0
_d$                               EQU                               0x77a0
_d$                               DB                                0 '' 0
_e$                               EQU                               0x76a0
_e$                               DB                                0 '' 0
_x$                               EQU                               0x75a0
_x$                               DB                                22 'YOUR TEXT BACKWARDS IS' 0

; Constant Strings
_str_0x7cfb                       EQU                               0x7cfb
_str_0x7cfb                       DB                                3 'dog' 0
_str_0x7ce1                       EQU                               0x7ce1
_str_0x7ce1                       DB                                16 'hello test world' 0
_str_0x7cda                       EQU                               0x7cda
_str_0x7cda                       DB                                5 '-1234' 0
_str_0x7cd4                       EQU                               0x7cd4
_str_0x7cd4                       DB                                4 '1234' 0
_str_0x7cd1                       EQU                               0x7cd1
_str_0x7cd1                       DB                                1 ' ' 0
_str_0x7ccc                       EQU                               0x7ccc
_str_0x7ccc                       DB                                3 ' &h' 0
_str_0x7cc8                       EQU                               0x7cc8
_str_0x7cc8                       DB                                2 '  ' 0
_str_0x7cb0                       EQU                               0x7cb0
_str_0x7cb0                       DB                                22 'YOUR TEXT BACKWARDS IS' 0
_str_0x7cab                       EQU                               0x7cab
_str_0x7cab                       DB                                3 'yes' 0
_str_0x7ca4                       EQU                               0x7ca4
_str_0x7ca4                       DB                                5 'world' 0

; Data

; Time

; Define Bytes

; Define Words
def_words_0x08a0                  EQU                               0x08a0
def_words_0x08a0                  DW                                1011 177 

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  LDWI                              0x7cfb
                                  STW                               strSrcAddr
                                  LDWI                              0x7da0
                                  StringCopy                                                    ; Main: yup$ = "dog"

                                  ClearVertBlinds                                               ; Main: cls

                                  LDWI                              0x7ce1
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba0
                                  StringCopy                                                    ; Main: b$="hello test world"

                                  LDWI                              0x7cda
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; Main: num0$ = "-1234"

                                  LDWI                              0x7cd4
                                  STW                               strSrcAddr
                                  LDWI                              0x79a0
                                  StringCopy                                                    ; Main: num1$ = "1234"

                                  LDWI                              -4532
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x7ce2
                                  IntegerStr                        
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x7aa1
                                  IntegerStr                        
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7ccc
                                  LDWI                              4660
                                  STW                               0xee
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xee
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7ccc
                                  LDWI                              -1
                                  STW                               0xea
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xea
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7ccc
                                  LDI                               240
                                  STW                               0xee
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xee
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7ccc
                                  LDWI                              511
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  STW                               0xea
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xea
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x79a1
                                  IntegerStr                        
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print val("-4532");" ";val(a$);" ";val(num0$);" &h";hex$(val("0x1234"), 4);" &h";hex$(val("&hFFFF"), 4);" &h";hex$(val("&b0000000011110000"), 4);" &h";hex$(val("&o777"), 4);" ";val(num1$)

                                  LDWI                              0x7ba0
                                  STW                               strSrcAddr
                                  LDI                               5
                                  STW                               strDstLen
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x78a0
                                  StringCopy                                                    ; Main: c$=left$(b$, 5)

                                  LDWI                              0x7ba0
                                  STW                               strSrcAddr
                                  LDI                               5
                                  STW                               strDstLen
                                  LDWI                              0x7fa0
                                  StringRight                       
                                  LDWI                              0x7fa0
                                  STW                               strSrcAddr
                                  LDWI                              0x77a0
                                  StringCopy                                                    ; Main: d$ = right$ (b$,5)

                                  LDWI                              0x7ba0
                                  STW                               strSrcAddr
                                  LDI                               4
                                  STW                               strDstLen
                                  LDI                               6
                                  STW                               strOffset
                                  LDWI                              0x7ea0
                                  StringMid                         
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x76a0
                                  StringCopy                                                    ; Main: e$=mid$(b$, 6, 4)

                                  PrintString                       _str_0x7ce1
                                  PrintString                       _str_0x7cd1
                                  PrintString                       _b$
                                  PrintString                       _str_0x7cc8
                                  PrintString                       _c$
                                  PrintString                       _str_0x7cd1
                                  PrintString                       _d$
                                  PrintString                       _str_0x7cd1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  PrintString                       _e$
                                  NewLine                                                       ; Main: print a$;" ";b$;"  ";c$;" ";d$;" ";e$

                                  LDWI                              0x7cb0
                                  STW                               strSrcAddr
                                  LDWI                              0x75a0
                                  StringCopy                                                    ; Main: x$ = "YOUR TEXT BACKWARDS IS"

                                  LDWI                              0x75a0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               0xe8
                                  LDWI                              0x75a0
                                  PEEK                              
                                  SUBI                              1
                                  STW                               _j                          ; Main: for j = len(x$)-1 downto 0

_next_0x0426                      LDWI                              0x75a0
                                  STW                               textStr
                                  LDI                               1
                                  STW                               textLen
                                  LDW                               _j
                                  STW                               textOfs
                                  PrintAcMid                                                    ; Main: print mid$(x$, j, 1);

                                  ForNextFarDecZero                 _j _next_0x0426             ; Main: next j

                                  LDI                               0
                                  STW                               _a                          ; Main: a = strcmp("dog", "dog")

                                  LDWI                              -1
                                  STW                               _b                          ; Main: b = strcmp("dog", "Dog")

                                  LDWI                              -1
                                  STW                               _c                          ; Main: c = strcmp("dog", "dog1")

                                  LDWI                              0x7cab
                                  STW                               strSrcAddr
                                  LDWI                              0x7ce1
                                  StringCmp                         
                                  SUBI                              1
                                  STW                               _d                          ; Main: d = strcmp("yes", a$)

                                  LDWI                              0x7ce1
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba0
                                  StringCmp                         
                                  SUBI                              1
                                  STW                               _e                          ; Main: e = strcmp(a$, b$)

                                  NewLine                                                       ; Main: print

                                  LDI                               100
                                  STW                               _f                          ; Main: f = asc("dog")

                                  LDI                               0x05
                                  STW                               _g                          ; Main: g = abs(-5)

                                  LDI                               50
                                  STW                               _h                          ; Main: h = @a

                                  LDI                               2
                                  STW                               _i                          ; Main: i = len(a)

                                  LDWI                              -4
                                  STW                               _zzz                        ; Main: zzz = -4

                                  LDW                               _a
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _b
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _c
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _d
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _e
                                  PrintAcInt16                      
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  PrintString                       _str_0x7cd1
                                  NewLine                                                       ; Main: print a;" ";b;" ";c;" ";d;" ";e;" "

                                  LDI                               0x03
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _zzz
                                  Absolute                          
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x7ca4
                                  STW                               strSrcAddr
                                  LDWI                              0x77a0
                                  StringCmp                         
                                  SUBI                              1
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDI                               100
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _f
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDW                               _g
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print abs(-3);" ";abs(zzz);" ";strcmp("world", d$);" ";asc("dog");" ";f;" ";g

                                  LDI                               2
                                  ST                                textLen
                                  LDW                               _h
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7cd1
                                  LDW                               _i
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDI                               2
                                  ST                                textLen
                                  LDWI                              0x0032
                                  STW                               textHex
                                  PrintHex                          
                                  PrintString                       _str_0x7cd1
                                  LDI                               2
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print hex$(h, 2);" ";i;" ";hex$(@a, 2);" ";len(a)

                                  LDWI                              0x7cf3
                                  DEEK                              
                                  STW                               0xe8
                                  LDI                               4
                                  ST                                textLen
                                  LDW                               0xe8
                                  STW                               textHex
                                  PrintHex                          
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x7cf5
                                  DEEK                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x7cf7
                                  DEEK                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x7cf9
                                  DEEK                              
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print hex$(dog(0), 4);" ";dog(1);" ";dog(2);" ";dog(3)

                                  LDWI                              0x08a0
                                  DEEK                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7cd1
                                  LDWI                              0x08a2
                                  DEEK                              
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print deek(&h08A0);" ";deek(&h08A2)

                                  PrintString                       _str_0x7ce1
                                  NewLine                                                       ; Main: print a$

                                  PrintString                       _b$
                                  NewLine                                                       ; Main: print b$

                                  PrintString                       _c$
                                  PrintString                       _str_0x7cd1
                                  PrintString                       _d$
                                  PrintString                       _str_0x7cd1
                                  PrintString                       _e$
                                  NewLine                                                       ; Main: print c$;" ";d$;" ";e$

                                  HALT                                                          ; Main: end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

absolute                          EQU     0x6da9
resetVideoFlags                   EQU     0x6ea0
initClearFuncs                    EQU     0x6eac
clearVertBlinds                   EQU     0x6fc3
clearCursorRow                    EQU     0x71b6
printInit                         EQU     0x71a0
printText                         EQU     0x70a7
printMid                          EQU     0x6aa3
printDigit                        EQU     0x6fa1
printInt16                        EQU     0x72ae
printChar                         EQU     0x73a7
printHex                          EQU     0x6db3
newLineScroll                     EQU     0x74a2
integerStr                        EQU     0x70c0
stringHex                         EQU     0x6dc5
stringCopy                        EQU     0x72a1
stringCmp                         EQU     0x6cc5
stringLeft                        EQU     0x6acb
stringRight                       EQU     0x6bc7
stringMid                         EQU     0x6ec3
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            LDW     mathX
                    BGE     abs_exit
                    LDI     0
                    SUBW    mathX
abs_exit            RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints sub string pointed to by textStr
printMid            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr
                    ADDW    textOfs
                    STW     textStr                         ; textStr += textOfs
                    LD      textLen
                    BEQ     printM_exit
    
printM_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printM_char
printM_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; print textLen hex digits in textHex, (textStr, textHex, textLen = strAddr, strHex, strLen in string::stringHex)
printHex            PUSH
                    LDWI    textWorkArea
                    STW     strAddr
                    LDWI    stringHex
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; creates a hex string at strAddr of strLen digits from strHex
stringHex           LDWI    SYS_LSRW4_50                        ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LDW     strAddr
                    STW     strTmpAddr                          ; store string start
                    LD      strLen
                    POKE    strAddr                             ; length byte
                    ADDI    1
                    ADDW    strAddr
                    STW     strAddr                             ; offset by length byte and zero delimeter
                    LDI     0
                    POKE    strAddr                             ; zero delimiter
                    
stringH_loop        LDW     strAddr
                    SUBI    1
                    STW     strAddr                             ; start at LSD and finish at MSD
                    SUBW    strTmpAddr
                    BEQ     stringH_done
                    LD      strHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     stringH_skip
                    ADDI    7
                    
stringH_skip        ADDI    0x3A
                    POKE    strAddr
                    LDW     strHex
                    SYS     50
                    STW     strHex                              ; next nibble
                    BRA     stringH_loop
                    
stringH_done        RET


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET


                    ; compares two strings: returns 0 for smaller, 1 for equal and 2 for larger
stringCmp           LDW     strSrcAddr
                    PEEK
                    STW     strSrcLen                           ; save str length
                    LDW     strSrcAddr2
                    PEEK
                    STW     strSrcLen2                          ; save str length
                    INC     strSrcAddr
                    INC     strSrcAddr2                         ; skip lengths
                    
stringC_loop        LDW     strSrcAddr
                    PEEK
                    BEQ     stringC_equal                       ; this assumes your strings are valid, (i.e. valid length and terminating bytes)
                    STW     strChr
                    LDW     strSrcAddr2
                    PEEK
                    SUBW    strChr
                    BLT     stringC_larger
                    BGT     stringC_smaller
                    INC     strSrcAddr
                    INC     strSrcAddr2
                    BRA     stringC_loop

stringC_smaller     LDI     0
                    RET
                    
stringC_equal       LDW     strSrcLen
                    SUBW    strSrcLen2
                    BLT     stringC_smaller
                    BGT     stringC_larger                      ; if strings are equal, choose based on length
                    LDI     1
                    RET
                    
stringC_larger      LDI     2
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strDstLen
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from right hand side of source string to destination string
stringRight         LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringR_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strDstLen
                    BGE     stringR_skip                        ; length <= srcLength
                    LD      strSrcLen
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    LDI     0
                    
stringR_skip        ADDW    strSrcAddr
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address

stringR_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringR_loop                        ; until finished
                    
stringR_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies length sub string from source offset to destination string
stringMid           LD      strDstLen
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringM_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strOffset                           
                    SUBW    strDstLen
                    BGE     stringM_skip                        ; length + offset <= srcLength
                    LD      strSrcLen
                    SUBW    strOffset
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    
stringM_skip        LDW     strSrcAddr
                    ADDW    strOffset
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strDstLen
                    STW     strFinish                           ; end source address

stringM_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringM_loop                        ; until finished
                    
stringM_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET

