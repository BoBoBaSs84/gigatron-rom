_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_page_0x0300                      EQU                               0x0300
_endif_0x037d                     EQU                               0x0363
_page_0x0400                      EQU                               0x0400
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_repeat_0x064e                    EQU                               0x0631
_else_0x0670                      EQU                               0x0649

; Global Variables
_a                                EQU                               0x0030
_b                                EQU                               0x0032
_c                                EQU                               0x0034
_d                                EQU                               0x0036
_e                                EQU                               0x0038
_f                                EQU                               0x003a
_g                                EQU                               0x003c
_h                                EQU                               0x003e
_i                                EQU                               0x0040
_x                                EQU                               0x0042
_y                                EQU                               0x0044
_r                                EQU                               0x0046

; Local Variables

; Arrays

; Strings

; Constant Strings
_str_0x7dfd                       EQU                               0x7dfd
_str_0x7dfd                       DB                                1 ' ' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  ClearVertBlinds                                               ; Main: cls

                                  LDI                               3
                                  STW                               _a                          ; Main: a = 3

                                  LDI                               3
                                  STW                               _b                          ; Main: b = 3

                                  LDI                               3
                                  STW                               _c                          ; Main: c = 3

                                  LDW                               _a
                                  STW                               mathX
                                  LDW                               _b
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  STW                               mathX
                                  LDW                               _c
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  STW                               _d                          ; Main: d = a**b**c

                                  LDI                               2
                                  STW                               _e                          ; Main: e = 2

                                  LDI                               7
                                  STW                               _f                          ; Main: f = 7

                                  LDWI                              -3
                                  STW                               _a                          ; Main: a = -3

                                  LDWI                              2000
                                  STW                               _b                          ; Main: b = 2000

                                  LDWI                              -19000
                                  STW                               _c                          ; Main: c = -19000

                                  LDI                               0
                                  STW                               _d                          ; Main: d = 0

                                  LDW                               _a
                                  Absolute                          
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _a
                                  Sign                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _b
                                  Absolute                          
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _b
                                  Sign                              
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _c
                                  Absolute                          
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _c
                                  Sign                              
                                  PrintAcInt16                      
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  PrintString                       _str_0x7dfd
                                  LDW                               _d
                                  Absolute                          
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _d
                                  Sign                              
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print abs(a);" ";sgn(a);" ";abs(b);" ";sgn(b);" ";abs(c);" ";sgn(c);" ";abs(d);" ";sgn(d)

                                  LDW                               _c
                                  Sign                              
                                  XORI                              1
                                  JumpEQ                            _endif_0x037d 0             ; Main: if sgn(c) &= 1

                                  LDW                               _c
                                  Sign                              
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print sgn(c)

_endif_0x037d                     LDW                               _a
                                  STW                               mathX
                                  LDW                               _b
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  PrintInt16                        0x0000
                                  PrintString                       _str_0x7dfd
                                  PrintInt16                        0x0001
                                  PrintString                       _str_0x7dfd
                                  PrintInt16                        0x0001
                                  PrintString                       _str_0x7dfd
                                  LDW                               _a
                                  STW                               mathX
                                  LDI                               1
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _a
                                  STW                               mathX
                                  LDI                               2
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  PrintString                       _str_0x7dfd
                                  LDW                               _a
                                  STW                               mathX
                                  LDW                               _c
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _d
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print a**b;" ";0**a;" ";1**b;" ";a**0;" ";a**1;" ";a**2;" ";a**c;" ";d

                                  LDW                               _e
                                  STW                               mathX
                                  LDW                               _f
                                  STW                               mathY
                                  LDWI                              power16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print e**f

                                  LDWI                              -6400
                                  STW                               _g                          ; Main: g = -6400

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn1bit                 
                                  STW                               _h                          ; Main: h = g ASR 1

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  STW                               _i                          ; Main: i = g LSR 1

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn2bit                 
                                  STW                               _h                          ; Main: h = g ASR 2

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  STW                               _i                          ; Main: i = g LSR 2

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn3bit                 
                                  STW                               _h                          ; Main: h = g ASR 3

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight3bit                    
                                  STW                               _i                          ; Main: i = g LSR 3

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn4bit                 
                                  STW                               _h                          ; Main: h = g ASR 4

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               _i                          ; Main: i = g LSR 4

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn5bit                 
                                  STW                               _h                          ; Main: h = g ASR 5

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight5bit                    
                                  STW                               _i                          ; Main: i = g LSR 5

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn6bit                 
                                  STW                               _h                          ; Main: h = g ASR 6

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight6bit                    
                                  STW                               _i                          ; Main: i = g LSR 6

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn7bit                 
                                  STW                               _h                          ; Main: h = g ASR 7

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRight7bit                    
                                  STW                               _i                          ; Main: i = g LSR 7

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _g
                                  STW                               mathShift
                                  ShiftRightSgn8bit                 
                                  STW                               _h                          ; Main: h = g ASR 8

                                  LD                                _g + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  STW                               _i                          ; Main: i = g LSR 8

                                  LDW                               _h
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dfd
                                  LDW                               _i
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print h;" ";i

                                  LDW                               _e
                                  STW                               _x                          ; Main: x = e

                                  LDW                               _f
                                  STW                               _y                          ; Main: y = f

                                  LDI                               1
                                  STW                               _r                          ; Main: r = 1

_repeat_0x064e                    LDW                               _y
                                  ANDI                              1
                                  XORI                              0
                                  BEQ                               _else_0x0670
                                  LDW                               _r
                                  STW                               mathX
                                  LDW                               _x
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               _r                          ; Main: if (y AND 1) &&<> 0 then r = r * x

_else_0x0670                      LDW                               _x
                                  STW                               mathX
                                  LDW                               _x
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               _x                          ; Main: x = x * x

                                  LDW                               _y
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  STW                               _y                          ; Main: y = y LSR 1

                                  LDW                               _y
                                  XORI                              0
                                  BNE                               _repeat_0x064e              ; Main: until y &&= 0

                                  LDW                               _r
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print r

                                  HALT                                                          ; Main: end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

absolute                          EQU     0x77a4
sign                              EQU     0x73d6
power16bit                        EQU     0x78c6
power16bitExt                     EQU     0x76ce
multiply16bit                     EQU     0x77cb
shiftRight1bit                    EQU     0x76a7
shiftRight2bit                    EQU     0x74a4
shiftRight3bit                    EQU     0x73cc
shiftRight4bit                    EQU     0x73c2
shiftRight5bit                    EQU     0x73b8
shiftRight6bit                    EQU     0x73ae
shiftRight7bit                    EQU     0x73a4
shiftRightSgn1bit                 EQU     0x74c7
shiftRightSgn2bit                 EQU     0x78a9
shiftRightSgn3bit                 EQU     0x77ae
shiftRightSgn4bit                 EQU     0x76b1
shiftRightSgn5bit                 EQU     0x75e2
shiftRightSgn6bit                 EQU     0x75c5
shiftRightSgn7bit                 EQU     0x75a8
shiftRightSgn8bit                 EQU     0x74e2
resetVideoFlags                   EQU     0x7ba2
initClearFuncs                    EQU     0x73e8
clearVertBlinds                   EQU     0x79c3
clearCursorRow                    EQU     0x7ab6
printInit                         EQU     0x7aa0
printText                         EQU     0x74ae
printDigit                        EQU     0x79a1
printInt16                        EQU     0x7bae
printChar                         EQU     0x7ca7
newLineScroll                     EQU     0x7da0
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            LDW     mathX
                    BGE     abs_exit
                    LDI     0
                    SUBW    mathX
abs_exit            RET


sign                LDW     mathX
                    BLE     sign_le
                    LDI     1
                    RET
                    
sign_le             BLT     sign_lt
                    LDI     0
                    RET
                    
sign_lt             LDWI    0xFFFF
                    RET



                    ; accumulator = mathX ** mathY, (result 16bit)
power16bit          LDW     mathX
                    BNE     power16_cont0
                    LDI     0
                    RET

power16_cont0       SUBI    1
                    BNE     power16_cont1
                    LDI     1
                    RET
                    
power16_cont1       LDW     mathY
                    BNE     power16_cont2
                    LDI     1
                    RET

power16_cont2       SUBI    1
                    BNE     power16_cont3
                    LDW     mathX               ; return mathX
                    RET
                    
power16_cont3       LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          ; setup right shift
                    LDW     mathX
                    STW     mathBase
                    LDW     mathY
                    STW     mathPow
                    LDI     1
                    STW     mathResult
                    PUSH
                    LDWI    power16bitExt
                    CALL    giga_vAC
                    POP
                    RET


power16bitExt       PUSH
                    LDW     mathPow
                    
power16E_loop       ANDI    1
                    BEQ     power16E_skip
                    LDW     mathBase
                    STW     mathX
                    LDW     mathResult
                    STW     mathY
                    LDWI    multiply16bit
                    CALL    giga_vAC
                    STW     mathResult          ; mathResult = mathBase * mathResult                    
                    
power16E_skip       LDW     mathBase
                    STW     mathX
                    STW     mathY
                    LDWI    multiply16bit
                    CALL    giga_vAC
                    STW     mathBase            ; mathBase = mathBase * mathBase
                    LDW     mathPow
                    SYS     48
                    STW     mathPow             ; mathPow = mathPow / 2
                    BNE     power16E_loop       ; while mathPow > 0
                    POP
                    LDW     mathResult
                    RET


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight3bit      LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


shiftRight5bit      LDWI    SYS_LSRW5_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


shiftRight6bit      LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight7bit      LDWI    SYS_LSRW7_30
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     30
                    RET


shiftRightSgn1bit   LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDWI    0x8000
                    STW     mathSign
                    ANDW    mathShift
                    BEQ     shiftRS1_pos        ; check sign
                    LDW     mathShift
                    SYS     48                  ; shift right 1
                    ORW     mathSign            ; fix sign
                    RET

shiftRS1_pos        LDW     mathShift           ; positive number
                    SYS     48
                    RET


shiftRightSgn2bit   LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS2_pos        ; check sign
                    LDWI    0xC000
                    STW     mathSign
                    LDW     mathShift
                    SYS     52                  ; shift right 2
                    ORW     mathSign            ; fix sign
                    RET

shiftRS2_pos        LDW     mathShift           ; positive number
                    SYS     52
                    RET


shiftRightSgn3bit   LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS3_pos        ; check sign
                    LDWI    0xE000
                    STW     mathSign
                    LDW     mathShift
                    SYS     52                  ; shift right 3
                    ORW     mathSign            ; fix sign
                    RET

shiftRS3_pos        LDW     mathShift           ; positive number
                    SYS     52
                    RET


shiftRightSgn4bit   LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS4_pos        ; check sign
                    LDWI    0xF000
                    STW     mathSign
                    LDW     mathShift
                    SYS     50                  ; shift right 4
                    ORW     mathSign            ; fix sign
                    RET

shiftRS4_pos        LDW     mathShift           ; positive number
                    SYS     50
                    RET


shiftRightSgn5bit   LDWI    SYS_LSRW5_50
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS5_pos        ; check sign
                    LDWI    0xF800
                    STW     mathSign
                    LDW     mathShift
                    SYS     50                  ; shift right 5
                    ORW     mathSign            ; fix sign
                    RET

shiftRS5_pos        LDW     mathShift           ; positive number
                    SYS     50
                    RET


shiftRightSgn6bit   LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS6_pos        ; check sign
                    LDWI    0xFC00
                    STW     mathSign
                    LDW     mathShift
                    SYS     48                  ; shift right 6
                    ORW     mathSign            ; fix sign
                    RET

shiftRS6_pos        LDW     mathShift           ; positive number
                    SYS     48
                    RET


shiftRightSgn7bit   LDWI    SYS_LSRW7_30
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS7_pos        ; check sign
                    LDWI    0xFE00
                    STW     mathSign
                    LDW     mathShift
                    SYS     30                  ; shift right 7
                    ORW     mathSign            ; fix sign
                    RET

shiftRS7_pos        LDW     mathShift           ; positive number
                    SYS     30
                    RET


shiftRightSgn8bit   LDWI    SYS_LSRW8_24
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS8_pos        ; check sign
                    LDWI    0xFF00
                    STW     mathSign
                    LDW     mathShift
                    SYS     28                  ; shift right 8
                    ORW     mathSign            ; fix sign
                    RET

shiftRS8_pos        LDW     mathShift           ; positive number
                    SYS     28
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

