_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0xffa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_math                             EQU                               0x0323
_div                              EQU                               0x035b
_next_0x0243                      EQU                               0x0257
_page_0x0300                      EQU                               0x0300
_else_0x036f                      EQU                               0x0371
_while_0x0374                     EQU                               0x0376
_else_0x03a7                      EQU                               0x039b
_else_0x03c9                      EQU                               0x03b5
_wend_0x03db                      EQU                               0x03c5

; Global Variables
_result                           EQU                               0x0030
_i                                EQU                               0x0032
_timer                            EQU                               0x0034
_q                                EQU                               0x0036
_r                                EQU                               0x0038
_n                                EQU                               0x003a
_d                                EQU                               0x003c
_a                                EQU                               0x003e
_b                                EQU                               0x0040
_mask                             EQU                               0x0042

; Local Variables

; Arrays

; Strings

; Constant Strings
_str_0x7ffd                       EQU                               0x7ffd
_str_0x7ffd                       DB                                1 ' ' 0
_str_0x7ff8                       EQU                               0x7ff8
_str_0x7ff8                       DB                                3 '/60' 0

; Data

; Time
_timeArray_                       EQU                               0xff3d
_timeArray_                       DB                                00 00 00
_timeString_                      EQU                               0xff33
_timeString_                      DB                                8 '00:00:00' 0

; Define Bytes

; Define Words
def_words_0x8000                  EQU                               0x8000
def_words_0x8000                  DW                                -167 59 -45 -146 -153 164 -49 -127 167 -138 90 -22 77 148 -68 82 -60 -46 -42 -32 -156 -68 -178 -142 -110 38 -101 1 73 -50 -110 -103 -152 106 -16 -25 131 -156 -55 123 -162 85 96 -160 63 129 -65 -38 -156 127 81 111 -123 -132 -137 73 115 -168 80 -117 -111 49 -28 26 58 167 -149 158 -28 104 161 -39 -13 140 134 16 120 83 115 -33 -149 78 30 129 -17 28 66 176 -163 -34 121 -30 52 157 100 101 120 154 92 172 40 -130 105 83 -123 -61 -21 -33 -17 11 96 90 -151 -17 -155 -163 -63 -109 72 118 -135 120 -147 -35 -63 -86 -168 -70 -167 -157 -109 -143 -55 -73 -112 24 36 -14 -136 -16 108 -89 101 -70 -73 -85 -2 -108 -125 89 113 148 94 166 -90 53 -31 80 72 -40 -99 -77 -73 -60 -25 -12 -107 17 88 -95 110 145 -168 -168 -101 88 -52 128 -48 -35 -91 158 -11 82 -148 -152 -86 177 -125 -17 174 -137 101 -136 -94 174 64 179 33 -131 170 -111 3 -86 -54 -145 -126 43 -23 16 -4 -111 152 74 99 71 83 -177 -70 50 63 95 121 8 32 84 -54 62 134 -74 124 29 -127 8 31 -36 146 99 -46 -76 -132 -71 114 -48 -37 173 28 179 116 -103 117 -137 -147 176 128 -53 174 117 -96 -28 97 131 -122 -160 37 151 -4 15 113 -5 -45 179 7 45 10 -143 159 119 -16 71 150 79 -35 -55 14 42 -20 -81 112 69 67 34 -161 -52 -10 15 -121 102 177 -102 -138 81 -36 111 -134 42 -164 156 83 -32 63 83 -159 -102 136 7 -159 -115 77 93 -75 -78 85 126 -22 -24 -35 129 -154 -178 -163 -58 145 -140 -41 48 179 170 -177 75 151 176 -103 110 86 128 -65 -102 63 -55 -30 -123 -99 -146 44 -88 17 142 -68 63 -150 -139 105 -126 -117 -69 178 -105 44 -164 -91 43 59 144 126 17 156 11 -166 -46 -34 127 -147 54 113 -112 105 -119 -171 56 -71 -7 -36 -91 45 -89 155 -136 46 -116 148 63 116 -90 -152 30 165 -52 -141 49 -7 -98 -95 5 -180 -96 88 -72 156 -71 -27 69 -124 70 75 -140 -120 28 -143 -22 -46 159 -68 -43 -163 -12 -107 19 87 14 -124 -124 -44 -41 -155 -76 -144 108 -126 62 149 79 -55 -155 -33 -17 -121 -172 -100 -46 53 -95 -160 102 75 -99 -33 5 -142 -24 -156 -105 -10 82 66 108 124 -107 -159 -158 63 -103 140 123 -71 168 -88 123 -47 132 127 -79 -24 29 -106 140 -15 143 44 176 104 171 4 -56 145 13 4 94 -27 -57 -81 17 -24 -36 -120 -25 94 54 65 75 -40 -116 -62 -88 -63 54 -147 -121 -42 59 58 93 -98 166 -41 81 94 -36 -78 140 56 153 138 58 156 -76 -78 16 -97 0 -56 119 116 172 -147 40 -119 60 69 -9 107 -39 50 -123 -44 -64 92 -167 116 63 20 -113 -51 -83 81 52 -84 10 -158 57 -139 148 53 102 62 -173 136 176 95 -176 70 -10 -17 10 -180 88 -125 -176 -60 97 -45 -58 -126 167 -67 106 -67 24 135 -42 -24 16 111 -5 74 160 -28 11 35 -39 123 -136 16 57 35 -132 -80 5 -22 -112 39 -88 -133 177 -149 131 -72 160 174 -42 93 72 52 -59 77 125 -67 38 -167 -29 -43 -126 -115 5 -62 -45 141 120 -66 85 -151 175 101 63 -83 96 41 164 -180 -66 60 133 -58 153 -147 -7 -137 83 -160 128 154 -140 31 156 -10 128 149 113 15 143 -123 -153 152 77 86 -154 -16 -13 -102 9 -141 46 -137 37 11 -153 -19 108 -42 163 -111 61 -175 68 105 103 -35 135 137 -170 -111 -137 -162 4 80 82 -143 -68 125 -30 15 -69 -68 39 94 -153 75 107 26 -11 97 -25 73 126 61 116 107 -150 34 -52 14 136 153 161 -7 -53 -80 -2 -96 -135 -166 30 7 -55 -104 -127 82 27 78 -66 13 173 0 -107 -81 178 78 76 37 5 62 -91 124 -137 -55 -34 -138 -74 -71 41 -111 -162 -158 -3 -84 -180 -27 -115 140 -96 125 -25 46 -117 108 -41 -51 42 -19 -99 -18 -126 -104 12 26 -76 -15 -147 141 -54 1 76 85 3 2 -80 -132 -173 -3 105 121 -153 151 21 -36 -88 123 -132 -151 -170 49 109 95 -42 96 -64 -126 111 119 -99 149 137 3 5 -36 87 -60 72 56 -9 168 -130 140 144 -132 74 32 83 112 108 -68 -35 18 -11 -88 172 126 113 90 159 -35 32 15 35 -180 149 -43 115 -161 -157 48 96 -59 -28 -156 -30 -92 -11 -133 -3 104 86 38 95 129 110 105 177 163 -73 -93 93 51 37 -61 15 30 116 49 79 35 -77 -164 61 -148 -180 -152 -131 -32 -170 -109 94 141 -20 -81 158 101 -145 -14 128 6 -127 -100 -88 -9 -92 -143 -146 104 -77 113 -110 -47 134 -140 -73 61 -68 -23 -38 -72 -108 -104 -139 -122 -3 -49 63 158 -153 34 -41 176 129 -169 -119 -77 -147 121 -177 -118 -32 -77 132 -89 158 -73 -155 -15 126 -73 -23 -158 -63 100 -29 44 17 21 -3 
def_words_0x87d0                  EQU                               0x87d0
def_words_0x87d0                  DW                                -11 -104 99 54 96 166 82 -121 150 -64 90 -53 -83 -27 -129 -98 40 -118 -106 104 127 -80 18 -71 -96 -36 77 167 -74 -32 -54 93 153 -15 75 -121 -114 -119 -178 67 81 69 -74 26 16 49 -105 16 -95 138 81 31 -113 -84 113 139 153 174 -147 -54 -148 139 142 82 -46 -38 -29 71 34 -104 -29 -147 -6 28 -133 -37 -21 -21 -175 -175 -12 158 168 155 105 41 -18 158 54 -99 -118 -5 -178 168 -151 -6 -55 -85 -149 -39 -75 156 -143 -4 -5 157 -134 167 -42 -43 103 34 -176 118 -93 60 166 -81 -1 -165 -43 146 -27 59 141 72 3 157 124 100 -134 98 14 -75 -176 161 -28 -64 -37 85 98 -178 15 -126 -146 50 -167 169 150 -115 77 34 48 -59 37 9 48 -109 11 125 -74 -59 -110 53 30 -60 87 -93 4 134 -91 -2 151 -178 154 -46 -19 -174 -132 -69 143 -27 48 146 -65 -2 36 -170 -145 82 -109 119 52 150 -135 -96 35 -113 63 -133 -21 -59 -94 -39 -117 -115 -49 105 -99 -90 2 25 -149 -98 -33 -157 120 142 24 2 -165 27 -87 -66 -80 -161 -176 -173 111 -160 136 -136 -55 -170 -144 143 120 -37 176 96 -170 -122 -76 148 57 120 -164 -161 -155 59 130 28 -85 -104 -106 47 -143 152 -129 143 -62 -75 -126 43 111 138 104 127 -131 40 43 -1 177 -110 161 155 74 35 -131 51 -50 15 -150 -83 15 -145 -95 141 -33 -95 -171 -148 -86 -80 165 108 156 -33 18 -22 -61 148 121 -147 53 -21 -165 -9 -44 -177 -165 2 1 120 -168 156 8 146 -76 -146 179 -53 -44 -143 81 23 32 98 -88 87 85 -120 40 -17 154 -29 -158 -1 -8 95 65 45 142 -135 112 -24 75 -94 165 -80 173 -166 -116 -100 -110 143 78 76 157 -27 100 25 -173 136 -122 -23 142 -96 89 39 -87 -28 73 -165 -2 115 -173 134 -51 -90 -18 -159 69 -30 58 -50 32 61 -70 -26 66 15 -178 -116 -94 115 -155 -77 -20 -139 57 36 70 -74 -29 -158 -62 110 -64 -94 -12 -71 52 -140 -4 86 62 127 174 -164 -20 5 -96 69 145 2 -21 0 -4 -53 -178 9 -94 132 -81 68 103 -5 52 -158 -23 -109 57 -125 -147 -29 -110 -51 135 -7 179 155 -140 121 55 -54 122 -174 158 120 -13 -94 90 85 -27 -15 76 -113 101 -84 -22 -8 -3 -149 140 123 -36 -147 -73 0 -19 -6 -31 35 -101 -46 102 92 83 108 -101 -158 -166 9 25 129 25 162 156 94 -82 -33 -43 88 -131 81 -100 106 -154 -86 -174 -122 169 116 -74 68 55 -112 -114 -149 163 0 -175 87 -94 166 -165 124 14 23 -144 66 -119 -174 124 -23 -16 45 -173 87 37 -110 -52 -88 10 166 147 -123 -77 -5 -152 -72 -61 -26 -86 111 -167 -61 -17 15 61 -161 32 26 -66 -57 169 156 -178 127 119 107 -8 -74 165 13 72 176 80 -73 156 -13 -14 -101 -134 -26 -132 9 -46 15 143 33 77 124 172 -25 6 61 34 -8 111 -160 -39 -35 -153 164 -107 14 -4 34 -11 97 -20 8 -172 -5 -136 160 176 5 -118 42 -159 -5 158 149 -148 25 15 -45 -87 -122 -44 -10 89 -58 123 93 -92 83 -36 -156 -174 20 10 -149 -120 40 21 -163 -27 77 -69 51 -18 28 -152 114 167 63 -116 171 -92 150 68 178 -153 78 -133 -55 129 -69 -37 -90 22 -177 158 66 -164 172 -126 -37 -75 -26 60 108 -90 -171 -60 83 111 82 -134 -164 19 -9 -129 -172 106 -180 -72 -15 46 -17 134 48 -30 115 -39 166 10 85 -170 -117 38 -61 -170 -52 -47 141 -55 -32 -134 -151 -149 -74 144 2 62 37 19 -168 48 139 105 -162 95 -86 -122 176 26 56 -128 163 129 -82 34 -55 -104 75 -26 -179 -88 -102 25 -11 70 -23 65 -26 56 -53 -102 163 -27 33 -46 161 -27 108 34 141 -143 22 -106 -9 92 -150 103 131 170 -71 95 -131 63 -145 -157 141 36 -35 -152 27 149 8 143 -75 143 17 -165 95 64 -1 86 -94 39 42 78 -152 -82 49 117 7 -172 86 -22 108 56 40 82 90 -37 -142 163 -157 102 154 130 125 -76 149 -93 169 121 -119 113 -144 51 115 -33 -81 -9 9 54 -50 -145 51 -88 -21 91 126 140 99 54 48 139 148 -174 163 51 124 94 132 -143 142 63 -93 -76 135 109 -88 80 4 136 172 -47 79 114 94 72 -79 166 39 -134 -167 138 -144 -113 150 137 42 169 106 -12 70 -2 79 -22 102 111 -81 22 -133 122 -162 -16 113 -51 -70 126 168 172 -33 91 -123 -100 156 41 96 137 106 -148 -1 109 38 15 106 178 -20 115 -40 -86 -26 -20 91 37 166 55 -40 -125 -119 113 -118 -158 92 -150 -26 -134 -85 -70 177 71 -161 114 113 -65 -16 -154 58 133 156 -175 -77 93 95 130 -8 57 -109 -35 73 27 81 -99 -38 27 -135 -47 164 -140 -145 -35 -124 -134 -169 83 -62 159 161 -143 133 -113 144 52 -82 47 -168 -75 106 -67 22 
def_words_0x8fa0                  EQU                               0x8fa0
def_words_0x8fa

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  InitNeOp                        
                                  InitGeOp                        
                                  InitRealTimeStub                
%define TIME_SLICING                                                                            ; Main: INIT

                                  ClearVertBlinds                                               ; Main: cls

                                  LDI                               0
                                  STW                               timerTick
                                  LDI                               giga_frameCount
                                  STW                               timerPrev
                                  LDWI                              tickTime
                                  STW                               realTimeProc0
                                  LDWI                              setRealTimeProc0
                                  CALL                              giga_vAC                    ; Main: init time

                                  LDI                               0
                                  STW                               _result                     ; Main: result=0

                                  LDI                               0
                                  STW                               _i
                                  LDWI                              999
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: for i=0 to SIZE-1

_next_0x0243                      LDWI                              _math
                                  CALL                              giga_vAC                    ; Main: gosub math

                                  ForNextFarVarAdd                  _i _next_0x0243 0xb0 0xb2   ; Main: next i

                                  LDW                               timerTick
                                  STW                               _timer                      ; Main: timer = get("TIMER")

                                  NewLine                           
                                  LDW                               _timer
                                  STW                               mathX
                                  LDI                               60
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7ffd
                                  LDW                               _timer
                                  STW                               mathX
                                  LDI                               60
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7ff8
                                  NewLine                                                       ; Main: print : print timer/60;" ";timer % 60;"/60"

                                  LDI                               0
                                  STW                               _q
                                  STW                               _r                          ; Main: q=0 : r=q

                                  LDWI                              15000
                                  STW                               _n
                                  LDI                               153
                                  STW                               _d                          ; Main: n=15000 : d=153

                                  LDW                               _n
                                  STW                               mathX
                                  LDW                               _d
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  STW                               _q                          ; Main: q = n/d

                                  LDW                               _n
                                  STW                               mathX
                                  LDW                               _d
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _r                          ; Main: r = n%d

                                  NewLine                           
                                  LDW                               _q
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7ffd
                                  LDW                               _r
                                  PrintAcInt16                      
                                  NewLine                                                       ; Main: print : print q;" ";r

                                  HALT                                                          ; Main: end

_math                             PUSH                              
                                  LDW                               _i
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              -32768
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _a                          ; Main: a = deek(START + SIZE*0 + (i LSL 1))

                                  LDW                               _i
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              -30768
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _b                          ; Main: b = deek(START + SIZE*2 + (i LSL 1))

                                  LDW                               _i
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              -28768
                                  ADDW                              0xea
                                  STW                               0xea
                                  LDW                               _a
                                  STW                               mathX
                                  LDW                               _b
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  DOKE                              0xea                        ; Main: doke START + SIZE*4 + (i LSL 1), a / b

                                  Return                                                        ; Main: return

_div                              LDI                               0
                                  STW                               _q
                                  STW                               _r                          ; Main: q=0 : r=q

                                  LDW                               _d
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _else_0x036f 0
                                  Return                                                        ; Main: if d = 0 then return

_else_0x036f                      LDWI                              -32768
                                  STW                               _mask                       ; Main: mask = &h8000

_while_0x0374                     LDW                               _mask
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _wend_0x03db 3              ; Main: while mask <> 0

                                  LDW                               _r
                                  LSLW                              
                                  STW                               _r                          ; Main: r = r LSL 1

                                  LDW                               _n
                                  ANDW                              _mask
                                  XORI                              0
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _else_0x03a7 1
                                  INC                               _r                          ; Main: if (n AND mask) <> 0 then inc r

_else_0x03a7                      LDW                               _r
                                  SUBW                              _d
                                  CALL                              convertGeOpAddr
                                  JumpFalse                         _else_0x03c9 2
                                  LDW                               _r
                                  SUBW                              _d
                                  STW                               _r
                                  LDW                               _q
                                  ORW                               _mask
                                  STW                               _q                          ; Main: if r >= d then r = r - d : q = q OR mask

_else_0x03c9                      LDW                               _mask
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  STW                               _mask                       ; Main: mask = mask LSR 1

                                  LDWI                              _while_0x0374
                                  CALL                              giga_vAC                    ; Main: wend

_wend_0x03db                      Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0xfc9c
realTimeStub                      EQU     0xfe00
convertEqOp                       EQU     0xfc44
convertNeOp                       EQU     0xfc3b
convertGeOp                       EQU     0xfc32
setRealTimeProc0                  EQU     0xfc74
divide16bit                       EQU     0xfda8
shiftRight1bit                    EQU     0xfc4d
resetVideoFlags                   EQU     0xfc57
initClearFuncs                    EQU     0xfc63
clearVertBlinds                   EQU     0xfd21
clearCursorRow                    EQU     0xff03
printInit                         EQU     0xfc86
printText                         EQU     0xfd08
printDigit                        EQU     0xfcb3
printInt16                        EQU     0xfd57
printChar                         EQU     0xfe4a
newLineScroll                     EQU     0xfea2
tickTime                          EQU     0xfcd5
handleTime                        EQU     0xfe12
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET



timeByte            EQU     register0
timeDigit           EQU     register4
timeArrAddr         EQU     register5
timeStrAddr         EQU     register6
timeTmp             EQU     register7


tickTime            LD      giga_frameCount
                    STW     timeTmp
                    LD      timerPrev
                    XORW    timeTmp
                    BEQ     tickT_exit
                    LDW     timerTick
                    ADDI    1
                    STW     timerTick                           ; 1/60 user timer, (max time = 546.116 seconds)
                    LD      timeTmp
                    ST      timerPrev
                    INC     timerPrev + 1                       ; 1/60 internal counter
                    LD      timerPrev + 1
                    XORI    60
                    BNE     tickT_exit
                    LDI     0
                    ST      timerPrev + 1
                    PUSH
                    LDWI    handleTime                          ; handle time every second
                    CALL    giga_vAC
                    POP

tickT_exit          RET                    


handleTime          LDWI    _timeArray_
                    STW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; seconds
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset seconds
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; minutes
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset minutes
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; hours
handleT_mode        XORI    24                                  ; [handleT_mode + 1] = 12 hour/24 hour
                    BNE     handleT_exit
handleT_epoch       LDI     0                                   ; [handleT_epoch + 1] = start hour
                    POKE    timeArrAddr                         ; reset hours

handleT_exit        RET                    

