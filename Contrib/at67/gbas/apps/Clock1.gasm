_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x7dbb
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_restart                          EQU                               0x0234
_loop                             EQU                               0x0395
_drawClock                        EQU                               0x040f
_drawDigits                       EQU                               0x042b
_drawSeconds                      EQU                               0x0458
_drawMinutes                      EQU                               0x046e
_drawHours                        EQU                               0x04aa
_drawTicks                        EQU                               0x04d6
_drawDial                         EQU                               0x050a
_eraseSecondHand                  EQU                               0x057d
_drawSecondHand                   EQU                               0x05a1
_eraseMinuteHand                  EQU                               0x05c5
_drawMinuteHand                   EQU                               0x05e9
_eraseHourHand                    EQU                               0x0619
_drawHourHand                     EQU                               0x0641
_jitterCircle                     EQU                               0x0669
_page_0x0300                      EQU                               0x0300
_else_0x0304                      EQU                               0x030e
_endif_0x03c6                     EQU                               0x03bc
_endif_0x03e1                     EQU                               0x03cf
_tictoc                           EQU                               0x03d1
_page_0x0400                      EQU                               0x0400
_endif_0x04bd                     EQU                               0x04a3
_endif_0x04e7                     EQU                               0x04c7
_page_0x0500                      EQU                               0x0500
_next_0x0598                      EQU                               0x056d
_page_0x0600                      EQU                               0x0600
_next_0x0711                      EQU                               0x067a
_next_0x0729                      EQU                               0x068a

; Global Variables
_H                                EQU                               0x0030
_M                                EQU                               0x0032
_S                                EQU                               0x0034
_B                                EQU                               0x0036
_HH                               EQU                               0x0038
_MM                               EQU                               0x003a
_SS                               EQU                               0x003c
_Hm12                             EQU                               0x003e
_Md12                             EQU                               0x0040
_MMd12                            EQU                               0x0042
_t                                EQU                               0x0044
_Hx5                              EQU                               0x0046
_x                                EQU                               0x0048
_y                                EQU                               0x004a
_ox                               EQU                               0x004c
_oy                               EQU                               0x004e
_cr                               EQU                               0x0050
_cc                               EQU                               0x0052
_oxx                              EQU                               0x0054
_oyy                              EQU                               0x0056

; Local Variables
_tictoc_t                         EQU                               0x00d8

; Arrays

; Strings

; Constant Strings
_str_0x7de4                       EQU                               0x7de4
_str_0x7de4                       DB                                26 'Press Enter to reset clock' 0
_str_0x7dd7                       EQU                               0x7dd7
_str_0x7dd7                       DB                                11 'Enter Time ' 0
_str_0x7dd3                       EQU                               0x7dd3
_str_0x7dd3                       DB                                2 'H:' 0
_str_0x7dcf                       EQU                               0x7dcf
_str_0x7dcf                       DB                                2 'M:' 0
_str_0x7dcb                       EQU                               0x7dcb
_str_0x7dcb                       DB                                2 'S:' 0
_str_0x7ce4                       EQU                               0x7ce4
_str_0x7ce4                       DB                                26 '                          ' 0

; Data

; Time
_timeArray_                       EQU                               0x7ce1
_timeArray_                       DB                                00 00 00
_timeString_                      EQU                               0x7cd7
_timeString_                      DB                                8 '00:00:00' 0

; Define Bytes
def_bytes_0x60a0                  EQU                               0x60a0
def_bytes_0x60a0                  DB                                80 85 89 94 98 103 106 110 113 116 119 121 123 124 125 125 125 124 123 121 119 116 113 110 106 103 98 94 89 85 80 75 71 66 62 58 54 50 47 44 41 39 37 36 35 35 35 36 37 39 41 44 47 50 54 57 62 66 71 75 
def_bytes_0x61a0                  EQU                               0x61a0
def_bytes_0x61a0                  DB                                14 14 15 16 18 20 23 26 29 33 37 41 45 50 54 59 64 68 73 77 82 85 89 92 95 98 100 102 103 104 104 104 103 102 100 98 95 92 89 85 82 77 73 68 64 59 54 50 45 41 37 33 29 26 23 20 18 16 15 14 
def_bytes_0x62a0                  EQU                               0x62a0
def_bytes_0x62a0                  DB                                80 84 88 91 95 99 102 105 107 110 112 114 115 116 117 117 117 116 115 114 112 110 107 105 102 99 95 91 88 84 80 76 72 69 65 62 58 55 53 50 48 46 45 44 43 43 43 44 45 46 48 50 53 55 58 61 65 69 72 76 
def_bytes_0x63a0                  EQU                               0x63a0
def_bytes_0x63a0                  DB                                22 22 23 24 25 27 29 32 34 37 41 44 48 51 55 59 63 67 70 74 78 81 84 86 89 91 93 94 95 96 96 96 95 94 93 91 89 86 84 81 78 74 70 67 63 59 55 51 48 44 41 37 34 32 29 27 25 24 23 22 
def_bytes_0x64a0                  EQU                               0x64a0
def_bytes_0x64a0                  DB                                80 83 86 89 92 95 97 99 102 103 105 106 108 108 109 109 109 108 108 106 105 103 102 99 97 95 92 89 86 83 80 77 74 71 68 66 63 61 58 57 55 54 52 52 51 51 51 52 52 54 55 57 58 61 63 65 68 71 74 77 
def_bytes_0x65a0                  EQU                               0x65a0
def_bytes_0x65a0                  DB                                30 30 31 31 33 34 36 37 40 42 45 47 50 53 56 59 62 65 68 71 74 76 78 81 82 84 85 87 87 88 88 88 87 87 85 84 82 81 78 76 74 71 68 65 62 59 56 53 50 47 45 42 40 37 36 34 33 31 31 30 
def_bytes_0x66a0                  EQU                               0x66a0
def_bytes_0x66a0                  DB                                63 4 21 34 43 49 54 57 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0x7daf                 EQU                               0x7daf
_inputVars_0x7daf                 DW                                0x0030 0x0032 0x0034 
_inputStrs_0x7da9                 EQU                               0x7da9
_inputStrs_0x7da9                 DW                                0x7dd3 0x7dcf 0x7dcb 
_inputTypes_0x7da1                EQU                               0x7da1
_inputTypes_0x7da1                DW                                0x0303 0x0303 0x0303 0x0000 
_input_0x7db5                     EQU                               0x7db5
_input_0x7db5                     DW                                0x7daf 0x7da9 0x7da1 

; Code
_entryPoint_                      Initialise                        
                                  InitNeOp                        
                                  InitRealTimeStub                
%define TIME_SLICING                                                                            ; Main: INIT

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDI                               0
                                  STW                               timerTick
                                  LDI                               giga_frameCount
                                  STW                               timerPrev
                                  LDWI                              tickTime
                                  STW                               realTimeProc0
                                  LDWI                              setRealTimeProc0
                                  CALL                              giga_vAC                    ; Main: init time

_restart                          LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238

                                  LDI                               48
                                  ST                                fgbgColour                  ; Main: set BG_COLOUR, BACK_COLOUR

                                  LDI                               15
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h0F

                                  ClearVertBlinds                                               ; Main: cls

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 0  'enable video

                                  LDWI                              0xFFFE
                                  ANDW                              miscFlags
                                  STW                               miscFlags                   ; Main: scroll off

                                  LDI                               2
                                  ST                                cursorXY
                                  LDI                               119
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7de4                 ; Main: at 2, 119 : print "Press Enter to reset clock";

                                  LDI                               2
                                  ST                                cursorXY
                                  LDI                               0
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7dd7
                                  LDWI                              0x7db5
                                  Input                                                         ; Main: at 2, 0   : input "Enter Time ", H,"H:";2;, M,"M:";2;, S,"S:";2;

                                  LD                                giga_frameCount
                                  STW                               _B                          ; Main: B=get("FRAME_COUNT")

                                  LDWI                              0xFFFE
                                  ANDW                              miscFlags
                                  STW                               miscFlags                   ; Main: scroll off

                                  LDI                               2
                                  ST                                cursorXY
                                  LDI                               0
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7ce4                 ; Main: at 2,0   : print "                          ";

                                  LDI                               2
                                  ST                                cursorXY
                                  LDI                               119
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7ce4                 ; Main: at 2,119 : print "                          ";

                                  LDWI                              handleT_mode + 1
                                  STW                               register0
                                  LDI                               12
                                  POKE                              register0                   ; Main: set TIME_MODE, 12

                                  LDWI                              handleT_epoch + 1
                                  STW                               register0
                                  LDI                               1
                                  POKE                              register0                   ; Main: set TIME_EPOCH, 1

                                  LDW                               _H
                                  STW                               mathX
                                  LDI                               13
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _H
                                  XORI                              0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  JumpEQ                            _else_0x0304 0
                                  LDI                               12
                                  STW                               _H                          ; Main: H = H % 13 : if H &= 0 then H = 12

_else_0x0304                      LDW                               _M
                                  STW                               mathX
                                  LDI                               60
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _M                          ; Main: M = M % 60

                                  LDW                               _S
                                  STW                               mathX
                                  LDI                               60
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _S                          ; Main: S = S % 60

                                  LDWI                              _timeArray_ + 2
                                  STW                               register0
                                  LDW                               _H
                                  POKE                              register0
                                  LDWI                              _timeArray_ + 1
                                  STW                               register0
                                  LDW                               _M
                                  POKE                              register0
                                  LDWI                              _timeArray_ + 0
                                  STW                               register0
                                  LDW                               _S
                                  POKE                              register0                   ; Main: set TIME_H, H : set TIME_M, M : set TIME_S, S

                                  LDW                               _H
                                  STW                               _HH
                                  LDW                               _M
                                  STW                               _MM
                                  LDW                               _S
                                  STW                               _SS                         ; Main: HH = H : MM = M : SS = S

                                  LDW                               _H
                                  STW                               mathX
                                  LDI                               12
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _Hm12                       ; Main: Hm12 = H % 12

                                  LDW                               _M
                                  STW                               mathX
                                  LDI                               12
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  STW                               _Md12
                                  STW                               _MMd12                      ; Main: Md12 = M / 12 : MMd12 = Md12

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238  'disable video

                                  LDWI                              _drawDial
                                  CALL                              giga_vAC                    ; Main: gosub drawDial

                                  LDWI                              _drawClock
                                  CALL                              giga_vAC                    ; Main: gosub drawClock

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 0  'enable video

_loop                             TickTime                                                      ; Main: tick time

                                  LDWI                              _timeArray_ + 0
                                  PEEK                              
                                  STW                               _S                          ; Main: S = get("TIME_S")

                                  LDW                               _S
                                  XORW                              _SS
                                  BEQ                               _endif_0x03c6               ; Main: if S &&<> SS

                                  LDWI                              _timeArray_ + 2
                                  PEEK                              
                                  STW                               _H
                                  LDWI                              _timeArray_ + 1
                                  PEEK                              
                                  STW                               _M                          ; Main: H = get("TIME_H") : M = get("TIME_M")

                                  LDWI                              _drawClock
                                  CALL                              giga_vAC                    ; Main: gosub drawClock

                                  LDW                               _S
                                  STW                               _SS                         ; Main: SS = S

_endif_0x03c6                     LD                                giga_serialRaw
                                  XORI                              255
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _endif_0x03e1 2             ; Main: if get("SERIAL_RAW") <> 255

                                  LDWI                              _restart
                                  CALL                              giga_vAC                    ; Main: goto restart

_endif_0x03e1                     BRA                               _loop                       ; Main: goto &loop:

_tictoc                           PUSH                                                          ; Main: proc tictoc

                                  LDW                               timerTick
                                  ANDI                              7
                                  STW                               0xe8
                                  LDWI                              26272
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               _tictoc_t                   ; Main: t = peek(T_LUT + (get("TIMER") AND (T_SIZ - 1)))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _tictoc_t
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               sndFrequency
                                  LDW                               _tictoc_t
                                  STW                               sndVolume
                                  LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, t LSL 4, t, 0

                                  LDI                               1
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 1

                                  Return                                                        ; Main: endproc

_drawClock                        PUSH                              
                                  LDWI                              _tictoc
                                  CALL                              giga_vAC                    ; Main: call tictoc

                                  LDWI                              _drawDigits
                                  CALL                              giga_vAC                    ; Main: gosub drawDigits

                                  LDWI                              _drawSeconds
                                  CALL                              giga_vAC                    ; Main: gosub drawSeconds

                                  LDWI                              _drawMinutes
                                  CALL                              giga_vAC                    ; Main: gosub drawMinutes

                                  LDWI                              _drawHours
                                  CALL                              giga_vAC                    ; Main: gosub drawHours

                                  Return                                                        ; Main: return

_drawDigits                       PUSH                              
                                  LDWI                              3072
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, &h0C00

                                  LDI                               57
                                  ST                                cursorXY
                                  LDI                               82
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  TimeString                        
                                  PrintString                       _timeString_
                                  NewLine                                                       ; Main: at 57,82 : print time$

                                  LDI                               16
                                  ST                                fgbgColour                  ; Main: set BG_COLOUR, DIAL_COLOUR

                                  Return                                                        ; Main: return

_drawSeconds                      PUSH                              
                                  LDWI                              _eraseSecondHand
                                  CALL                              giga_vAC                    ; Main: gosub eraseSecondHand

                                  LDW                               _SS
                                  STW                               _t
                                  LDWI                              _drawTicks
                                  CALL                              giga_vAC                    ; Main: t=SS : gosub drawTicks

                                  LDWI                              _drawSecondHand
                                  CALL                              giga_vAC                    ; Main: gosub drawSecondHand

                                  Return                                                        ; Main: return

_drawMinutes                      PUSH                              
                                  LDW                               _M
                                  XORW                              _MM
                                  JumpNE                            _endif_0x04bd 4             ; Main: if M &<> MM

                                  LDWI                              _eraseMinuteHand
                                  CALL                              giga_vAC                    ; Main: gosub eraseMinuteHand

                                  LDW                               _M
                                  STW                               _MM
                                  LDW                               _M
                                  STW                               mathX
                                  LDI                               12
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  STW                               _Md12                       ; Main: MM = M : Md12 = M/12

                                  LDW                               _Md12
                                  XORW                              _MMd12
                                  BEQ                               _endif_0x04bd               ; Main: if Md12 &&<> MMd12

                                  LDWI                              _eraseHourHand
                                  CALL                              giga_vAC                    ; Main: gosub eraseHourHand

                                  LDW                               _Md12
                                  STW                               _MMd12                      ; Main: MMd12 = Md12

_endif_0x04bd                     LDWI                              _drawMinuteHand
                                  CALL                              giga_vAC                    ; Main: gosub drawMinuteHand

                                  Return                                                        ; Main: return

_drawHours                        PUSH                              
                                  LDW                               _H
                                  XORW                              _HH
                                  BEQ                               _endif_0x04e7               ; Main: if H &&<> HH

                                  LDW                               _H
                                  STW                               _HH
                                  LDW                               _H
                                  STW                               mathX
                                  LDI                               12
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _Hm12                       ; Main: HH = H : Hm12 = H%12

_endif_0x04e7                     LDW                               _Hm12
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _Hm12
                                  STW                               _Hx5                        ; Main: Hx5 = (Hm12 LSL 2) + Hm12

                                  LDWI                              _drawHourHand
                                  CALL                              giga_vAC                    ; Main: gosub drawHourHand

                                  Return                                                        ; Main: return

_drawTicks                        PUSH                              
                                  LDWI                              24736
                                  ADDW                              _t
                                  PEEK                              
                                  STW                               _x                          ; Main: x = peek(SECSX + t)

                                  LDWI                              24992
                                  ADDW                              _t
                                  PEEK                              
                                  ADDI                              8
                                  STW                               _y                          ; Main: y = peek(SECSY + t) + 8

                                  LD                                _y
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              _x
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  STW                               0xe8
                                  LDI                               63
                                  POKE                              0xe8                        ; Main: poke (y LSL 8) + x, &h3F

                                  Return                                                        ; Main: return

_drawDial                         PUSH                              
                                  LDI                               16
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, DIAL_COLOUR

                                  LDI                               80
                                  STW                               drawCircleF_cx
                                  LDI                               59
                                  STW                               drawCircleF_cy
                                  LDI                               43
                                  STW                               drawCircleF_r
                                  DrawCircleF                                                   ; Main: circlef CENTERX, CENTERY, DIAL_RADIUS

                                  LDI                               80
                                  STW                               _ox
                                  LDI                               59
                                  STW                               _oy                         ; Main: ox=CENTERX : oy=CENTERY

                                  LDI                               44
                                  STW                               _cr
                                  LDI                               0
                                  STW                               _cc
                                  LDWI                              _jitterCircle
                                  CALL                              giga_vAC                    ; Main: cr=DIAL_RADIUS + 1 : cc=&h00 : gosub jitterCircle

                                  LDI                               46
                                  STW                               _cr
                                  LDI                               0
                                  STW                               _cc
                                  LDWI                              _jitterCircle
                                  CALL                              giga_vAC                    ; Main: cr=DIAL_RADIUS + 3 : cc=&h00 : gosub jitterCircle

                                  LDI                               48
                                  STW                               _cr
                                  LDI                               1
                                  STW                               _cc
                                  LDWI                              _jitterCircle
                                  CALL                              giga_vAC                    ; Main: cr=DIAL_RADIUS + 5 : cc=&h01 : gosub jitterCircle

                                  LDI                               52
                                  STW                               _cr
                                  LDI                               3
                                  STW                               _cc
                                  LDWI                              _jitterCircle
                                  CALL                              giga_vAC                    ; Main: cr=DIAL_RADIUS + 9 : cc=&h03 : gosub jitterCircle

                                  LDI                               50
                                  STW                               _cr
                                  LDI                               2
                                  STW                               _cc
                                  LDWI                              _jitterCircle
                                  CALL                              giga_vAC                    ; Main: cr=DIAL_RADIUS + 7 : cc=&h02 : gosub jitterCircle

                                  LDI                               0
                                  STW                               _t                          ; Main: for t=0 &to TICKS-1

_next_0x0598                      LDWI                              _drawTicks
                                  CALL                              giga_vAC                    ; Main: gosub drawTicks

                                  ForNextInc                        _t _next_0x0598 59          ; Main: next t

                                  Return                                                        ; Main: return

_eraseSecondHand                  PUSH                              
                                  LDI                               16
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, DIAL_COLOUR

                                  LDI                               80
                                  STW                               drawLine_x1
                                  LDI                               59
                                  STW                               drawLine_y1
                                  LDWI                              24736
                                  ADDW                              _SS
                                  PEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              24992
                                  ADDW                              _SS
                                  PEEK                              
                                  STW                               drawLine_y2
                                  DrawLine                                                      ; Main: line CENTERX,CENTERY, peek(SECSX + SS),peek(SECSY + SS)

                                  Return                                                        ; Main: return

_drawSecondHand                   PUSH                              
                                  LDI                               63
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h3F

                                  LDI                               80
                                  STW                               drawLine_x1
                                  LDI                               59
                                  STW                               drawLine_y1
                                  LDWI                              24736
                                  ADDW                              _S
                                  PEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              24992
                                  ADDW                              _S
                                  PEEK                              
                                  STW                               drawLine_y2
                                  DrawLine                                                      ; Main: line CENTERX,CENTERY, peek(SECSX + S),peek(SECSY + S)

                                  Return                                                        ; Main: return

_eraseMinuteHand                  PUSH                              
                                  LDI                               16
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, DIAL_COLOUR

                                  LDI                               80
                                  STW                               drawLine_x1
                                  LDI                               59
                                  STW                               drawLine_y1
                                  LDWI                              25248
                                  ADDW                              _MM
                                  PEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              25504
                                  ADDW                              _MM
                                  PEEK                              
                                  STW                               drawLine_y2
                                  DrawLine                                                      ; Main: line CENTERX,CENTERY, peek(MINSX + MM),peek(MINSY + MM)

                                  Return                                                        ; Main: return

_drawMinuteHand                   PUSH                              
                                  LDI                               42
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h2A

                                  LDI                               80
                                  STW                               drawLine_x1
                                  LDI                               59
                                  STW                               drawLine_y1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  LDWI                              25248
                                  ADDW                              _M
                                  PEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              25504
                                  ADDW                              _M
                                  PEEK                              
                                  STW                               drawLine_y2
                                  DrawLine                                                      ; Main: line CENTERX,CENTERY, peek(MINSX + M),peek(MINSY + M)

                                  Return                                                        ; Main: return

_eraseHourHand                    PUSH                              
                                  LDI                               16
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, DIAL_COLOUR

                                  LDI                               80
                                  STW                               drawLine_x1
                                  LDI                               59
                                  STW                               drawLine_y1
                                  LDWI                              25760
                                  ADDW                              _Hx5
                                  ADDW                              _MMd12
                                  PEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              26016
                                  ADDW                              _Hx5
                                  ADDW                              _MMd12
                                  PEEK                              
                                  STW                               drawLine_y2
                                  DrawLine                                                      ; Main: line CENTERX,CENTERY, peek(HOURX + Hx5 + MMd12),peek(HOURY + Hx5 + MMd12)

                                  Return                                                        ; Main: return

_drawHourHand                     PUSH                              
                                  LDI                               21
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h15

                                  LDI                               80
                                  STW                               drawLine_x1
                                  LDI                               59
                                  STW                               drawLine_y1
                                  LDWI                              25760
                                  ADDW                              _Hx5
                                  ADDW                              _Md12
                                  PEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              26016
                                  ADDW                              _Hx5
                                  ADDW                              _Md12
                                  PEEK                              
                                  STW                               drawLine_y2
                                  DrawLine                                                      ; Main: line CENTERX,CENTERY, peek(HOURX + Hx5 + Md12),peek(HOURY + Hx5 + Md12)

                                  Return                                                        ; Main: return

_jitterCircle                     PUSH                              
                                  LDW                               _ox
                                  SUBI                              1
                                  STW                               _oxx
                                  LDW                               _ox
                                  ADDI                              1
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: for oxx=ox-1 to ox+1

_next_0x0711                      LDW                               _oy
                                  SUBI                              1
                                  STW                               _oyy
                                  LDW                               _oy
                                  ADDI                              1
                                  STW                               0xb4
                                  LDI                               1
                                  STW                               0xb6                        ; Main: for oyy=oy-1 to oy+1

_next_0x0729                      LDW                               _cc
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, cc

                                  LDW                               _oxx
                                  STW                               drawCircle_cx
                                  LDW                               _oyy
                                  ADDI                              8
                                  STW                               drawCircle_cy
                                  LDW                               _cr
                                  STW                               drawCircle_r
                                  DrawCircle                                                    ; Main: circle oxx, oyy, cr

                                  ForNextFarVarAdd                  _oyy _next_0x0729 0xb4 0xb6 ; Main: next oyy

                                  ForNextFarVarAdd                  _oxx _next_0x0711 0xb0 0xb2 ; Main: next oxx

                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                      EQU     0x67a1
convertNeOp                       EQU     0x75a1
setRealTimeProc0                  EQU     0x65ed
loadRegs                          EQU     0x6ea2
saveRegs                          EQU     0x6da5
divide16bit                       EQU     0x76a8
resetVideoFlags                   EQU     0x73a5
initClearFuncs                    EQU     0x6fa5
clearVertBlinds                   EQU     0x6dc3
clearCursorRow                    EQU     0x71b6
drawHLine                         EQU     0x7ba2
drawLine                          EQU     0x75aa
drawLineExt                       EQU     0x6bc6
drawLineLoop                      EQU     0x6cc3
drawLineLoadXY                    EQU     0x68d4
drawCircle                        EQU     0x72b5
drawCircleExt1                    EQU     0x73b1
drawCircleExt2                    EQU     0x7ca5
drawCircleF                       EQU     0x74b0
soundOnV                          EQU     0x67d7
input                             EQU     0x6aa3
inputExt1                         EQU     0x78a6
inputExt2                         EQU     0x69a2
inputCursor                       EQU     0x6ca5
inputKeys                         EQU     0x79a4
inputIntVar                       EQU     0x66b0
inputStrVar                       EQU     0x66c4
inputReturn                       EQU     0x6fbc
inputDelete                       EQU     0x70b9
inputPrint                        EQU     0x67b3
inputNewline                      EQU     0x72a0
printInit                         EQU     0x71a0
printText                         EQU     0x70a0
printChr                          EQU     0x74a3
printChar                         EQU     0x77a7
atTextCursor                      EQU     0x6ba1
newLineScroll                     EQU     0x7aa2
integerStr                        EQU     0x6ec0
tickTime                          EQU     0x68aa
handleTime                        EQU     0x6ac7
timeDigits                        EQU     0x66db
timeString                        EQU     0x69ce
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET




; do *NOT* use register4 to register7 during time slicing
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y8        EQU     register2
drawVLine_y2        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15


drawLine            PUSH                                    ; matches drawLineLoop's POP
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2                     ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2                    ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                               ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h                      ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1                    ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy                     ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2                    ; if(sx < sy) dy2 = -1
    
drawL_ext           LDWI    drawLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawLineExt
                    CALL    giga_vAC



drawLineExt         LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    LDI     0
                    STW     drawLine_dx2                    ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx                     ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawL_num
                    LDI     1
                    STW     drawLine_dy2                    ; if(h > 0) dy2 = 1
    
drawL_num           LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     48
                    ADDI    1
                    STW     drawLine_num                    ; numerator = sx>>1
                    STW     drawLine_count                  ; for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawLineLoadDXY
                    CALL    giga_vAC
                    LDWI    drawLineLoop
                    CALL    giga_vAC


drawLineLoop        LD      fgbgColour + 1
                    POKE    drawLine_xy1                    ; plot start pixel
                    POKE    drawLine_xy2                    ; plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num                    ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawL_flip                      ; if(numerator <= sx) goto flip
                    STW     drawLine_num                    ; numerator -= sx
                    
                    LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1                    ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2                    ; xy2 -= dxy1
                    BRA     drawL_count
                    
drawL_flip          LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1                    ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2                    ; xy2 -= dxy2

%if TIME_SLICING
drawL_count         CALL    realTimeStubAddr
                    LDW     drawLine_count
%else
drawL_count         LDW     drawLine_count
%endif
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawLineLoop
                    POP                                     ;matches drawLine's PUSH
                    RET


drawLineLoadXY      LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_xy1 + 1                ;xy1 = x1 | ((y1+8)<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ADDI    8
                    ST      drawLine_xy2 + 1                ;xy2 = x2 | ((y2+8)<<8)
                    RET
 
drawLineLoadDXY     LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     28
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1                   ;dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     28
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2                   ;dxy2 = dx2 + (dy2<<8)
                    RET



drawCircle          PUSH
                    LDI     0
                    STW     drawCircle_ch0
                    STW     drawCircle_ch1
                    STW     drawCircle_ch2
                    STW     drawCircle_ch3
                    STW     drawCircle_x
                    LDW     drawCircle_r
                    STW     drawCircle_y
                    LDI     1
                    SUBW    drawCircle_r
                    STW     drawCircle_d
                    
drawC_loop          LDWI    drawCircleExt1
                    CALL    giga_vAC
                    
                    LDW     drawCircle_d
                    BGE     drawC_skip
                    LDW     drawCircle_x
                    LSLW
                    LSLW
                    ADDW    drawCircle_d
                    ADDI    3
                    STW     drawCircle_d
                    BRA     drawC_cont
                    
drawC_skip          LDW     drawCircle_x
                    SUBW    drawCircle_y
                    LSLW
                    LSLW
                    ADDW    drawCircle_d
                    ADDI    5
                    STW     drawCircle_d
                    LDW     drawCircle_y
                    SUBI    1
                    STW     drawCircle_y

drawC_cont          INC     drawCircle_x
                    LDW     drawCircle_x
                    SUBW    drawCircle_y
                    BLE     drawC_loop

                    POP
                    RET



drawCircleExt1      PUSH
                    LDW     drawCircle_cy
                    ADDW    drawCircle_y
                    ST      drawCircle_ch0 + 1
                    LDW     drawCircle_cy
                    SUBW    drawCircle_y
                    ST      drawCircle_ch1 + 1
                    LDW     drawCircle_cy
                    ADDW    drawCircle_x
                    ST      drawCircle_ch2 + 1
                    LDW     drawCircle_cy
                    SUBW    drawCircle_x
                    ST      drawCircle_ch3 + 1

                    LDW     drawCircle_cx
                    ADDW    drawCircle_x
                    ADDW    drawCircle_ch0
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_x
                    ADDW    drawCircle_ch0
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDW     drawCircle_cx
                    ADDW    drawCircle_x
                    ADDW    drawCircle_ch1
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_x
                    ADDW    drawCircle_ch1
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDWI    drawCircleExt2
                    CALL    giga_vAC                        ;doesn't return to here


drawCircleExt2      LDW     drawCircle_cx
                    ADDW    drawCircle_y
                    ADDW    drawCircle_ch2
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_y
                    ADDW    drawCircle_ch2
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDW     drawCircle_cx
                    ADDW    drawCircle_y
                    ADDW    drawCircle_ch3
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_y
                    ADDW    drawCircle_ch3
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    POP
                    RET



drawHLine           PUSH
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LDW     drawHLine_x2
                    STW     drawLine_tmp
                    LDW     drawHLine_x1
                    STW     drawHLine_x2
                    LDW     drawLine_tmp
                    STW     drawHLine_x1                    ; if x2 < x1 then swap x2 with x1
                    
drawHL_cont         LD      drawHLine_x1
                    ST      giga_sysArg4
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg5
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    SUBI    4
                    BLT     drawHL_loop1
                    
                    LD      fgbgColour + 1
                    ST      giga_sysArg0
                    ST      giga_sysArg1
                    ST      giga_sysArg2
                    ST      giga_sysArg3                    ; 4 pixels of fg colour
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    
                    LDW     drawHLine_x2        
                    SUBI    3
                    STW     drawHLine_x4                    ; 4 pixel chunks limit

drawHL_loop0        SYS     30
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      giga_sysArg4
                    ADDI    4
                    ST      giga_sysArg4
                    SUBW    drawHLine_x4
                    BLT     drawHL_loop0                    ; all 4 pixel chunks
                    
drawHL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg4
                    LD      giga_sysArg4
                    BEQ     drawHL_exit
                    SUBW    drawHLine_x2
                    BLE     drawHL_loop1                    ; remaining pixels
                    
drawHL_exit         POP
                    RET


drawCircleF         PUSH
                    LDI     0
                    STW     drawCircleF_v
                    STW     drawCircleF_w
                    
drawCF_wloop        LDW     drawCircleF_cx
                    SUBW    drawCircleF_r
                    STW     drawCircleF_x1
                    LDW     drawCircleF_cx
                    ADDW    drawCircleF_r
                    STW     drawCircleF_x2
                    LDW     drawCircleF_cy
                    SUBW    drawCircleF_v
                    STW     drawCircleF_y1
                    LDWI    drawHLine
                    CALL    giga_vAC
                    LDW     drawCircleF_cy
                    ADDW    drawCircleF_v
                    STW     drawCircleF_y1
                    LDWI    drawHLine
                    CALL    giga_vAC
                    
                    LDW     drawCircleF_w
                    ADDW    drawCircleF_v
                    ADDW    drawCircleF_v
                    ADDI    1
                    STW     drawCircleF_w
                    INC     drawCircleF_v
                    
drawCF_rloop        LDW     drawCircleF_w
                    BLT     drawCF_wloop
                    LDW     drawCircleF_w
                    SUBW    drawCircleF_r
                    SUBW    drawCircleF_r
                    ADDI    1
                    STW     drawCircleF_w
                    LDW     drawCircleF_r
                    SUBI    1
                    STW     drawCircleF_r
                    BGT     drawCF_rloop
                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register3
inpTextAddr         EQU     register8
inpTextOfs          EQU     register9
inpTypeData         EQU     register10
inpPrnXYBak         EQU     register11
inpCursXYBak        EQU     register12
inpCursXYOfs        EQU     register13
inpTextEnd          EQU     register14

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    
                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


                    ; hard coded to load register8 to register15
saveRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

saveRegs_loop       LDW     regsAddr
                    DEEK
                    DOKE    regsWork
                    INC     regsWork
                    INC     regsWork
                    INC     regsAddr
                    INC     regsAddr
                    LDW     regsAddr
                    SUBI    register15
                    BLE     saveRegs_loop
                    RET



                    ; hard coded to save register8 to register15
loadRegs            LDWI    regsWorkArea
                    STW     regsWork
                    LDI     register8
                    STW     regsAddr

loadRegs_loop       LDW     regsWork
                    DEEK
                    DOKE    regsAddr
                    INC     regsAddr
                    INC     regsAddr
                    INC     regsWork
                    INC     regsWork
                    LDW     regsAddr
                    SUBI    register15
                    BLE     loadRegs_loop
                    RET



                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline        ; registers don't need to be saved yet
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     inpCursXYBak
                    STW     inpPrnXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     127
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; draws cursor
inputCursor         PUSH
                    LDW     textChr
                    XORI    127
                    BNE     inputC_skip         ; don't flash cursor if char != 127
                    LD      giga_ledState
                    ANDI    2
                    BNE     inputC_skip         ; use ledState as a hack timer
                    LDI     32
                    STW     textChr             ; alternate between 32 and 127
                    
inputC_skip         LDW     inpCursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      inpCursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     inpCursXYOfs        ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDWI    saveRegs
                    CALL    giga_vAC
                    LDI     32
                    STW     textChr
                    LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    5                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     inpCursXYOfs        ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     inpPrnXYBak
                    SUBW    inpCursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     inpCursXYOfs        ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     inpPrnXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    saveRegs
                    CALL    giga_vAC
                    LDWI    printText
                    CALL    giga_vAC
                    LDWI    loadRegs
                    CALL    giga_vAC
                    LDW     inpCursXYBak        ; new cursor position
                    ADDW    inpCursXYOfs
                    STW     inpCursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET



timeByte            EQU     register0
timeDigit           EQU     register4
timeArrAddr         EQU     register5
timeStrAddr         EQU     register6
timeTmp             EQU     register7


tickTime            LD      giga_frameCount
                    STW     timeTmp
                    LD      timerPrev
                    XORW    timeTmp
                    BEQ     tickT_exit
                    LDW     timerTick
                    ADDI    1
                    STW     timerTick                           ; 1/60 user timer, (max time = 546.116 seconds)
                    LD      timeTmp
                    ST      timerPrev
                    INC     timerPrev + 1                       ; 1/60 internal counter
                    LD      timerPrev + 1
                    XORI    60
                    BNE     tickT_exit
                    LDI     0
                    ST      timerPrev + 1
                    PUSH
                    LDWI    handleTime                          ; handle time every second
                    CALL    giga_vAC
                    POP

tickT_exit          RET                    


handleTime          LDWI    _timeArray_
                    STW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; seconds
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset seconds
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; minutes
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset minutes
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; hours
handleT_mode        XORI    24                                  ; [handleT_mode + 1] = 12 hour/24 hour
                    BNE     handleT_exit
handleT_epoch       LDI     0                                   ; [handleT_epoch + 1] = start hour
                    POKE    timeArrAddr                         ; reset hours

handleT_exit        RET                    



timeDigits          LDW     timeByte

timeD_index         SUBI    10
                    BLT     timeD_cont
                    STW     timeByte
                    INC     timeDigit                           ; calculate 10's digit
                    BRA     timeD_index
    
timeD_cont          LD      timeDigit
                    ORI     0x30
                    POKE    timeStrAddr                         ; store 10's digit
                    INC     timeStrAddr
                    LD      timeByte
                    ORI     0x30
                    POKE    timeStrAddr                         ; store 1's digit
                    INC     timeStrAddr                         ; skip colon
                    INC     timeStrAddr                         ; next 10's digit
                    LDI     0x30
                    ST      timeDigit                           ; reset 10's digit
                    RET


                    ; create a time string
timeString          PUSH
                    LDI     0
                    STW     timeDigit
                    LDWI    _timeString_ + 1
                    STW     timeStrAddr                         ; skip length byte

                    LDWI    _timeArray_
                    STW     timeArrAddr
                    ADDI    2
                    PEEK                                        ; hours
                    STW     timeByte
                    LDWI    timeDigits
                    CALL    giga_vAC

                    LDW     timeArrAddr
                    ADDI    1
                    PEEK                                        ; minutes
                    STW     timeByte
                    LDWI    timeDigits
                    CALL    giga_vAC

                    LDW     timeArrAddr
                    PEEK                                        ; seconds
                    STW     timeByte
                    LDWI    timeDigits
                    CALL    giga_vAC
                    POP
                    RET

