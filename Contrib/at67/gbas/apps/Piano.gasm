_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7ea0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x027e
_113                              EQU                               0x02af
_50                               EQU                               0x02c5
_119                              EQU                               0x02db
_51                               EQU                               0x02f1
_101                              EQU                               0x0317
_114                              EQU                               0x032d
_53                               EQU                               0x0343
_116                              EQU                               0x0359
_54                               EQU                               0x036f
_121                              EQU                               0x0385
_55                               EQU                               0x039b
_117                              EQU                               0x03b1
_105                              EQU                               0x03c7
_57                               EQU                               0x03dd
_111                              EQU                               0x0402
_48                               EQU                               0x0418
_112                              EQU                               0x042e
_122                              EQU                               0x0444
_channels                         EQU                               0x045d
_audio                            EQU                               0x04b4
_waveform                         EQU                               0x04bf
_playNote                         EQU                               0x0518
_playExit                         EQU                               0x0570
_inverseChar                      EQU                               0x0577
_normalChar                       EQU                               0x0587
_printChar                        EQU                               0x0597
_206                              EQU                               0x05b5
_207                              EQU                               0x05c7
_208                              EQU                               0x05d9
_209                              EQU                               0x05eb
_drawKeys                         EQU                               0x0609
_cont                             EQU                               0x06a2
_else_0x02b6                      EQU                               0x029c
_page_0x0300                      EQU                               0x0300
_page_0x0400                      EQU                               0x0400
_else_0x0460                      EQU                               0x045b
_next_0x0467                      EQU                               0x0462
_else_0x04a7                      EQU                               0x0486
_else_0x04de                      EQU                               0x04a9
_next_0x0523                      EQU                               0x04ea
_page_0x0500                      EQU                               0x0500
_next_0x0546                      EQU                               0x051d
_else_0x0576                      EQU                               0x0539
_else_0x05c0                      EQU                               0x0567
_page_0x0600                      EQU                               0x0600
_next_0x065b                      EQU                               0x060e
_next_0x06c7                      EQU                               0x0664
_else_0x06d4                      EQU                               0x066d
_else_0x06e1                      EQU                               0x0676

; Global Variables
_n                                EQU                               0x0030
_c                                EQU                               0x0032
_kk                               EQU                               0x0034
_char                             EQU                               0x0036
_posxy                            EQU                               0x0038
_fg                               EQU                               0x003a
_bg                               EQU                               0x003c
_ch                               EQU                               0x003e
_z                                EQU                               0x0040
_k                                EQU                               0x0042
_i                                EQU                               0x0044
_ofs                              EQU                               0x0046

; Local Variables

; Arrays
_chan_array                       EQU                               0x7df6
_chan_array                       DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_note_array                       EQU                               0x7dec
_note_array                       DW                                0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings

; Constant Strings
_str_0x7de7                       EQU                               0x7de7
_str_0x7de7                       DB                                3 'Z: ' 0
_str_0x7ddd                       EQU                               0x7ddd
_str_0x7ddd                       DB                                8 'Metallic' 0
_str_0x7dd3                       EQU                               0x7dd3
_str_0x7dd3                       DB                                8 'Triangle' 0
_str_0x7dc9                       EQU                               0x7dc9
_str_0x7dc9                       DB                                8 'Pulse   ' 0
_str_0x7dbf                       EQU                               0x7dbf
_str_0x7dbf                       DB                                8 'Sawtooth' 0
_str_0x7dab                       EQU                               0x7dab
_str_0x7dab                       DB                                18 ' 2 3   5 6 7   9 0' 0
_str_0x7ceb                       EQU                               0x7ceb
_str_0x7ceb                       DB                                19 'Q W E R T Y U I O P' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_numericLabs                  EQU                               0x7cbd
_lut_numericLabs                  DW                                113 50 119 51 101 114 53 116 54 121 55 117 105 57 111 48 112 122 206 207 208 209 0x0000
_lut_numericAddrs                 EQU                               0x7bd4
_lut_numericAddrs                 DW                                0x02af 0x02c5 0x02db 0x02f1 0x0317 0x032d 0x0343 0x0359 0x036f 0x0385 0x039b 0x03b1 0x03c7 0x03dd 0x0402 0x0418 0x042e 0x0444 0x05b5 0x05c7 0x05d9 0x05eb 

; Code
_entryPoint_                      LDI                               0x20
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                                                    ; Main: INIT

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  SoundAllOff                                                   ; Main: sound off

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238  'disable video

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                      
                                  ClearVertBlinds                                               ; Main: mode 2 : cls

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 0  'enable video

                                  LDI                               0
                                  STW                               _n
                                  STW                               _c
                                  STW                               _kk
                                  STW                               _char
                                  STW                               _posxy                      ; Main: n = 0 : c = n : kk = c : char = kk : posxy = char

                                  LD                                fgbgColour + 1
                                  STW                               _fg
                                  LD                                fgbgColour
                                  STW                               _bg                         ; Main: fg = get("FG_COLOUR") : bg = get("BG_COLOUR")

                                  LDI                               252
                                  STW                               _ch
                                  LDI                               2
                                  STW                               _z                          ; Main: ch = 252 : z = 2

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238  'disable video

                                  LDWI                              _drawKeys
                                  CALL                              giga_vAC                    ; Main: gosub drawKeys

                                  LDWI                              _waveform
                                  CALL                              giga_vAC                    ; Main: gosub waveform

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 0  'enable video

_loop                             WaitVBlank                                                    ; Main: wait

                                  LDI                               2
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 2

                                  LD                                giga_serialRaw
                                  STW                               _k                          ; Main: k = get("SERIAL_RAW")

                                  LDWI                              _channels
                                  CALL                              giga_vAC                    ; Main: gosub channels

                                  LDW                               _k
                                  XORW                              _kk
                                  BEQ                               _else_0x02b6
                                  LDWI                              _normalChar
                                  CALL                              giga_vAC                    ; Main: if k &&<> kk then gosub normalChar

_else_0x02b6                      LDW                               _k
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: gosub k

                                  LDW                               _k
                                  STW                               _kk                         ; Main: kk = k

                                  BRA                               _loop                       ; Main: goto &loop

_113                              PUSH                              
                                  LDWI                              2121
                                  STW                               _n
                                  LDI                               81
                                  STW                               _char
                                  LDWI                              23320
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  73 +  8*256 : char = 81 : posxy =  24 + 91*256 : gosub playNote : return : 'C

_50                               PUSH                              
                                  LDWI                              2315
                                  STW                               _n
                                  LDI                               50
                                  STW                               _char
                                  LDWI                              5662
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  11 +  9*256 : char = 50 : posxy =  30 + 22*256 : gosub playNote : return : 'C#

_119                              PUSH                              
                                  LDWI                              2384
                                  STW                               _n
                                  LDI                               87
                                  STW                               _char
                                  LDWI                              23332
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  80 +  9*256 : char = 87 : posxy =  36 + 91*256 : gosub playNote : return : 'D

_51                               PUSH                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  LDWI                              2585
                                  STW                               _n
                                  LDI                               51
                                  STW                               _char
                                  LDWI                              5674
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  25 + 10*256 : char = 51 : posxy =  42 + 22*256 : gosub playNote : return : 'D#

_101                              PUSH                              
                                  LDWI                              2663
                                  STW                               _n
                                  LDI                               69
                                  STW                               _char
                                  LDWI                              23344
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n = 103 + 10*256 : char = 69 : posxy =  48 + 91*256 : gosub playNote : return : 'E

_114                              PUSH                              
                                  LDWI                              2873
                                  STW                               _n
                                  LDI                               82
                                  STW                               _char
                                  LDWI                              23356
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  57 + 11*256 : char = 82 : posxy =  60 + 91*256 : gosub playNote : return : 'F

_53                               PUSH                              
                                  LDWI                              3088
                                  STW                               _n
                                  LDI                               53
                                  STW                               _char
                                  LDWI                              5698
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  16 + 12*256 : char = 53 : posxy =  66 + 22*256 : gosub playNote : return : 'F#

_116                              PUSH                              
                                  LDWI                              3180
                                  STW                               _n
                                  LDI                               84
                                  STW                               _char
                                  LDWI                              23368
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n = 108 + 12*256 : char = 84 : posxy =  72 + 91*256 : gosub playNote : return : 'G

_54                               PUSH                              
                                  LDWI                              3406
                                  STW                               _n
                                  LDI                               54
                                  STW                               _char
                                  LDWI                              5710
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  78 + 13*256 : char = 54 : posxy =  78 + 22*256 : gosub playNote : return : 'G#

_121                              PUSH                              
                                  LDWI                              3637
                                  STW                               _n
                                  LDI                               89
                                  STW                               _char
                                  LDWI                              23380
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  53 + 14*256 : char = 89 : posxy =  84 + 91*256 : gosub playNote : return : 'A

_55                               PUSH                              
                                  LDWI                              3875
                                  STW                               _n
                                  LDI                               55
                                  STW                               _char
                                  LDWI                              5722
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  35 + 15*256 : char = 55 : posxy =  90 + 22*256 : gosub playNote : return : 'A#

_117                              PUSH                              
                                  LDWI                              4119
                                  STW                               _n
                                  LDI                               85
                                  STW                               _char
                                  LDWI                              23392
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  23 + 16*256 : char = 85 : posxy =  96 + 91*256 : gosub playNote : return : 'B

_105                              PUSH                              
                                  LDWI                              4371
                                  STW                               _n
                                  LDI                               73
                                  STW                               _char
                                  LDWI                              23404
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  19 + 17*256 : char = 73 : posxy = 108 + 91*256 : gosub playNote : return : 'C

_57                               PUSH                              
                                  LDWI                              4629
                                  STW                               _n
                                  LDI                               57
                                  STW                               _char
                                  LDWI                              5746
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  21 + 18*256 : char = 57 : posxy = 114 + 22*256 : gosub playNote : return : 'C#

                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
_111                              PUSH                              
                                  LDWI                              4895
                                  STW                               _n
                                  LDI                               79
                                  STW                               _char
                                  LDWI                              23416
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  31 + 19*256 : char = 79 : posxy = 120 + 91*256 : gosub playNote : return : 'D

_48                               PUSH                              
                                  LDWI                              5170
                                  STW                               _n
                                  LDI                               48
                                  STW                               _char
                                  LDWI                              5758
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  50 + 20*256 : char = 48 : posxy = 126 + 22*256 : gosub playNote : return : 'D#

_112                              PUSH                              
                                  LDWI                              5453
                                  STW                               _n
                                  LDI                               80
                                  STW                               _char
                                  LDWI                              23428
                                  STW                               _posxy
                                  LDWI                              _playNote
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: n =  77 + 21*256 : char = 80 : posxy = 132 + 91*256 : gosub playNote : return : 'E

_122                              PUSH                              
                                  LDW                               _kk
                                  XORW                              _k
                                  BEQ                               _else_0x0460
                                  LDW                               _z
                                  ADDI                              1
                                  ANDI                              3
                                  STW                               _z
                                  LDWI                              _waveform
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: if kk &&<> k then z = (z+1) AND 3 : gosub waveform : return

_else_0x0460                      Return                                                        ; Main: return

_channels                         PUSH                              
                                  LDI                               1
                                  STW                               _c                          ; Main: for c=1 &to 4

_next_0x0467                      LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  DEEK                              
                                  BLE                               _else_0x04a7
                                  LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  DEEK                              
                                  SUBI                              1
                                  STW                               memValue
                                  LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: if chan(c) &&> 0 then chan(c) = chan(c) - 1

_else_0x04a7                      LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  DEEK                              
                                  XORI                              0
                                  BNE                               _else_0x04de
                                  LDWI                              0x7dec
                                  ADDW                              _c
                                  ADDW                              _c
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr
                                  LDI                               0
                                  STW                               _n
                                  LDWI                              _audio
                                  CALL                              giga_vAC                    ; Main: if chan(c) &&= 0 then note(c) = 0 : n=0 : gosub audio

_else_0x04de                      ForNextInc                        _c _next_0x0467 4           ; Main: next c

                                  Return                                                        ; Main: return

_audio                            PUSH                              
                                  LDW                               _c
                                  ST                                _ch + 1
                                  LDW                               _n
                                  DOKE                              _ch                         ; Main: ch.hi = c : doke ch,n

                                  Return                                                        ; Main: return

_waveform                         PUSH                              
                                  LDI                               48
                                  ST                                cursorXY
                                  LDI                               103
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7de7                 ; Main: at 48,103 : print "Z: ";

                                  LDI                               206
                                  ADDW                              _z
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: gosub 206+z

                                  LDI                               1
                                  STW                               _c                          ; Main: for c=1 to 4

_next_0x0523                      LDW                               _c
                                  ST                                _ch + 1
                                  LDW                               _ch
                                  SUBI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  STW                               0xe8
                                  LDW                               _z
                                  POKE                              0xe8                        ; Main: ch.hi = c : poke ch-1,z

                                  ForNextFarInc                     _c _next_0x0523 4           ; Main: next c

                                  Return                                                        ; Main: return

_playNote                         PUSH                              
                                  LDI                               1
                                  STW                               _c                          ; Main: for c=1 &to 4

_next_0x0546                      LDWI                              0x7dec
                                  ADDW                              _c
                                  ADDW                              _c
                                  DEEK                              
                                  XORW                              _k
                                  BNE                               _else_0x0576
                                  LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  STW                               memAddr
                                  LDI                               20
                                  DOKE                              memAddr
                                  BRA                               _playExit                   ; Main: if note(c) &&= k then chan(c) = NOTELEN : goto &playExit

_else_0x0576                      LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  DEEK                              
                                  XORI                              0
                                  BNE                               _else_0x05c0
                                  LDWI                              0x7df6
                                  ADDW                              _c
                                  ADDW                              _c
                                  STW                               memAddr
                                  LDI                               20
                                  DOKE                              memAddr
                                  LDWI                              0x7dec
                                  ADDW                              _c
                                  ADDW                              _c
                                  STW                               memAddr
                                  LDW                               _k
                                  DOKE                              memAddr
                                  LDWI                              _audio
                                  CALL                              giga_vAC
                                  BRA                               _playExit                   ; Main: if chan(c) &&= 0 then chan(c) = NOTELEN : note(c) = k : gosub audio : goto &playExit

_else_0x05c0                      ForNextInc                        _c _next_0x0546 4           ; Main: next c

_playExit                         LDWI                              _inverseChar
                                  CALL                              giga_vAC                    ; Main: gosub inverseChar

                                  Return                                                        ; Main: return

_inverseChar                      PUSH                              
                                  LDW                               _bg
                                  ST                                fgbgColour + 1
                                  LDW                               _fg
                                  ST                                fgbgColour                  ; Main: set FG_COLOUR, bg : set BG_COLOUR, fg

                                  LDWI                              _printChar
                                  CALL                              giga_vAC                    ; Main: gosub printChar

                                  Return                                                        ; Main: return

_normalChar                       PUSH                              
                                  LDW                               _fg
                                  ST                                fgbgColour + 1
                                  LDW                               _bg
                                  ST                                fgbgColour                  ; Main: set FG_COLOUR, fg : set BG_COLOUR, bg

                                  LDWI                              _printChar
                                  CALL                              giga_vAC                    ; Main: gosub printChar

                                  Return                                                        ; Main: return

_printChar                        PUSH                              
                                  LD                                _posxy
                                  ST                                cursorXY
                                  LD                                _posxy + 1
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; Main: at posxy.lo,posxy.hi

                                  LDW                               _char
                                  PrintAcChar                       
                                  NewLine                                                       ; Main: print chr$(char)

                                  Return                                                        ; Main: return

_206                              PUSH                              
                                  PrintString                       _str_0x7ddd
                                  NewLine                           
                                  Return                                                        ; Main: print "Metallic" : return

_207                              PUSH                              
                                  PrintString                       _str_0x7dd3
                                  NewLine                           
                                  Return                                                        ; Main: print "Triangle" : return

_208                              PUSH                              
                                  PrintString                       _str_0x7dc9
                                  NewLine                           
                                  Return                                                        ; Main: print "Pulse   " : return

_209                              PUSH                              
                                  PrintString                       _str_0x7dbf
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  NewLine                           
                                  Return                                                        ; Main: print "Sawtooth" : return

_drawKeys                         PUSH                              
                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 &to 9

_next_0x065b                      LDW                               _i
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               0xea
                                  LDW                               _i
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xea
                                  ADDI                              20
                                  STW                               _ofs                        ; Main: ofs = (i LSL 3) + (i LSL 2) + 20  ' i*12 + 20

                                  LDI                               0
                                  ST                                fgbgColour + 1
                                  LDW                               _ofs
                                  STW                               drawRect_x1
                                  LDI                               30
                                  STW                               drawRect_y1
                                  LDW                               _ofs
                                  ADDI                              12
                                  STW                               drawRect_x2
                                  LDI                               89
                                  STW                               drawRect_y2
                                  DrawRect                                                      ; Main: set FG_COLOUR, &h00 : rect ofs,30, ofs+12,89

                                  LDI                               255
                                  ST                                fgbgColour + 1
                                  LDW                               _ofs
                                  ADDI                              1
                                  STW                               drawRectF_x1
                                  LDI                               31
                                  STW                               drawRectF_y1
                                  LDW                               _ofs
                                  ADDI                              11
                                  STW                               drawRectF_x2
                                  LDI                               88
                                  STW                               drawRectF_y2
                                  DrawRectF                                                     ; Main: set FG_COLOUR, &hFF : rectf ofs+1,31, ofs+11,88

                                  ForNextInc                        _i _next_0x065b 9           ; Main: next i

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 &to 8

_next_0x06c7                      LDW                               _i
                                  XORI                              2
                                  BNE                               _else_0x06d4
                                  BRA                               _cont                       ; Main: if i &&= 2 then goto &cont

_else_0x06d4                      LDW                               _i
                                  XORI                              6
                                  BNE                               _else_0x06e1
                                  BRA                               _cont                       ; Main: if i &&= 6 then goto &cont

_else_0x06e1                      LDW                               _i
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               0xea
                                  LDW                               _i
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xea
                                  ADDI                              28
                                  STW                               _ofs                        ; Main: ofs = (i LSL 3) + (i LSL 2) + 28  ' i*12 + 28

                                  LDI                               0
                                  ST                                fgbgColour + 1
                                  LDW                               _ofs
                                  STW                               drawRectF_x1
                                  LDI                               30
                                  STW                               drawRectF_y1
                                  LDW                               _ofs
                                  ADDI                              8
                                  STW                               drawRectF_x2
                                  LDI                               70
                                  STW                               drawRectF_y2
                                  DrawRectF                                                     ; Main: set FG_COLOUR, &h00 : rectf ofs,30, ofs+8,70

_cont                             ForNextInc                        _i _next_0x06c7 8           ; Main: next i

                                  LDWI                              3872
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, &h0F20

                                  LDI                               24
                                  ST                                cursorXY
                                  LDI                               22
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7dab
                                  NewLine                                                       ; Main: at 24,22 : print " 2 3   5 6 7   9 0"

                                  LDI                               24
                                  ST                                cursorXY
                                  LDI                               91
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7ceb
                                  NewLine                                                       ; Main: at 24,91 : print "Q W E R T Y U I O P"

                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x77a9
gosubNumericLabel                 EQU     0x7ba2
scanlineMode                      EQU     0x7da1
waitVBlank                        EQU     0x73e2
resetVideoFlags                   EQU     0x73d6
initClearFuncs                    EQU     0x73ee
clearVertBlinds                   EQU     0x76c9
clearCursorRow                    EQU     0x75cf
drawHLine                         EQU     0x75a2
drawVLine                         EQU     0x7aa1
drawRect                          EQU     0x77c0
drawRectF                         EQU     0x76a1
soundAllOff                       EQU     0x74c4
printInit                         EQU     0x74ae
printText                         EQU     0x7ca4
printChr                          EQU     0x74a1
printChar                         EQU     0x78a7
atTextCursor                      EQU     0x74da
newLineScroll                     EQU     0x79a2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



drawHLine           PUSH
                    LD      drawHLine_x1
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LD      drawHLine_x2
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x1
                    SUBW    drawHLine_x2
                    
drawHL_cont         ADDI    1
                    ST      giga_sysArg0                    ; count
                    LD      fgbgColour + 1
                    ST      giga_sysArg1                    ; fill value
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg3                    ; high start address
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    SYS     54                              ; fill memory
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    POP
                    RET



drawVLine           PUSH
                    LDW     drawVLine_y2
                    SUBW    drawVLine_y1
                    BGE     drawVL_cont
                    LDW     drawVLine_y2
                    STW     drawLine_tmp
                    LDW     drawVLine_y1
                    STW     drawVLine_y2
                    LDW     drawLine_tmp
                    STW     drawVLine_y1                    ; if y2 < y1 then swap y2 with y1
                    
drawVL_cont         LD      drawVLine_x1
                    ST      giga_sysArg4
                    LD      drawVLine_y1
                    ADDI    8
                    ST      drawVLine_y1
                    ST      giga_sysArg5
                    LDW     drawVLine_y2
                    ADDI    8
                    ST      drawVLine_y2
                    SUBW    drawVLine_y1
                    SUBI    8
                    BLT     drawVL_loop1
                    
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn                      ; setup 8 pixel SYS routine
                    
                    LDW     drawVLine_y2
                    SUBI    7
                    STW     drawVLine_y8                    ; 8 pixel chunks limit

drawVL_loop0        LDI     0xFF
                    ST      giga_sysArg2                    ; 8 pixels of fg and bg colour
                    SYS     134                             ; SYS_VDrawBits_134, 270 - 134/2 = 0xCB
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      giga_sysArg5
                    ADDI    8
                    ST      giga_sysArg5
                    SUBW    drawVLine_y8
                    BLT     drawVL_loop0                    ; all 8 pixel chunks
                    
drawVL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg5
                    LD      giga_sysArg5
                    SUBW    drawVLine_y2
                    BLE     drawVL_loop1                    ; remaining pixels
                    POP
                    RET


drawRect            PUSH
                    LDW     drawRect_x1
                    STW     drawHLine_x1
                    LDW     drawRect_y1
                    STW     drawHLine_y1
                    LDW     drawRect_x2
                    STW     drawHLine_x2
                    LDWI    drawHLine
                    CALL    giga_vAC
                    LDW     drawRect_y2
                    STW     drawHLine_y1
                    LDWI    drawHLine
                    CALL    giga_vAC

                    LDW     drawRect_x1
                    STW     drawVLine_x1
                    LDW     drawRect_y1
                    STW     drawVLine_y1
                    LDW     drawRect_y2
                    STW     drawVLine_y2
                    LDWI    drawVLine
                    CALL    giga_vAC
                    LDW     drawRect_x2
                    STW     drawVLine_x1
                    LDW     drawRect_y1
                    STW     drawVLine_y1
                    LDW     drawRect_y2
                    STW     drawVLine_y2
                    LDWI    drawVLine
                    CALL    giga_vAC

                    POP
                    RET


drawRectF           PUSH
                    LDW     drawRectF_y2
                    SUBW    drawRectF_y1
                    BGE     drawRF_loop
                    LDW     drawRectF_y2
                    STW     drawLine_tmp
                    LDW     drawRectF_y1
                    STW     drawRectF_y2
                    LDW     drawLine_tmp
                    STW     drawRectF_y1                    ;if y2 < y1 then swap y2 with y1
                    
drawRF_loop         LDW     drawRectF_y1
                    STW     drawHLine_y1
                    LDWI    drawHLine
                    CALL    giga_vAC
                    INC     drawRectF_y1
                    LDW     drawRectF_y1
                    SUBW    drawRectF_y2
                    BLE     drawRF_loop

                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


soundAllOff         LDWI    0x01FC
                    STW     sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel 0
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 1
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 2
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 3
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

