_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7ea0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x030d
_waitKey                          EQU                               0x0379
_break                            EQU                               0x03ac
_ohNoes                           EQU                               0x03ae
_forever                          EQU                               0x04c4
_printCursor                      EQU                               0x0588
_beep                             EQU                               0x059c
_page_0x0300                      EQU                               0x0300
_else_0x0324                      EQU                               0x0340
_else_0x035c                      EQU                               0x0374
_next_0x0366                      EQU                               0x037e
_endif_0x038c                     EQU                               0x039e
_next_0x03b6                      EQU                               0x03c8
_next_0x03d0                      EQU                               0x03da
_page_0x0400                      EQU                               0x0400
_next_0x0473                      EQU                               0x0470
_page_0x0500                      EQU                               0x0500
_endif_0x052c                     EQU                               0x0512
_endif_0x0591                     EQU                               0x0559
_endif_0x05c9                     EQU                               0x0583

; Global Variables
_done                             EQU                               0x0030
_duration                         EQU                               0x0032
_i                                EQU                               0x0034
_k                                EQU                               0x0036
_j                                EQU                               0x0038
_colour                           EQU                               0x003a
_stepX                            EQU                               0x003c
_stepY                            EQU                               0x003e
_posX                             EQU                               0x0040
_posY                             EQU                               0x0042
_cursor                           EQU                               0x0044

; Local Variables

; Arrays
_a_array                          EQU                               0x7aa4
_a_array                          DW                                0x4be7 0x4bdb 0x7ba5 
_l_array                          EQU                               0x79a4
_l_array                          DW                                0x0017 0x000a 0x0003 

; Strings

; Constant Strings
_str_0x4de5                       EQU                               0x4de5
_str_0x4de5                       DB                                25 ' ________________________' 0
_str_0x4dcd                       EQU                               0x4dcd
_str_0x4dcd                       DB                                22 '   SEGA SC-3000H BASIC' 0
_str_0x4db6                       EQU                               0x4db6
_str_0x4db6                       DB                                21 '    Level 3.0 ver 1.0' 0
_str_0x4ce8                       EQU                               0x4ce8
_str_0x4ce8                       DB                                22 '   Export Version With' 0
_str_0x4da4                       EQU                               0x4da4
_str_0x4da4                       DB                                16 '        Diereses' 0
_str_0x4cd1                       EQU                               0x4cd1
_str_0x4cd1                       DB                                21 '   Copyright 1983 (C)' 0
_str_0x4cbf                       EQU                               0x4cbf
_str_0x4cbf                       DB                                16 '        by MITEC' 0
_str_0x4cab                       EQU                               0x4cab
_str_0x4cab                       DB                                18 '  26620 Bytes free' 0
_str_0x7ca2                       EQU                               0x7ca2
_str_0x7ca2                       DB                                6 ' Ready' 0
_str_0x7da0                       EQU                               0x7da0
_str_0x7da0                       DB                                1 ' ' 0
_str_0x4be7                       EQU                               0x4be7
_str_0x4be7                       DB                                23 '10 PRINT "Hello World!"' 0
_str_0x4bdb                       EQU                               0x4bdb
_str_0x4bdb                       DB                                10 '20 GOTO 10' 0
_str_0x7ba5                       EQU                               0x7ba5
_str_0x7ba5                       DB                                3 'RUN' 0
_str_0x78a1                       EQU                               0x78a1
_str_0x78a1                       DB                                7 'Gotcha!' 0
_str_0x4bcf                       EQU                               0x4bcf
_str_0x4bcf                       DB                                10 'RickRolled' 0

; Data

; Time

; Define Bytes
def_bytes_0x06f8                  EQU                               0x06f8
def_bytes_0x06f8                  DB                                1 2 4 8 16 32 64 63 
def_bytes_0x08a0                  EQU                               0x08a0
def_bytes_0x08a0                  DB                                144 71 72 1 128 6 144 70 73 2 128 14 144 69 
def_bytes_0x08ae                  EQU                               0x08ae
def_bytes_0x08ae                  DB                                72 1 128 6 144 68 74 2 128 6 144 67 74 1 128 7 
def_bytes_0x08be                  EQU                               0x08be
def_bytes_0x08be                  DB                                144 66 73 1 128 6 144 65 72 1 128 7 144 64 74 1 
def_bytes_0x08ce                  EQU                               0x08ce
def_bytes_0x08ce                  DB                                128 6 144 63 73 2 128 6 144 27 74 145 61 84 146 58 
def_bytes_0x08de                  EQU                               0x08de
def_bytes_0x08de                  DB                                81 147 65 81 7 128 8 144 27 74 7 128 1 144 27 74 
def_bytes_0x08ee                  EQU                               0x08ee
def_bytes_0x08ee                  DB                                7 128 8 144 36 74 129 130 131 7 128 1 208 160 9 
def_bytes_0x09a0                  EQU                               0x09a0
def_bytes_0x09a0                  DB                                144 34 73 145 56 82 146 63 81 147 60 84 7 128 8 144 
def_bytes_0x09b0                  EQU                               0x09b0
def_bytes_0x09b0                  DB                                32 73 7 128 8 144 32 72 7 128 9 144 68 78 22 145 
def_bytes_0x09c0                  EQU                               0x09c0
def_bytes_0x09c0                  DB                                32 74 130 131 6 128 1 129 1 144 29 74 145 60 83 146 
def_bytes_0x09d0                  EQU                               0x09d0
def_bytes_0x09d0                  DB                                56 81 147 63 83 7 128 8 144 29 73 7 128 1 144 29 
def_bytes_0x09e0                  EQU                               0x09e0
def_bytes_0x09e0                  DB                                72 7 128 8 144 36 74 129 130 131 7 128 1 144 34 72 
def_bytes_0x09f0                  EQU                               0x09f0
def_bytes_0x09f0                  DB                                145 61 81 146 65 82 147 58 83 7 128 23 208 160 10 
def_bytes_0x0aa0                  EQU                               0x0aa0
def_bytes_0x0aa0                  DB                                144 34 74 7 128 1 144 34 74 7 128 1 144 34 74 7 
def_bytes_0x0ab0                  EQU                               0x0ab0
def_bytes_0x0ab0                  DB                                128 1 144 36 72 6 128 1 144 77 79 7 128 1 144 34 
def_bytes_0x0ac0                  EQU                               0x0ac0
def_bytes_0x0ac0                  DB                                73 145 73 78 130 131 6 128 1 144 27 74 146 61 82 147 
def_bytes_0x0ad0                  EQU                               0x0ad0
def_bytes_0x0ad0                  DB                                58 81 7 128 8 144 27 72 7 128 1 144 27 72 7 128 
def_bytes_0x0ae0                  EQU                               0x0ae0
def_bytes_0x0ae0                  DB                                8 144 36 72 130 131 4 129 3 128 1 144 34 72 145 56 
def_bytes_0x0af0                  EQU                               0x0af0
def_bytes_0x0af0                  DB                                83 146 63 81 147 60 84 7 128 8 144 32 73 208 160 11 
def_bytes_0x0ba0                  EQU                               0x0ba0
def_bytes_0x0ba0                  DB                                7 128 8 144 32 72 7 128 9 144 68 79 23 145 32 72 
def_bytes_0x0bb0                  EQU                               0x0bb0
def_bytes_0x0bb0                  DB                                130 131 6 129 1 145 29 73 146 56 82 147 60 82 7 129 
def_bytes_0x0bc0                  EQU                               0x0bc0
def_bytes_0x0bc0                  DB                                8 145 29 73 7 129 1 145 29 72 7 129 8 145 36 72 
def_bytes_0x0bd0                  EQU                               0x0bd0
def_bytes_0x0bd0                  DB                                130 131 7 129 1 145 34 72 146 58 84 147 61 84 7 129 
def_bytes_0x0be0                  EQU                               0x0be0
def_bytes_0x0be0                  DB                                20 128 3 144 32 72 7 128 9 144 32 74 146 58 80 145 
def_bytes_0x0bf0                  EQU                               0x0bf0
def_bytes_0x0bf0                  DB                                70 71 5 129 130 2 128 1 144 32 74 208 160 12 
def_bytes_0x0ca0                  EQU                               0x0ca0
def_bytes_0x0ca0                  DB                                147 61 83 145 73 71 146 78 79 4 129 131 2 128 130 1 
def_bytes_0x0cb0                  EQU                               0x0cb0
def_bytes_0x0cb0                  DB                                144 58 83 145 70 69 146 77 80 5 128 129 2 130 1 144 
def_bytes_0x0cc0                  EQU                               0x0cc0
def_bytes_0x0cc0                  DB                                37 72 145 61 82 146 73 68 146 73 78 5 129 130 2 128 
def_bytes_0x0cd0                  EQU                               0x0cd0
def_bytes_0x0cd0                  DB                                1 144 27 74 145 61 83 146 58 81 147 65 82 6 128 8 
def_bytes_0x0ce0                  EQU                               0x0ce0
def_bytes_0x0ce0                  DB                                144 27 74 7 128 1 144 27 72 7 128 1 129 130 131 7 
def_bytes_0x0cf0                  EQU                               0x0cf0
def_bytes_0x0cf0                  DB                                144 36 72 7 128 1 144 34 72 145 56 81 208 160 13 
def_bytes_0x0da0                  EQU                               0x0da0
def_bytes_0x0da0                  DB                                146 63 84 147 60 81 7 128 8 144 32 74 7 128 8 144 
def_bytes_0x0db0                  EQU                               0x0db0
def_bytes_0x0db0                  DB                                32 74 7 128 9 144 68 78 6 128 1 144 66 88 7 128 
def_bytes_0x0dc0                  EQU                               0x0dc0
def_bytes_0x0dc0                  DB                                1 144 29 73 7 128 1 144 32 72 145 63 87 130 131 7 
def_bytes_0x0dd0                  EQU                               0x0dd0
def_bytes_0x0dd0                  DB                                128 129 1 144 29 72 145 56 83 146 60 84 147 63 81 6 
def_bytes_0x0de0                  EQU                               0x0de0
def_bytes_0x0de0                  DB                                128 8 144 29 73 7 128 1 144 29 72 7 128 1 129 130 
def_bytes_0x0df0                  EQU                               0x0df0
def_bytes_0x0df0                  DB                                131 7 144 36 74 7 128 1 144 34 72 208 160 14 
def_bytes_0x0ea0                  EQU                               0x0ea0
def_bytes_0x0ea0                  DB                                145 61 82 146 58 83 147 65 82 7 128 23 144 34 73 7 
def_bytes_0x0eb0                  EQU                               0x0eb0
def_bytes_0x0eb0                  DB                                128 1 144 34 74 6 131 1 128 1 144 34 73 147 80 78 
def_bytes_0x0ec0                  EQU                               0x0ec0
def_bytes_0x0ec0                  DB                                7 128 131 1 144 36 74 147 78 80 6 128 131 1 144 77 
def_bytes_0x0ed0                  EQU                               0x0ed0
def_bytes_0x0ed0                  DB                                79 7 128 1 144 34 72 145 73 80 130 7 128 1 144 27 
def_bytes_0x0ee0                  EQU                               0x0ee0
def_bytes_0x0ee0                  DB                                73 146 61 83 147 58 84 6 128 8 144 27 73 7 128 1 
def_bytes_0x0ef0                  EQU                               0x0ef0
def_bytes_0x0ef0                  DB                                144 27 72 7 128 1 130 131 7 144 36 74 4 208 160 15 
def_bytes_0x0fa0                  EQU                               0x0fa0
def_bytes_0x0fa0                  DB                                129 3 128 1 144 34 73 145 56 82 146 60 82 147 63 82 
def_bytes_0x0fb0                  EQU                               0x0fb0
def_bytes_0x0fb0                  DB                                7 128 8 144 32 74 7 128 8 144 32 73 7 128 9 144 
def_bytes_0x0fc0                  EQU                               0x0fc0
def_bytes_0x0fc0                  DB                                68 78 23 145 32 72 130 131 7 129 1 145 29 72 6 129 
def_bytes_0x0fd0                  EQU                               0x0fd0
def_bytes_0x0fd0                  DB                                8 145 29 73 146 58 83 147 61 82 7 129 1 145 29 73 
def_bytes_0x0fe0                  EQU                               0x0fe0
def_bytes_0x0fe0                  DB                                130 131 7 129 1 145 58 81 146 61 83 147 65 84 65 128 
def_bytes_0x0ff0                  EQU                               0x0ff0
def_bytes_0x0ff0                  DB                                3 144 32 74 7 128 9 144 37 72 145 73 84 208 160 16 
def_bytes_0x10a0                  EQU                               0x10a0
def_bytes_0x10a0                  DB                                146 85 75 131 5 129 130 2 128 1 144 34 72 145 58 82 
def_bytes_0x10b0                  EQU                               0x10b0
def_bytes_0x10b0                  DB                                146 65 81 147 61 83 6 128 9 144 34 74 147 61 66 7 
def_bytes_0x10c0                  EQU                               0x10c0
def_bytes_0x10c0                  DB                                128 131 1 144 34 74 6 128 1 144 61 66 7 147 37 74 
def_bytes_0x10d0                  EQU                               0x10d0
def_bytes_0x10d0                  DB                                7 128 1 131 1 144 36 74 145 58 66 6 128 7 129 1 
def_bytes_0x10e0                  EQU                               0x10e0
def_bytes_0x10e0                  DB                                144 32 72 145 61 67 14 129 2 144 34 72 145 63 67 6 
def_bytes_0x10f0                  EQU                               0x10f0
def_bytes_0x10f0                  DB                                128 15 129 9 144 29 73 130 7 128 1 208 160 17 
def_bytes_0x11a0                  EQU                               0x11a0
def_bytes_0x11a0                  DB                                144 32 73 7 128 1 144 34 74 145 60 82 146 63 82 147 
def_bytes_0x11b0                  EQU                               0x11b0
def_bytes_0x11b0                  DB                                56 83 6 128 9 144 32 73 145 60 65 7 128 1 144 34 
def_bytes_0x11c0                  EQU                               0x11c0
def_bytes_0x11c0                  DB                                74 6 129 1 128 1 144 58 67 7 145 37 74 6 128 1 
def_bytes_0x11d0                  EQU                               0x11d0
def_bytes_0x11d0                  DB                                129 1 144 36 73 145 60 67 6 128 14 129 2 144 58 68 
def_bytes_0x11e0                  EQU                               0x11e0
def_bytes_0x11e0                  DB                                7 128 1 147 56 66 21 131 9 144 29 74 130 7 128 1 
def_bytes_0x11f0                  EQU                               0x11f0
def_bytes_0x11f0                  DB                                144 32 72 7 128 1 144 34 73 145 65 82 208 160 18 
def_bytes_0x12a0                  EQU                               0x12a0
def_bytes_0x12a0                  DB                                146 54 81 147 58 81 6 128 9 144 34 73 147 58 67 7 
def_bytes_0x12b0                  EQU                               0x12b0
def_bytes_0x12b0                  DB                                128 131 1 144 34 72 6 128 1 144 58 66 7 147 37 74 
def_bytes_0x12c0                  EQU                               0x12c0
def_bytes_0x12c0                  DB                                7 128 1 131 1 144 36 74 147 60 65 6 128 7 131 1 
def_bytes_0x12d0                  EQU                               0x12d0
def_bytes_0x12d0                  DB                                144 32 72 147 61 68 14 131 2 144 34 73 147 58 66 7 
def_bytes_0x12e0                  EQU                               0x12e0
def_bytes_0x12e0                  DB                                128 7 131 16 144 34 74 145 56 66 130 7 128 1 144 34 
def_bytes_0x12f0                  EQU                               0x12f0
def_bytes_0x12f0                  DB                                72 6 129 1 128 1 144 27 72 145 61 84 208 160 19 
def_bytes_0x13a0                  EQU                               0x13a0
def_bytes_0x13a0                  DB                                146 68 84 147 65 84 146 68 67 6 128 9 144 27 74 5 
def_bytes_0x13b0                  EQU                               0x13b0
def_bytes_0x13b0                  DB                                130 2 128 1 144 27 73 6 128 1 144 68 66 7 144 27 
def_bytes_0x13c0                  EQU                               0x13c0
def_bytes_0x13c0                  DB                                73 129 131 7 128 1 144 32 72 145 56 83 146 63 83 147 
def_bytes_0x13d0                  EQU                               0x13d0
def_bytes_0x13d0                  DB                                60 82 146 63 67 7 128 24 144 32 74 7 128 1 144 32 
def_bytes_0x13e0                  EQU                               0x13e0
def_bytes_0x13e0                  DB                                74 4 130 2 128 1 144 32 73 7 128 8 144 29 74 129 
def_bytes_0x13f0                  EQU                               0x13f0
def_bytes_0x13f0                  DB                                131 7 128 1 144 32 72 7 128 1 144 34 72 208 160 20 
def_bytes_0x14a0                  EQU                               0x14a0
def_bytes_0x14a0                  DB                                145 58 84 146 54 83 147 65 83 6 128 9 144 34 72 145 
def_bytes_0x14b0                  EQU                               0x14b0
def_bytes_0x14b0                  DB                                58 66 7 128 129 1 144 34 74 6 128 1 144 58 66 8 
def_bytes_0x14c0                  EQU                               0x14c0
def_bytes_0x14c0                  DB                                145 37 72 6 128 1 129 1 144 36 72 145 60 68 6 128 
def_bytes_0x14d0                  EQU                               0x14d0
def_bytes_0x14d0                  DB                                7 129 1 144 32 73 145 61 68 14 129 2 144 34 73 145 
def_bytes_0x14e0                  EQU                               0x14e0
def_bytes_0x14e0                  DB                                58 65 7 128 7 129 1 144 61 65 14 128 1 144 29 72 
def_bytes_0x14f0                  EQU                               0x14f0
def_bytes_0x14f0                  DB                                145 63 67 130 131 7 128 1 144 32 73 6 208 160 21 
def_bytes_0x15a0                  EQU                               0x15a0
def_bytes_0x15a0                  DB                                129 1 128 1 144 34 74 145 56 84 146 63 84 147 60 82 
def_bytes_0x15b0                  EQU                               0x15b0
def_bytes_0x15b0                  DB                                6 128 9 144 32 74 147 60 68 7 128 1 144 34 72 6 
def_bytes_0x15c0                  EQU                               0x15c0
def_bytes_0x15c0                  DB                                131 1 128 1 144 58 68 7 147 37 72 6 128 1 131 1 
def_bytes_0x15d0                  EQU                               0x15d0
def_bytes_0x15d0                  DB                                144 36 73 147 60 66 6 128 14 131 2 144 58 66 7 128 
def_bytes_0x15e0                  EQU                               0x15e0
def_bytes_0x15e0                  DB                                1 145 56 66 21 129 9 144 29 73 130 7 128 1 144 32 
def_bytes_0x15f0                  EQU                               0x15f0
def_bytes_0x15f0                  DB                                73 7 128 1 144 34 73 145 54 83 146 58 81 208 160 22 
def_bytes_0x16a0                  EQU                               0x16a0
def_bytes_0x16a0                  DB                                147 65 84 6 128 9 144 34 73 146 58 67 7 128 130 1 
def_bytes_0x16b0                  EQU                               0x16b0
def_bytes_0x16b0                  DB                                144 34 72 6 128 1 144 58 65 8 146 37 74 6 128 1 
def_bytes_0x16c0                  EQU                               0x16c0
def_bytes_0x16c0                  DB                                130 1 144 36 72 146 60 67 6 128 7 130 1 144 32 73 
def_bytes_0x16d0                  EQU                               0x16d0
def_bytes_0x16d0                  DB                                146 61 66 14 130 2 144 34 72 146 58 65 7 128 7 130 
def_bytes_0x16e0                  EQU                               0x16e0
def_bytes_0x16e0                  DB                                1 144 56 67 14 128 1 144 34 73 7 128 1 144 34 72 
def_bytes_0x16f0                  EQU                               0x16f0
def_bytes_0x16f0                  DB                                129 131 7 128 1 144 27 72 145 54 82 208 160 23 
def_bytes_0x17a0                  EQU                               0x17a0
def_bytes_0x17a0                  DB                                146 58 83 147 65 81 6 128 9 144 27 74 147 65 91 7 
def_bytes_0x17b0                  EQU                               0x17b0
def_bytes_0x17b0                  DB                                128 1 144 27 72 6 128 1 144 63 66 131 8 145 27 73 
def_bytes_0x17c0                  EQU                               0x17c0
def_bytes_0x17c0                  DB                                130 6 128 1 129 1 144 32 74 145 56 84 146 60 81 147 
def_bytes_0x17d0                  EQU                               0x17d0
def_bytes_0x17d0                  DB                                63 83 147 63 92 6 128 9 144 63 68 131 15 147 32 74 
def_bytes_0x17e0                  EQU                               0x17e0
def_bytes_0x17e0                  DB                                7 131 1 147 32 74 6 131 1 147 32 73 7 131 8 147 
def_bytes_0x17f0                  EQU                               0x17f0
def_bytes_0x17f0                  DB                                29 74 5 128 2 131 1 144 32 72 129 130 7 208 160 24 
def_bytes_0x18a0                  EQU                               0x18a0
def_bytes_0x18a0                  DB                                128 1 144 34 72 145 70 81 146 63 81 147 61 83 145 70 
def_bytes_0x18b0                  EQU                               0x18b0
def_bytes_0x18b0                  DB                                84 146 63 86 147 61 85 147 61 66 6 128 9 144 34 72 
def_bytes_0x18c0                  EQU                               0x18c0
def_bytes_0x18c0                  DB                                7 128 1 144 34 72 6 128 9 144 37 74 7 128 1 144 
def_bytes_0x18d0                  EQU                               0x18d0
def_bytes_0x18d0                  DB                                36 73 6 128 8 144 32 73 13 131 3 144 34 73 146 63 
def_bytes_0x18e0                  EQU                               0x18e0
def_bytes_0x18e0                  DB                                68 7 128 7 130 1 144 65 66 14 128 1 144 29 74 145 
def_bytes_0x18f0                  EQU                               0x18f0
def_bytes_0x18f0                  DB                                61 68 7 128 1 144 32 72 129 7 128 1 208 160 25 
def_bytes_0x19a0                  EQU                               0x19a0
def_bytes_0x19a0                  DB                                144 34 72 145 68 82 146 63 84 147 65 81 145 68 84 146 
def_bytes_0x19b0                  EQU                               0x19b0
def_bytes_0x19b0                  DB                                63 85 147 65 84 146 63 68 7 128 130 8 144 32 74 146 
def_bytes_0x19c0                  EQU                               0x19c0
def_bytes_0x19c0                  DB                                63 68 7 128 130 1 144 34 74 6 128 1 144 63 66 8 
def_bytes_0x19d0                  EQU                               0x19d0
def_bytes_0x19d0                  DB                                146 37 73 6 128 1 130 1 144 36 72 147 65 67 6 128 
def_bytes_0x19e0                  EQU                               0x19e0
def_bytes_0x19e0                  DB                                7 131 2 144 63 68 14 128 1 144 56 67 14 128 1 144 
def_bytes_0x19f0                  EQU                               0x19f0
def_bytes_0x19f0                  DB                                56 66 15 146 29 73 7 130 1 145 32 72 5 208 160 26 
def_bytes_0x1aa0                  EQU                               0x1aa0
def_bytes_0x1aa0                  DB                                128 2 129 1 144 34 72 145 70 84 146 61 84 147 63 84 
def_bytes_0x1ab0                  EQU                               0x1ab0
def_bytes_0x1ab0                  DB                                145 70 86 146 61 84 147 63 84 7 128 8 144 34 73 7 
def_bytes_0x1ac0                  EQU                               0x1ac0
def_bytes_0x1ac0                  DB                                128 1 144 34 73 6 128 9 144 37 74 7 128 1 144 36 
def_bytes_0x1ad0                  EQU                               0x1ad0
def_bytes_0x1ad0                  DB                                74 6 128 9 144 32 72 7 128 8 144 34 73 7 128 8 
def_bytes_0x1ae0                  EQU                               0x1ae0
def_bytes_0x1ae0                  DB                                146 61 66 14 130 1 144 29 72 146 58 65 7 128 1 144 
def_bytes_0x1af0                  EQU                               0x1af0
def_bytes_0x1af0                  DB                                32 73 129 131 6 130 1 128 1 144 34 74 208 160 27 
def_bytes_0x1ba0                  EQU                               0x1ba0
def_bytes_0x1ba0                  DB                                145 70 83 146 63 82 147 61 82 145 70 84 146 63 85 147 
def_bytes_0x1bb0                  EQU                               0x1bb0
def_bytes_0x1bb0                  DB                                61 85 7 128 8 144 32 72 145 63 68 130 131 7 128 1 
def_bytes_0x1bc0                  EQU                               0x1bc0
def_bytes_0x1bc0                  DB                                144 34 74 146 70 84 145 63 83 147 61 81 146 70 86 145 
def_bytes_0x1bd0                  EQU                               0x1bd0
def_bytes_0x1bd0                  DB                                63 86 147 61 84 6 129 1 128 1 144 65 68 130 131 7 
def_bytes_0x1be0                  EQU                               0x1be0
def_bytes_0x1be0                  DB                                145 37 74 6 128 1 129 1 144 36 74 145 63 82 146 68 
def_bytes_0x1bf0                  EQU                               0x1bf0
def_bytes_0x1bf0                  DB                                81 147 72 82 145 63 86 146 68 84 147 72 85 208 160 28 
def_bytes_0x1ca0                  EQU                               0x1ca0
def_bytes_0x1ca0                  DB                                145 63 67 6 128 24 146 68 87 144 80 74 5 128 129 130 
def_bytes_0x1cb0                  EQU                               0x1cb0
def_bytes_0x1cb0                  DB                                2 144 56 86 145 68 73 146 80 71 6 128 129 130 2 144 
def_bytes_0x1cc0                  EQU                               0x1cc0
def_bytes_0x1cc0                  DB                                56 67 7 128 1 144 58 68 7 128 1 144 29 72 145 61 
def_bytes_0x1cd0                  EQU                               0x1cd0
def_bytes_0x1cd0                  DB                                67 6 128 129 1 144 32 72 145 58 66 131 7 128 129 1 
def_bytes_0x1ce0                  EQU                               0x1ce0
def_bytes_0x1ce0                  DB                                144 27 74 145 61 81 146 58 82 147 65 83 147 65 84 147 
def_bytes_0x1cf0                  EQU                               0x1cf0
def_bytes_0x1cf0                  DB                                65 67 7 128 8 144 27 74 6 131 1 128 1 208 160 29 
def_bytes_0x1da0                  EQU                               0x1da0
def_bytes_0x1da0                  DB                                144 27 73 7 128 1 144 65 84 147 73 84 144 65 67 7 
def_bytes_0x1db0                  EQU                               0x1db0
def_bytes_0x1db0                  DB                                144 36 72 129 130 7 128 131 1 144 34 73 145 60 81 146 
def_bytes_0x1dc0                  EQU                               0x1dc0
def_bytes_0x1dc0                  DB                                56 82 147 63 81 147 63 86 147 63 67 6 128 8 131 1 
def_bytes_0x1dd0                  EQU                               0x1dd0
def_bytes_0x1dd0                  DB                                144 32 73 7 128 8 144 32 73 7 128 8 144 80 79 146 
def_bytes_0x1de0                  EQU                               0x1de0
def_bytes_0x1de0                  DB                                56 65 7 130 1 146 58 67 7 130 1 146 29 74 147 61 
def_bytes_0x1df0                  EQU                               0x1df0
def_bytes_0x1df0                  DB                                67 6 130 131 1 145 32 73 146 58 65 5 208 160 30 
def_bytes_0x1ea0                  EQU                               0x1ea0
def_bytes_0x1ea0                  DB                                128 2 129 130 1 144 29 72 145 53 83 146 56 84 147 60 
def_bytes_0x1eb0                  EQU                               0x1eb0
def_bytes_0x1eb0                  DB                                82 7 128 8 144 29 73 7 128 1 144 29 73 6 128 1 
def_bytes_0x1ec0                  EQU                               0x1ec0
def_bytes_0x1ec0                  DB                                144 63 86 145 72 84 146 68 84 144 63 68 131 8 147 36 
def_bytes_0x1ed0                  EQU                               0x1ed0
def_bytes_0x1ed0                  DB                                73 6 128 1 129 130 131 1 144 34 73 145 58 81 146 61 
def_bytes_0x1ee0                  EQU                               0x1ee0
def_bytes_0x1ee0                  DB                                81 147 65 82 146 61 85 147 65 83 146 61 67 6 128 8 
def_bytes_0x1ef0                  EQU                               0x1ef0
def_bytes_0x1ef0                  DB                                130 131 8 144 60 67 7 128 1 144 34 74 208 160 31 
def_bytes_0x1fa0                  EQU                               0x1fa0
def_bytes_0x1fa0                  DB                                145 58 67 7 128 1 144 34 73 6 129 1 128 1 144 34 
def_bytes_0x1fb0                  EQU                               0x1fb0
def_bytes_0x1fb0                  DB                                74 145 92 79 146 56 67 6 128 129 130 1 144 36 73 145 
def_bytes_0x1fc0                  EQU                               0x1fc0
def_bytes_0x1fc0                  DB                                90 78 146 58 66 7 128 129 130 1 144 89 79 145 61 66 
def_bytes_0x1fd0                  EQU                               0x1fd0
def_bytes_0x1fd0                  DB                                6 128 129 1 144 34 73 145 85 79 146 58 66 7 128 130 
def_bytes_0x1fe0                  EQU                               0x1fe0
def_bytes_0x1fe0                  DB                                1 144 27 73 146 61 82 147 58 82 146 61 68 7 128 8 
def_bytes_0x1ff0                  EQU                               0x1ff0
def_bytes_0x1ff0                  DB                                144 27 72 7 128 1 144 27 73 5 130 2 208 160 32 
def_bytes_0x20a0                  EQU                               0x20a0
def_bytes_0x20a0                  DB                                128 1 144 63 68 7 146 36 74 131 4 129 2 128 1 130 
def_bytes_0x20b0                  EQU                               0x20b0
def_bytes_0x20b0                  DB                                1 144 34 74 145 56 81 146 63 81 147 60 81 147 60 67 
def_bytes_0x20c0                  EQU                               0x20c0
def_bytes_0x20c0                  DB                                6 128 9 144 32 74 5 131 2 128 1 144 58 68 6 128 
def_bytes_0x20d0                  EQU                               0x20d0
def_bytes_0x20d0                  DB                                1 144 32 74 145 56 67 7 128 7 129 1 144 80 78 145 
def_bytes_0x20e0                  EQU                               0x20e0
def_bytes_0x20e0                  DB                                56 67 14 129 1 145 32 72 146 63 66 7 129 1 145 32 
def_bytes_0x20f0                  EQU                               0x20f0
def_bytes_0x20f0                  DB                                74 7 129 1 145 29 73 147 60 82 146 63 83 208 160 33 
def_bytes_0x21a0                  EQU                               0x21a0
def_bytes_0x21a0                  DB                                7 129 8 145 29 74 7 129 130 1 145 29 72 7 129 1 
def_bytes_0x21b0                  EQU                               0x21b0
def_bytes_0x21b0                  DB                                145 65 84 146 70 86 147 73 86 14 145 65 81 27 128 4 
def_bytes_0x21c0                  EQU                               0x21c0
def_bytes_0x21c0                  DB                                144 32 74 7 128 1 144 68 87 5 128 2 144 32 72 7 
def_bytes_0x21d0                  EQU                               0x21d0
def_bytes_0x21d0                  DB                                128 129 130 131 1 144 32 72 145 90 80 146 58 65 7 128 
def_bytes_0x21e0                  EQU                               0x21e0
def_bytes_0x21e0                  DB                                129 130 1 144 89 78 145 61 65 6 128 129 1 144 37 72 
def_bytes_0x21f0                  EQU                               0x21f0
def_bytes_0x21f0                  DB                                145 85 78 146 58 66 7 128 130 1 144 27 72 208 160 34 
def_bytes_0x22a0                  EQU                               0x22a0
def_bytes_0x22a0                  DB                                146 58 84 147 61 83 7 128 8 144 27 74 7 128 1 144 
def_bytes_0x22b0                  EQU                               0x22b0
def_bytes_0x22b0                  DB                                27 72 7 128 1 144 63 83 7 146 36 74 131 4 129 3 
def_bytes_0x22c0                  EQU                               0x22c0
def_bytes_0x22c0                  DB                                128 130 1 144 34 72 145 56 83 146 63 84 147 60 83 146 
def_bytes_0x22d0                  EQU                               0x22d0
def_bytes_0x22d0                  DB                                63 85 146 63 67 6 128 9 144 32 73 7 128 8 144 32 
def_bytes_0x22e0                  EQU                               0x22e0
def_bytes_0x22e0                  DB                                74 7 128 6 130 2 144 80 78 145 56 67 7 129 1 145 
def_bytes_0x22f0                  EQU                               0x22f0
def_bytes_0x22f0                  DB                                58 66 7 129 1 145 29 73 146 61 65 6 208 160 35 
def_bytes_0x23a0                  EQU                               0x23a0
def_bytes_0x23a0                  DB                                129 130 1 145 32 72 146 58 67 131 5 128 2 129 130 1 
def_bytes_0x23b0                  EQU                               0x23b0
def_bytes_0x23b0                  DB                                144 29 73 145 53 82 146 56 81 147 60 84 7 128 8 144 
def_bytes_0x23c0                  EQU                               0x23c0
def_bytes_0x23c0                  DB                                29 73 7 128 1 144 29 73 7 128 1 144 68 84 145 75 
def_bytes_0x23d0                  EQU                               0x23d0
def_bytes_0x23d0                  DB                                85 146 72 84 147 60 66 13 131 1 128 129 130 1 144 34 
def_bytes_0x23e0                  EQU                               0x23e0
def_bytes_0x23e0                  DB                                72 145 61 82 146 58 81 147 65 83 147 65 84 145 61 66 
def_bytes_0x23f0                  EQU                               0x23f0
def_bytes_0x23f0                  DB                                7 128 13 129 2 131 1 144 63 85 145 72 84 208 160 36 
def_bytes_0x24a0                  EQU                               0x24a0
def_bytes_0x24a0                  DB                                147 68 86 6 128 129 131 1 144 34 72 145 61 85 147 70 
def_bytes_0x24b0                  EQU                               0x24b0
def_bytes_0x24b0                  DB                                86 146 58 67 7 128 1 144 34 72 6 130 1 128 129 131 
def_bytes_0x24c0                  EQU                               0x24c0
def_bytes_0x24c0                  DB                                1 144 34 72 145 92 78 146 56 66 6 128 129 130 1 144 
def_bytes_0x24d0                  EQU                               0x24d0
def_bytes_0x24d0                  DB                                36 74 145 90 79 146 58 66 7 128 129 130 1 144 89 78 
def_bytes_0x24e0                  EQU                               0x24e0
def_bytes_0x24e0                  DB                                145 61 68 7 128 129 1 144 34 73 145 85 78 146 58 67 
def_bytes_0x24f0                  EQU                               0x24f0
def_bytes_0x24f0                  DB                                6 128 130 1 144 27 72 146 58 83 147 61 82 208 160 37 
def_bytes_0x25a0                  EQU                               0x25a0
def_bytes_0x25a0                  DB                                147 61 67 7 128 8 144 27 74 7 128 1 144 27 72 5 
def_bytes_0x25b0                  EQU                               0x25b0
def_bytes_0x25b0                  DB                                131 2 128 1 144 63 68 7 146 36 73 4 129 2 128 1 
def_bytes_0x25c0                  EQU                               0x25c0
def_bytes_0x25c0                  DB                                130 1 144 34 73 145 63 81 146 56 84 147 60 81 147 60 
def_bytes_0x25d0                  EQU                               0x25d0
def_bytes_0x25d0                  DB                                67 7 128 8 144 32 72 6 131 1 128 1 144 58 66 6 
def_bytes_0x25e0                  EQU                               0x25e0
def_bytes_0x25e0                  DB                                128 1 144 32 74 146 56 68 7 128 8 144 80 78 6 130 
def_bytes_0x25f0                  EQU                               0x25f0
def_bytes_0x25f0                  DB                                10 146 32 73 147 56 67 7 130 1 145 32 72 208 160 38 
def_bytes_0x26a0                  EQU                               0x26a0
def_bytes_0x26a0                  DB                                131 6 129 1 145 29 74 146 56 81 147 60 82 7 129 1 
def_bytes_0x26b0                  EQU                               0x26b0
def_bytes_0x26b0                  DB                                130 131 7 145 29 72 7 129 1 145 29 72 7 129 1 145 
def_bytes_0x26c0                  EQU                               0x26c0
def_bytes_0x26c0                  DB                                58 84 146 61 82 147 65 82 147 65 84 146 61 66 60 131 
def_bytes_0x26d0                  EQU                               0x26d0
def_bytes_0x26d0                  DB                                1 147 32 74 3 128 1 130 2 131 1 144 32 74 146 73 
def_bytes_0x26e0                  EQU                               0x26e0
def_bytes_0x26e0                  DB                                85 147 85 71 5 130 131 2 128 8 144 37 74 145 73 85 
def_bytes_0x26f0                  EQU                               0x26f0
def_bytes_0x26f0                  DB                                146 85 73 5 129 130 2 128 1 144 34 73 208 160 39 
def_bytes_0x27a0                  EQU                               0x27a0
def_bytes_0x27a0                  DB                                145 58 84 146 65 81 147 61 83 7 128 8 144 34 74 7 
def_bytes_0x27b0                  EQU                               0x27b0
def_bytes_0x27b0                  DB                                128 1 144 34 72 7 128 1 145 58 67 7 144 37 73 6 
def_bytes_0x27c0                  EQU                               0x27c0
def_bytes_0x27c0                  DB                                129 1 128 1 144 36 72 145 60 68 7 128 7 129 1 144 
def_bytes_0x27d0                  EQU                               0x27d0
def_bytes_0x27d0                  DB                                32 73 147 61 68 7 131 8 144 34 74 145 61 66 7 128 
def_bytes_0x27e0                  EQU                               0x27e0
def_bytes_0x27e0                  DB                                7 129 1 144 63 67 14 128 2 144 29 72 145 60 68 130 
def_bytes_0x27f0                  EQU                               0x27f0
def_bytes_0x27f0                  DB                                7 128 1 144 32 72 6 128 1 144 34 73 208 160 40 
def_bytes_0x28a0                  EQU                               0x28a0
def_bytes_0x28a0                  DB                                145 60 81 146 63 82 147 56 82 6 129 1 128 1 144 58 
def_bytes_0x28b0                  EQU                               0x28b0
def_bytes_0x28b0                  DB                                68 7 128 1 144 32 72 147 56 66 6 128 1 144 34 74 
def_bytes_0x28c0                  EQU                               0x28c0
def_bytes_0x28c0                  DB                                7 128 8 144 37 73 7 128 1 144 36 73 7 128 54 144 
def_bytes_0x28d0                  EQU                               0x28d0
def_bytes_0x28d0                  DB                                29 74 130 131 7 128 1 144 32 74 6 128 1 144 34 73 
def_bytes_0x28e0                  EQU                               0x28e0
def_bytes_0x28e0                  DB                                145 65 82 146 54 81 147 58 82 7 128 8 144 34 74 147 
def_bytes_0x28f0                  EQU                               0x28f0
def_bytes_0x28f0                  DB                                58 66 7 128 131 1 144 34 74 7 128 1 208 160 41 
def_bytes_0x29a0                  EQU                               0x29a0
def_bytes_0x29a0                  DB                                144 58 67 7 147 37 72 6 128 1 131 1 144 36 72 147 
def_bytes_0x29b0                  EQU                               0x29b0
def_bytes_0x29b0                  DB                                60 68 7 128 7 131 1 144 32 72 147 61 67 14 131 1 
def_bytes_0x29c0                  EQU                               0x29c0
def_bytes_0x29c0                  DB                                144 34 72 147 58 66 7 128 7 131 17 144 34 72 145 56 
def_bytes_0x29d0                  EQU                               0x29d0
def_bytes_0x29d0                  DB                                66 130 7 128 1 144 34 72 6 129 1 128 1 144 27 73 
def_bytes_0x29e0                  EQU                               0x29e0
def_bytes_0x29e0                  DB                                145 61 84 146 68 82 147 65 84 146 68 65 6 128 8 144 
def_bytes_0x29f0                  EQU                               0x29f0
def_bytes_0x29f0                  DB                                27 74 6 130 1 128 1 144 27 74 7 128 1 208 160 42 
def_bytes_0x2aa0                  EQU                               0x2aa0
def_bytes_0x2aa0                  DB                                144 68 67 7 144 27 74 129 131 7 128 1 144 32 72 145 
def_bytes_0x2ab0                  EQU                               0x2ab0
def_bytes_0x2ab0                  DB                                56 84 146 63 81 147 60 83 146 63 66 7 128 21 130 2 
def_bytes_0x2ac0                  EQU                               0x2ac0
def_bytes_0x2ac0                  DB                                144 32 72 146 65 68 7 128 1 144 32 74 6 130 1 128 
def_bytes_0x2ad0                  EQU                               0x2ad0
def_bytes_0x2ad0                  DB                                1 144 32 74 146 63 67 6 128 7 130 2 144 29 73 145 
def_bytes_0x2ae0                  EQU                               0x2ae0
def_bytes_0x2ae0                  DB                                61 68 131 7 128 1 144 32 74 6 129 1 128 1 144 34 
def_bytes_0x2af0                  EQU                               0x2af0
def_bytes_0x2af0                  DB                                72 145 58 84 146 54 81 147 65 81 6 128 8 208 160 43 
def_bytes_0x2ba0                  EQU                               0x2ba0
def_bytes_0x2ba0                  DB                                144 34 72 145 58 66 7 128 129 1 144 34 74 7 128 1 
def_bytes_0x2bb0                  EQU                               0x2bb0
def_bytes_0x2bb0                  DB                                144 58 66 7 145 37 73 6 128 1 129 1 144 36 74 145 
def_bytes_0x2bc0                  EQU                               0x2bc0
def_bytes_0x2bc0                  DB                                60 68 7 128 7 129 1 144 32 72 145 61 67 14 129 1 
def_bytes_0x2bd0                  EQU                               0x2bd0
def_bytes_0x2bd0                  DB                                144 34 73 145 58 68 7 128 7 129 1 144 61 68 14 128 
def_bytes_0x2be0                  EQU                               0x2be0
def_bytes_0x2be0                  DB                                2 144 29 72 145 63 68 130 131 7 128 1 144 32 73 6 
def_bytes_0x2bf0                  EQU                               0x2bf0
def_bytes_0x2bf0                  DB                                129 1 128 1 144 34 72 145 56 83 146 63 83 208 160 44 
def_bytes_0x2ca0                  EQU                               0x2ca0
def_bytes_0x2ca0                  DB                                147 60 84 6 128 8 144 32 72 147 60 67 7 128 1 144 
def_bytes_0x2cb0                  EQU                               0x2cb0
def_bytes_0x2cb0                  DB                                34 74 6 131 1 128 1 144 58 67 7 147 37 73 6 128 
def_bytes_0x2cc0                  EQU                               0x2cc0
def_bytes_0x2cc0                  DB                                1 131 1 144 36 73 147 60 68 7 128 16 144 58 66 5 
def_bytes_0x2cd0                  EQU                               0x2cd0
def_bytes_0x2cd0                  DB                                131 2 128 1 145 56 66 30 144 29 73 129 130 7 128 1 
def_bytes_0x2ce0                  EQU                               0x2ce0
def_bytes_0x2ce0                  DB                                144 32 74 6 128 1 144 34 72 145 54 81 146 58 82 147 
def_bytes_0x2cf0                  EQU                               0x2cf0
def_bytes_0x2cf0                  DB                                65 83 7 128 8 144 34 73 146 58 67 7 208 160 45 
def_bytes_0x2da0                  EQU                               0x2da0
def_bytes_0x2da0                  DB                                128 130 1 144 34 74 7 128 1 144 58 65 7 146 37 73 
def_bytes_0x2db0                  EQU                               0x2db0
def_bytes_0x2db0                  DB                                7 128 1 130 1 144 36 72 146 60 67 6 128 7 130 1 
def_bytes_0x2dc0                  EQU                               0x2dc0
def_bytes_0x2dc0                  DB                                144 32 73 146 61 67 14 130 1 144 34 74 146 58 65 7 
def_bytes_0x2dd0                  EQU                               0x2dd0
def_bytes_0x2dd0                  DB                                128 7 130 2 144 56 68 14 128 1 144 34 73 7 128 1 
def_bytes_0x2de0                  EQU                               0x2de0
def_bytes_0x2de0                  DB                                144 34 73 129 131 6 128 1 144 27 73 145 54 84 146 58 
def_bytes_0x2df0                  EQU                               0x2df0
def_bytes_0x2df0                  DB                                84 147 65 81 7 128 8 144 27 73 147 65 91 208 160 46 
def_bytes_0x2ea0                  EQU                               0x2ea0
def_bytes_0x2ea0                  DB                                7 128 1 144 27 72 7 128 1 144 63 65 131 7 145 27 
def_bytes_0x2eb0                  EQU                               0x2eb0
def_bytes_0x2eb0                  DB                                74 130 7 128 1 129 1 144 32 72 145 56 82 146 60 84 
def_bytes_0x2ec0                  EQU                               0x2ec0
def_bytes_0x2ec0                  DB                                147 63 83 147 63 91 6 128 8 144 63 68 131 15 147 32 
def_bytes_0x2ed0                  EQU                               0x2ed0
def_bytes_0x2ed0                  DB                                72 7 131 1 147 32 72 7 131 1 147 32 73 7 131 8 
def_bytes_0x2ee0                  EQU                               0x2ee0
def_bytes_0x2ee0                  DB                                147 29 72 5 128 2 131 1 144 32 73 129 130 6 128 1 
def_bytes_0x2ef0                  EQU                               0x2ef0
def_bytes_0x2ef0                  DB                                144 34 72 145 70 82 146 63 84 147 61 82 208 160 47 
def_bytes_0x2fa0                  EQU                               0x2fa0
def_bytes_0x2fa0                  DB                                145 70 84 146 63 84 147 61 84 147 61 66 7 128 8 144 
def_bytes_0x2fb0                  EQU                               0x2fb0
def_bytes_0x2fb0                  DB                                34 73 7 128 1 144 34 73 7 128 8 144 37 73 7 128 
def_bytes_0x2fc0                  EQU                               0x2fc0
def_bytes_0x2fc0                  DB                                1 144 36 74 7 128 8 144 32 72 13 131 2 144 34 73 
def_bytes_0x2fd0                  EQU                               0x2fd0
def_bytes_0x2fd0                  DB                                146 63 66 7 128 7 130 2 144 65 66 14 128 1 144 29 
def_bytes_0x2fe0                  EQU                               0x2fe0
def_bytes_0x2fe0                  DB                                73 145 61 68 7 128 1 144 32 72 129 6 128 1 144 34 
def_bytes_0x2ff0                  EQU                               0x2ff0
def_bytes_0x2ff0                  DB                                73 145 68 82 146 63 82 147 65 82 145 68 86 208 160 48 
def_bytes_0x30a0                  EQU                               0x30a0
def_bytes_0x30a0                  DB                                146 63 85 147 65 84 146 63 67 7 128 130 8 144 32 72 
def_bytes_0x30b0                  EQU                               0x30b0
def_bytes_0x30b0                  DB                                146 63 66 7 128 130 1 144 34 73 7 128 1 144 63 66 
def_bytes_0x30c0                  EQU                               0x30c0
def_bytes_0x30c0                  DB                                7 146 37 72 7 128 1 130 1 144 36 73 147 65 66 6 
def_bytes_0x30d0                  EQU                               0x30d0
def_bytes_0x30d0                  DB                                128 7 131 1 144 63 67 14 128 1 144 56 68 14 128 2 
def_bytes_0x30e0                  EQU                               0x30e0
def_bytes_0x30e0                  DB                                144 56 67 15 146 29 73 7 130 1 145 32 74 5 128 2 
def_bytes_0x30f0                  EQU                               0x30f0
def_bytes_0x30f0                  DB                                129 1 144 34 74 145 70 81 146 61 81 208 160 49 
def_bytes_0x31a0                  EQU                               0x31a0
def_bytes_0x31a0                  DB                                147 63 84 145 70 85 146 61 86 147 63 84 6 128 8 144 
def_bytes_0x31b0                  EQU                               0x31b0
def_bytes_0x31b0                  DB                                34 74 7 128 1 144 34 74 7 128 8 144 37 74 7 128 
def_bytes_0x31c0                  EQU                               0x31c0
def_bytes_0x31c0                  DB                                1 144 36 73 7 128 8 144 32 73 7 128 8 144 34 73 
def_bytes_0x31d0                  EQU                               0x31d0
def_bytes_0x31d0                  DB                                7 128 9 146 61 67 14 130 1 144 29 72 146 58 67 7 
def_bytes_0x31e0                  EQU                               0x31e0
def_bytes_0x31e0                  DB                                128 1 144 32 72 129 131 6 130 1 128 1 144 34 73 145 
def_bytes_0x31f0                  EQU                               0x31f0
def_bytes_0x31f0                  DB                                70 82 146 63 83 147 61 81 145 70 84 208 160 50 
def_bytes_0x32a0                  EQU                               0x32a0
def_bytes_0x32a0                  DB                                146 63 85 147 61 85 6 128 8 144 32 72 145 63 66 130 
def_bytes_0x32b0                  EQU                               0x32b0
def_bytes_0x32b0                  DB                                131 7 128 1 144 34 74 146 70 83 145 63 81 147 61 84 
def_bytes_0x32c0                  EQU                               0x32c0
def_bytes_0x32c0                  DB                                146 70 86 145 63 85 147 61 84 6 129 1 128 1 144 65 
def_bytes_0x32d0                  EQU                               0x32d0
def_bytes_0x32d0                  DB                                66 130 131 7 145 37 73 7 128 1 129 1 144 36 72 145 
def_bytes_0x32e0                  EQU                               0x32e0
def_bytes_0x32e0                  DB                                63 82 146 68 83 147 72 84 145 63 85 146 68 85 147 72 
def_bytes_0x32f0                  EQU                               0x32f0
def_bytes_0x32f0                  DB                                84 145 63 65 6 128 23 146 68 86 144 80 74 208 160 51 
def_bytes_0x33a0                  EQU                               0x33a0
def_bytes_0x33a0                  DB                                6 128 129 130 2 144 56 85 145 68 72 146 80 73 5 128 
def_bytes_0x33b0                  EQU                               0x33b0
def_bytes_0x33b0                  DB                                129 130 3 144 56 65 7 128 1 144 58 66 6 128 1 144 
def_bytes_0x33c0                  EQU                               0x33c0
def_bytes_0x33c0                  DB                                29 72 145 61 68 7 128 129 1 144 32 74 145 58 66 131 
def_bytes_0x33d0                  EQU                               0x33d0
def_bytes_0x33d0                  DB                                7 128 129 1 144 27 73 145 61 83 146 65 82 147 58 82 
def_bytes_0x33e0                  EQU                               0x33e0
def_bytes_0x33e0                  DB                                146 65 83 146 65 66 6 128 8 144 27 72 6 130 1 128 
def_bytes_0x33f0                  EQU                               0x33f0
def_bytes_0x33f0                  DB                                1 144 27 74 7 128 1 144 65 86 146 73 83 208 160 52 
def_bytes_0x34a0                  EQU                               0x34a0
def_bytes_0x34a0                  DB                                144 65 67 7 144 36 72 129 131 7 128 130 1 144 34 73 
def_bytes_0x34b0                  EQU                               0x34b0
def_bytes_0x34b0                  DB                                145 63 81 146 60 82 147 56 82 145 63 85 145 63 68 7 
def_bytes_0x34c0                  EQU                               0x34c0
def_bytes_0x34c0                  DB                                128 8 129 1 144 32 73 6 128 8 144 32 74 7 128 9 
def_bytes_0x34d0                  EQU                               0x34d0
def_bytes_0x34d0                  DB                                144 80 78 147 56 67 7 131 1 145 58 65 6 129 1 145 
def_bytes_0x34e0                  EQU                               0x34e0
def_bytes_0x34e0                  DB                                29 73 147 61 68 7 129 131 1 145 32 73 146 58 66 5 
def_bytes_0x34f0                  EQU                               0x34f0
def_bytes_0x34f0                  DB                                128 2 129 130 1 144 29 72 145 56 84 208 160 53 
def_bytes_0x35a0                  EQU                               0x35a0
def_bytes_0x35a0                  DB                                146 60 83 147 53 81 6 128 8 144 29 74 7 128 1 144 
def_bytes_0x35b0                  EQU                               0x35b0
def_bytes_0x35b0                  DB                                29 74 7 128 1 144 63 83 144 63 66 7 145 36 74 130 
def_bytes_0x35c0                  EQU                               0x35c0
def_bytes_0x35c0                  DB                                131 7 128 1 129 1 144 34 73 145 61 82 146 65 82 147 
def_bytes_0x35d0                  EQU                               0x35d0
def_bytes_0x35d0                  DB                                58 84 145 61 83 146 65 84 145 61 65 6 128 8 129 130 
def_bytes_0x35e0                  EQU                               0x35e0
def_bytes_0x35e0                  DB                                8 144 60 68 7 128 1 144 34 73 147 58 66 7 128 1 
def_bytes_0x35f0                  EQU                               0x35f0
def_bytes_0x35f0                  DB                                144 34 74 5 131 1 128 1 144 34 73 208 160 54 
def_bytes_0x36a0                  EQU                               0x36a0
def_bytes_0x36a0                  DB                                145 92 80 146 56 66 7 128 129 130 1 144 36 73 145 90 
def_bytes_0x36b0                  EQU                               0x36b0
def_bytes_0x36b0                  DB                                78 146 58 66 6 128 129 130 1 144 89 78 145 61 68 7 
def_bytes_0x36c0                  EQU                               0x36c0
def_bytes_0x36c0                  DB                                128 129 1 144 34 72 145 85 79 146 58 66 7 128 130 1 
def_bytes_0x36d0                  EQU                               0x36d0
def_bytes_0x36d0                  DB                                144 27 72 146 61 83 147 65 83 146 61 65 6 128 9 144 
def_bytes_0x36e0                  EQU                               0x36e0
def_bytes_0x36e0                  DB                                27 74 7 128 1 144 27 74 4 130 2 128 1 144 63 68 
def_bytes_0x36f0                  EQU                               0x36f0
def_bytes_0x36f0                  DB                                7 146 36 74 131 4 129 3 128 1 130 1 208 160 55 
def_bytes_0x37a0                  EQU                               0x37a0
def_bytes_0x37a0                  DB                                144 34 73 145 63 81 146 60 81 147 56 83 146 60 65 6 
def_bytes_0x37b0                  EQU                               0x37b0
def_bytes_0x37b0                  DB                                128 8 144 32 73 6 130 1 128 1 144 58 67 7 128 1 
def_bytes_0x37c0                  EQU                               0x37c0
def_bytes_0x37c0                  DB                                144 32 73 147 56 67 7 128 7 131 1 144 80 78 146 56 
def_bytes_0x37d0                  EQU                               0x37d0
def_bytes_0x37d0                  DB                                65 14 130 1 146 32 72 145 63 67 7 130 1 145 32 73 
def_bytes_0x37e0                  EQU                               0x37e0
def_bytes_0x37e0                  DB                                7 129 1 145 29 73 146 56 81 147 60 82 6 129 9 145 
def_bytes_0x37f0                  EQU                               0x37f0
def_bytes_0x37f0                  DB                                29 74 7 129 1 145 29 72 6 129 1 208 160 56 
def_bytes_0x38a0                  EQU                               0x38a0
def_bytes_0x38a0                  DB                                145 65 86 7 146 36 73 131 7 130 1 146 34 72 147 61 
def_bytes_0x38b0                  EQU                               0x38b0
def_bytes_0x38b0                  DB                                81 145 65 84 7 130 20 128 4 144 32 74 146 68 86 5 
def_bytes_0x38c0                  EQU                               0x38c0
def_bytes_0x38c0                  DB                                130 2 128 1 144 68 87 146 80 73 4 128 130 131 3 144 
def_bytes_0x38d0                  EQU                               0x38d0
def_bytes_0x38d0                  DB                                32 74 146 92 79 147 56 66 7 128 129 130 131 1 144 32 
def_bytes_0x38e0                  EQU                               0x38e0
def_bytes_0x38e0                  DB                                72 145 90 80 146 58 67 6 128 129 130 1 144 89 79 145 
def_bytes_0x38f0                  EQU                               0x38f0
def_bytes_0x38f0                  DB                                61 66 7 128 129 1 144 37 74 145 85 79 208 160 57 
def_bytes_0x39a0                  EQU                               0x39a0
def_bytes_0x39a0                  DB                                146 58 67 7 128 130 1 144 27 74 146 61 84 147 65 82 
def_bytes_0x39b0                  EQU                               0x39b0
def_bytes_0x39b0                  DB                                147 65 67 6 128 9 144 27 74 5 131 2 128 1 144 27 
def_bytes_0x39c0                  EQU                               0x39c0
def_bytes_0x39c0                  DB                                72 6 128 1 144 63 83 147 73 86 7 146 36 73 4 129 
def_bytes_0x39d0                  EQU                               0x39d0
def_bytes_0x39d0                  DB                                3 128 130 131 1 144 34 74 145 56 84 146 63 81 147 60 
def_bytes_0x39e0                  EQU                               0x39e0
def_bytes_0x39e0                  DB                                83 146 63 85 146 63 66 7 128 8 144 32 74 7 128 9 
def_bytes_0x39f0                  EQU                               0x39f0
def_bytes_0x39f0                  DB                                144 32 73 7 128 5 130 3 144 80 80 208 160 58 
def_bytes_0x3aa0                  EQU                               0x3aa0
def_bytes_0x3aa0                  DB                                145 56 66 7 129 1 145 58 68 6 129 1 145 29 74 146 
def_bytes_0x3ab0                  EQU                               0x3ab0
def_bytes_0x3ab0                  DB                                61 67 7 129 130 1 145 32 74 146 58 67 131 5 128 2 
def_bytes_0x3ac0                  EQU                               0x3ac0
def_bytes_0x3ac0                  DB                                129 130 1 144 29 74 145 56 84 146 60 84 147 53 84 6 
def_bytes_0x3ad0                  EQU                               0x3ad0
def_bytes_0x3ad0                  DB                                128 9 144 29 74 7 128 1 144 29 72 6 128 1 144 68 
def_bytes_0x3ae0                  EQU                               0x3ae0
def_bytes_0x3ae0                  DB                                85 146 60 67 7 145 36 74 130 131 7 128 129 1 144 34 
def_bytes_0x3af0                  EQU                               0x3af0
def_bytes_0x3af0                  DB                                72 145 61 82 146 65 81 147 58 84 146 65 85 208 160 59 
def_bytes_0x3ba0                  EQU                               0x3ba0
def_bytes_0x3ba0                  DB                                145 61 66 7 128 14 129 1 130 1 144 63 85 145 72 85 
def_bytes_0x3bb0                  EQU                               0x3bb0
def_bytes_0x3bb0                  DB                                146 68 84 7 128 129 130 1 144 34 74 145 61 85 146 70 
def_bytes_0x3bc0                  EQU                               0x3bc0
def_bytes_0x3bc0                  DB                                86 147 58 66 7 128 1 144 34 74 6 131 1 128 129 130 
def_bytes_0x3bd0                  EQU                               0x3bd0
def_bytes_0x3bd0                  DB                                1 144 34 74 145 92 78 146 56 68 6 128 129 130 1 144 
def_bytes_0x3be0                  EQU                               0x3be0
def_bytes_0x3be0                  DB                                36 72 145 90 79 146 58 66 6 128 129 130 1 144 89 78 
def_bytes_0x3bf0                  EQU                               0x3bf0
def_bytes_0x3bf0                  DB                                145 61 67 7 128 129 1 144 34 74 145 85 80 208 160 60 
def_bytes_0x3ca0                  EQU                               0x3ca0
def_bytes_0x3ca0                  DB                                146 58 66 7 128 130 1 144 27 73 146 61 82 147 65 82 
def_bytes_0x3cb0                  EQU                               0x3cb0
def_bytes_0x3cb0                  DB                                146 61 66 6 128 9 144 27 74 7 128 1 144 27 74 4 
def_bytes_0x3cc0                  EQU                               0x3cc0
def_bytes_0x3cc0                  DB                                130 2 128 1 144 63 66 8 146 36 73 131 3 129 3 128 
def_bytes_0x3cd0                  EQU                               0x3cd0
def_bytes_0x3cd0                  DB                                1 130 1 144 34 73 145 63 84 146 60 84 147 56 82 146 
def_bytes_0x3ce0                  EQU                               0x3ce0
def_bytes_0x3ce0                  DB                                60 66 6 128 8 144 32 73 6 130 1 128 1 144 58 65 
def_bytes_0x3cf0                  EQU                               0x3cf0
def_bytes_0x3cf0                  DB                                7 128 1 144 32 72 147 56 67 7 128 8 208 160 8 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts
_fontId_                          EQU                               0x7ca1
_fontId_                          DB                                0
def_char_0x7dd5                   EQU                               0x7dd5
def_char_0x7dd5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x7daa                   EQU                               0x7daa
def_char_0x7daa                   DB                                8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 249 
def_char_0x7cd5                   EQU                               0x7cd5
def_char_0x7cd5                   DB                                8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x7caa                   EQU                               0x7caa
def_char_0x7caa                   DB                                8 0 8 0 8 8 8 0 8 0 8 8 0 0 0 0 0 8 8 0 8 0 8 8 0 0 0 0 0 8 8 0 8 0 8 8 8 0 8 0 8 8 249 
def_char_0x7bd5                   EQU                               0x7bd5
def_char_0x7bd5                   DB                                8 8 0 8 8 8 8 0 0 0 0 8 0 8 0 8 8 8 8 0 0 0 8 8 8 8 0 8 0 8 0 0 0 0 8 8 8 8 0 8 8 8 249 
def_char_0x7baa                   EQU                               0x7baa
def_char_0x7baa                   DB                                0 0 8 8 0 8 0 0 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 0 0 8 0 8 8 0 0 8 249 
def_char_0x7ad5                   EQU                               0x7ad5
def_char_0x7ad5                   DB                                8 0 8 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 8 0 8 8 8 8 0 8 0 8 0 8 0 8 8 0 8 8 8 0 0 8 0 8 249 
def_char_0x7aaa                   EQU                               0x7aaa
def_char_0x7aaa                   DB                                8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x79d5                   EQU                               0x79d5
def_char_0x79d5                   DB                                8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 249 
def_char_0x79aa                   EQU                               0x79aa
def_char_0x79aa                   DB                                8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 249 
def_char_0x78d5                   EQU                               0x78d5
def_char_0x78d5                   DB                                8 8 0 8 8 8 0 8 0 8 0 8 8 0 0 0 8 8 8 8 0 8 8 8 8 0 0 0 8 8 0 8 0 8 0 8 8 8 0 8 8 8 249 
def_char_0x78aa                   EQU                               0x78aa
def_char_0x78aa                   DB                                8 8 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 249 
def_char_0x77d5                   EQU                               0x77d5
def_char_0x77d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 249 
def_char_0x77aa                   EQU                               0x77aa
def_char_0x77aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x76d5                   EQU                               0x76d5
def_char_0x76d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 249 
def_char_0x76aa                   EQU                               0x76aa
def_char_0x76aa                   DB                                8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x75d5                   EQU                               0x75d5
def_char_0x75d5                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x75aa                   EQU                               0x75aa
def_char_0x75aa                   DB                                8 8 0 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x74d5                   EQU                               0x74d5
def_char_0x74d5                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x74aa                   EQU                               0x74aa
def_char_0x74aa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 8 8 8 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x73d5                   EQU                               0x73d5
def_char_0x73d5                   DB                                8 8 0 0 8 8 8 0 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 0 0 0 0 8 8 8 8 0 8 8 8 8 8 0 8 8 249 
def_char_0x73aa                   EQU                               0x73aa
def_char_0x73aa                   DB                                0 0 0 0 0 8 0 8 8 8 8 8 0 0 0 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x72d5                   EQU                               0x72d5
def_char_0x72d5                   DB                                8 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x72aa                   EQU                               0x72aa
def_char_0x72aa                   DB                                0 0 0 0 0 8 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x71d5                   EQU                               0x71d5
def_char_0x71d5                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x71aa                   EQU                               0x71aa
def_char_0x71aa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 0 0 8 8 8 249 
def_char_0x70d5                   EQU                               0x70d5
def_char_0x70d5                   DB                                8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 8 8 8 8 8 8 249 
def_char_0x70aa                   EQU                               0x70aa
def_char_0x70aa                   DB                                8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 249 
def_char_0x6fd5                   EQU                               0x6fd5
def_char_0x6fd5                   DB                                8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 249 
def_char_0x6faa                   EQU                               0x6faa
def_char_0x6faa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 8 8 8 8 8 8 8 0 0 0 0 0 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x6ed5                   EQU                               0x6ed5
def_char_0x6ed5                   DB                                0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x6eaa                   EQU                               0x6eaa
def_char_0x6eaa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 249 
def_char_0x6dd5                   EQU                               0x6dd5
def_char_0x6dd5                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 8 8 8 8 0 8 8 0 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 0 0 0 8 8 249 
def_char_0x6daa                   EQU                               0x6daa
def_char_0x6daa                   DB                                8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x6cd5                   EQU                               0x6cd5
def_char_0x6cd5                   DB                                0 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 0 0 0 0 8 8 249 
def_char_0x6caa                   EQU                               0x6caa
def_char_0x6caa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x6bd5                   EQU                               0x6bd5
def_char_0x6bd5                   DB                                0 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 0 0 0 0 8 8 249 
def_char_0x6baa                   EQU                               0x6baa
def_char_0x6baa                   DB                                0 0 0 0 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x6ad5                   EQU                               0x6ad5
def_char_0x6ad5                   DB                                0 0 0 0 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x6aaa                   EQU                               0x6aaa
def_char_0x6aaa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 0 8 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x69d5                   EQU                               0x69d5
def_char_0x69d5                   DB                                0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x69aa                   EQU                               0x69aa
def_char_0x69aa                   DB                                8 0 0 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x68d5                   EQU                               0x68d5
def_char_0x68d5                   DB                                8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x68aa                   EQU                               0x68aa
def_char_0x68aa                   DB                                0 8 8 8 0 8 0 8 8 0 8 8 0 8 0 8 8 8 0 0 8 8 8 8 0 8 0 8 8 8 0 8 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x67d5                   EQU                               0x67d5
def_char_0x67d5                   DB                                0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x67aa                   EQU                               0x67aa
def_char_0x67aa                   DB                                0 8 8 8 0 8 0 0 8 0 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x66d5                   EQU                               0x66d5
def_char_0x66d5                   DB                                0 8 8 8 0 8 0 0 8 8 0 8 0 8 0 8 0 8 0 8 8 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x66aa                   EQU                               0x66aa
def_char_0x66aa                   DB                                0 0 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 0 8 249 
def_char_0x65d5                   EQU                               0x65d5
def_char_0x65d5                   DB                                0 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x65aa                   EQU                               0x65aa
def_char_0x65aa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 0 8 0 8 0 8 8 0 8 8 8 0 0 8 0 8 249 
def_char_0x64d5                   EQU                               0x64d5
def_char_0x64d5                   DB                                0 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x64aa                   EQU                               0x64aa
def_char_0x64aa                   DB                                8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 8 0 0 0 8 8 8 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x63d5                   EQU                               0x63d5
def_char_0x63d5                   DB                                0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x63aa                   EQU                               0x63aa
def_char_0x63aa                   DB                                0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x62d5                   EQU                               0x62d5
def_char_0x62d5                   DB                                0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 249 
def_char_0x62aa                   EQU                               0x62aa
def_char_0x62aa                   DB                                0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 0 8 0 8 8 249 
def_char_0x61d5                   EQU                               0x61d5
def_char_0x61d5                   DB                                0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x61aa                   EQU                               0x61aa
def_char_0x61aa                   DB                                0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x60d5                   EQU                               0x60d5
def_char_0x60d5                   DB                                0 0 0 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x60aa                   EQU                               0x60aa
def_char_0x60aa                   DB                                8 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 8 8 249 
def_char_0x5fd5                   EQU                               0x5fd5
def_char_0x5fd5                   DB                                8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 8 249 
def_char_0x5faa                   EQU                               0x5faa
def_char_0x5faa                   DB                                8 0 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 8 8 249 
def_char_0x5ed5                   EQU                               0x5ed5
def_char_0x5ed5                   DB                                8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x5eaa                   EQU                               0x5eaa
def_char_0x5eaa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 0 249 
def_char_0x5dd5                   EQU                               0x5dd5
def_char_0x5dd5                   DB                                8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x5daa                   EQU                               0x5daa
def_char_0x5daa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 8 8 8 0 8 8 8 0 0 0 8 8 0 8 8 0 8 8 8 0 0 8 0 8 249 
def_char_0x5cd5                   EQU                               0x5cd5
def_char_0x5cd5                   DB                                0 8 8 8 8 8 0 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 0 8 0 0 8 8 0 8 0 8 0 0 8 8 249 
def_char_0x5caa                   EQU                               0x5caa
def_char_0x5caa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x5bd5                   EQU                               0x5bd5
def_char_0x5bd5                   DB                                8 8 8 8 0 8 8 8 8 8 0 8 8 0 0 8 0 8 0 8 8 0 0 8 0 8 8 8 0 8 0 8 8 0 0 8 8 0 0 8 0 8 249 
def_char_0x5baa                   EQU                               0x5baa
def_char_0x5baa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 0 0 0 0 0 8 0 8 8 8 8 8 8 0 0 0 8 8 249 
def_char_0x5ad5                   EQU                               0x5ad5
def_char_0x5ad5                   DB                                8 8 8 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x5aaa                   EQU                               0x5aaa
def_char_0x5aaa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 8 0 0 0 0 8 8 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x59d5                   EQU                               0x59d5
def_char_0x59d5                   DB                                0 8 8 8 8 8 0 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x59aa                   EQU                               0x59aa
def_char_0x59aa                   DB                                8 8 0 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x58d5                   EQU                               0x58d5
def_char_0x58d5                   DB                                8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 0 8 8 0 8 8 8 0 0 8 8 8 249 
def_char_0x58aa                   EQU                               0x58aa
def_char_0x58aa                   DB                                0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 8 0 8 8 0 8 8 0 8 0 8 8 8 0 0 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x57d5                   EQU                               0x57d5
def_char_0x57d5                   DB                                8 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x57aa                   EQU                               0x57aa
def_char_0x57aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 0 8 0 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 249 
def_char_0x56d5                   EQU                               0x56d5
def_char_0x56d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x56aa                   EQU                               0x56aa
def_char_0x56aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x55d5                   EQU                               0x55d5
def_char_0x55d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 0 0 8 8 8 0 8 8 8 8 249 
def_char_0x55aa                   EQU                               0x55aa
def_char_0x55aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 8 0 0 0 8 8 8 8 8 0 8 249 
def_char_0x54d5                   EQU                               0x54d5
def_char_0x54d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x54aa                   EQU                               0x54aa
def_char_0x54aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 8 0 8 8 8 8 8 8 0 0 0 8 8 8 8 8 8 0 8 0 0 0 0 8 8 249 
def_char_0x53d5                   EQU                               0x53d5
def_char_0x53d5                   DB                                8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 0 8 249 
def_char_0x53aa                   EQU                               0x53aa
def_char_0x53aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 0 0 8 8 0 0 8 0 8 249 
def_char_0x52d5                   EQU                               0x52d5
def_char_0x52d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 249 
def_char_0x52aa                   EQU                               0x52aa
def_char_0x52aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 0 8 0 8 8 249 
def_char_0x51d5                   EQU                               0x51d5
def_char_0x51d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x51aa                   EQU                               0x51aa
def_char_0x51aa                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 8 0 0 8 8 0 0 8 0 8 8 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x50d5                   EQU                               0x50d5
def_char_0x50d5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x50aa                   EQU                               0x50aa
def_char_0x50aa                   DB                                8 8 8 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 0 8 249 
def_char_0x4fd5                   EQU                               0x4fd5
def_char_0x4fd5                   DB                                8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x4faa                   EQU                               0x4faa
def_char_0x4faa                   DB                                0 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 8 8 8 8 249 
def_char_0x4ed5                   EQU                               0x4ed5
def_char_0x4ed5                   DB                                8 8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 0 8 0 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x4eaa                   EQU                               0x4eaa
def_char_0x4eaa                   DB                                0 8 0 8 0 8 8 0 8 0 8 8 0 8 0 8 0 8 8 0 8 0 8 8 0 8 0 8 0 8 8 0 8 0 8 8 0 8 0 8 0 8 249 
def_baseline_0x7da3               EQU                               0x7da3
def_baseline_0x7da3               DB                                0x08 0x08 0x08 0x08 0x08 0x08 255

; Lookup Tables
_fontLut_0x0634                   EQU                               0x0634
_fontLut_0x0634                   DW                                0x0000 0x7da3 0x7dd5 0x7daa 0x7cd5 0x7caa 0x7bd5 0x7baa 0x7ad5 0x7aaa 0x79d5 0x79aa 0x78d5 0x78aa 0x77d5 0x77aa 0x76d5 0x76aa 0x75d5 0x75aa 0x74d5 0x74aa 0x73d5 0x73aa 0x72d5 0x72aa 0x71d5 0x71aa 0x70d5 0x70aa 0x6fd5 0x6faa 0x6ed5 0x6eaa 0x6dd5 0x6daa 0x6cd5 0x6caa 0x6bd5 0x6baa 0x6ad5 0x6aaa 0x69d5 0x69aa 0x68d5 0x68aa 0x67d5 0x67aa 0x66d5 0x66aa 0x65d5 0x65aa 0x64d5 0x64aa 0x63d5 0x63aa 0x62d5 0x62aa 0x61d5 0x61aa 0x60d5 0x60aa 0x5fd5 0x5faa 0x5ed5 0x5eaa 0x5dd5 0x5daa 0x5cd5 0x5caa 0x5bd5 0x5baa 0x5ad5 0x5aaa 0x59d5 0x59aa 0x58d5 0x58aa 0x57d5 0x57aa 0x56d5 0x56aa 0x55d5 0x55aa 0x54d5 0x54aa 0x53d5 0x53aa 0x52d5 0x52aa 0x51d5 0x51aa 0x50d5 0x50aa 0x4fd5 0x4faa 0x4ed5 0x4eaa 
_fontsLut_                        EQU                               0x7ba3
_fontsLut_                        DW                                0x0634 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  InitNeOp                        
                                  InitLtOp                        
                                  InitGtOp                        
                                  InitRealTimeStub                
%define TIME_SLICING                                                                            ; Main: INIT

                                  LDI                               8
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, fgBgColour

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  ClearVertBlinds                                               ; Main: cls

                                  SoundAllOff                                                   ; Main: sound off

                                  PrintString                       _str_0x4de5
                                  NewLine                                                       ; Main: print " ________________________"

                                  NewLine                                                       ; Main: print

                                  PrintString                       _str_0x4dcd
                                  NewLine                                                       ; Main: print "   SEGA SC-3000H BASIC"

                                  PrintString                       _str_0x4db6
                                  NewLine                                                       ; Main: print "    Level 3.0 ver 1.0"

                                  PrintString                       _str_0x4ce8
                                  NewLine                                                       ; Main: print "   Export Version With"

                                  PrintString                       _str_0x4da4
                                  NewLine                                                       ; Main: print "        Diereses"

                                  PrintString                       _str_0x4cd1
                                  NewLine                                                       ; Main: print "   Copyright 1983 (C)"

                                  PrintString                       _str_0x4cbf
                                  NewLine                                                       ; Main: print "        by MITEC"

                                  PrintString                       _str_0x4de5
                                  NewLine                                                       ; Main: print " ________________________"

                                  NewLine                                                       ; Main: print

                                  PrintString                       _str_0x4cab
                                  NewLine                                                       ; Main: print "  26620 Bytes free"

                                  PrintString                       _str_0x7ca2
                                  NewLine                                                       ; Main: print " Ready"

                                  LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  STW                               _done                       ; Main: done = 0

                                  LDI                               8
                                  STW                               _duration
                                  LDWI                              _beep
                                  CALL                              giga_vAC                    ; Main: duration = 8 : gosub beep

_loop                             LDI                               8
                                  ST                                cursorXY
                                  LDI                               96
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  LDI                               127
                                  PrintAcChar                       
                                  NewLine                                                       ; Main: at 8,96 : print chr$(127)

                                  LDWI                              _waitKey
                                  CALL                              giga_vAC                    ; Main: gosub waitKey

                                  LDW                               _done
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _else_0x0324 0
                                  LDWI                              _ohNoes
                                  CALL                              giga_vAC                    ; Main: if done = 1 then goto ohNoes

_else_0x0324                      LDI                               8
                                  ST                                cursorXY
                                  LDI                               96
                                  ST                                cursorXY + 1
                                  AtTextCursor                      
                                  PrintString                       _str_0x7da0
                                  NewLine                                                       ; Main: at 8,96 : print " "

                                  LDWI                              _waitKey
                                  CALL                              giga_vAC                    ; Main: gosub waitKey

                                  LDW                               _done
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _else_0x035c 1
                                  LDWI                              _ohNoes
                                  CALL                              giga_vAC                    ; Main: if done = 1 then goto ohNoes

_else_0x035c                      LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: goto loop

_waitKey                          PUSH                              
                                  LDI                               1
                                  STW                               _i                          ; Main: for i=1 to 15

_next_0x0366                      WaitVBlank                                                    ; Main: wait

                                  LD                                giga_serialRaw
                                  STW                               _k                          ; Main: k = get("SERIAL_RAW")

                                  LDW                               _k
                                  XORI                              255
                                  CALL                              convertNeOpAddr
                                  JumpFalse                         _endif_0x038c 2             ; Main: if k <> 255

                                  LDI                               1
                                  STW                               _done                       ; Main: done = 1

                                  LDWI                              _break
                                  CALL                              giga_vAC                    ; Main: goto break

_endif_0x038c                     ForNextFarInc                     _i _next_0x0366 15          ; Main: next i

_break                            Return                                                        ; Main: return

_ohNoes                           LDI                               3
                                  STW                               _duration
                                  LDWI                              _beep
                                  CALL                              giga_vAC                    ; Main: duration = 3 : gosub beep

                                  LDI                               8
                                  ST                                cursorXY
                                  LDI                               96
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; Main: at 8,96

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 to 2

_next_0x03b6                      LDI                               1
                                  STW                               _j
                                  LDWI                              0x79a4
                                  ADDW                              _i
                                  ADDW                              _i
                                  DEEK                              
                                  STW                               0xb4
                                  LDI                               1
                                  STW                               0xb6                        ; Main: for j=1 to l(i) 'skip past length byte

_next_0x03d0                      LDWI                              0x7aa4
                                  ADDW                              _i
                                  ADDW                              _i
                                  DEEK                              
                                  ADDW                              _j
                                  PEEK                              
                                  PrintAcChar                       
                                  LDWI                              _printCursor
                                  CALL                              giga_vAC                    ; Main: print chr$(peek(a(i) + j)); : gosub printCursor

                                  LDI                               3
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  STW                               _duration
                                  LDWI                              _beep
                                  CALL                              giga_vAC                    ; Main: duration = 3 : gosub beep

                                  Rand                              
                                  ANDI                              15
                                  ADDI                              2
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait (rnd(0) AND 15) + 2

                                  ForNextFarVarAdd                  _j _next_0x03d0 0xb4 0xb6   ; Main: next j

                                  PrintString                       _str_0x7da0
                                  NewLine                                                       ; Main: print " "

                                  LDI                               8
                                  ST                                cursorXY
                                  AtTextCursor                                                  ; Main: at 8

                                  ForNextFarInc                     _i _next_0x03b6 2           ; Main: next i

                                  NewLine                                                       ; Main: print

                                  LDWI                              playMidiVol
                                  STW                               realTimeProc0
                                  LDWI                              setRealTimeProc0
                                  CALL                              giga_vAC                    ; Main: init midiv

                                  LDI                               3
                                  ST                                waveType + 1
                                  LDWI                              2208
                                  PlayMidiV                                                     ; Main: play midiv, &h08A0, 3

                                  LDI                               1
                                  STW                               _i                          ; Main: for i=1 to 20

_next_0x0473                      LDI                               8
                                  ST                                cursorXY
                                  AtTextCursor                                                  ; Main: at 8

                                  PrintString                       _str_0x78a1
                                  NewLine                                                       ; Main: print "Gotcha!"

                                  ForNextFarInc                     _i _next_0x0473 20          ; Main: next i

                                  ResetVideoTable                                               ; Main: cls INIT

                                  Rand                              
                                  ANDI                              63
                                  STW                               _colour                     ; Main: colour = rnd(0) AND 63

                                  LDI                               1
                                  STW                               _stepX
                                  STW                               _stepY                      ; Main: stepX = 1 : stepY = stepX

                                  LDI                               0x59
                                  RandMod                           
                                  ADDI                              10
                                  STW                               _posX                       ; Main: posX = rnd(89) + 10

                                  LDI                               0x65
                                  RandMod                           
                                  ADDI                              10
                                  STW                               _posY                       ; Main: posY = rnd(101) + 10

_forever                          LDW                               _posX
                                  ST                                cursorXY
                                  LDW                               _posY
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; Main: at posX, posY

                                  WaitVBlank                                                    ; Main: wait

                                  PrintString                       _str_0x4bcf                 ; Main: print "RickRolled";

                                  LDW                               _posX
                                  ANDI                              1
                                  JumpFalse                         _endif_0x052c 3             ; Main: if posX AND 1 == 1

                                  Rand                              
                                  ANDI                              7
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  STW                               0xe8
                                  LDWI                              1784
                                  ADDW                              0xe8
                                  PEEK                              
                                  XORW                              _colour
                                  STW                               _colour                     ; Main: colour = colour XOR peek(colourBits + (rnd(0) AND 7))

                                  LDW                               _colour
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, colour

_endif_0x052c                     LDW                               _posX
                                  SUBI                              1
                                  STW                               drawRect_x1
                                  LDW                               _posY
                                  SUBI                              1
                                  STW                               drawRect_y1
                                  LDW                               _posX
                                  ADDI                              60
                                  STW                               drawRect_x2
                                  LDW                               _posY
                                  ADDI                              8
                                  STW                               drawRect_y2
                                  DrawRect                                                      ; Main: rect posX-1, posY-1, posX+60, posY+8

                                  LDW                               _posX
                                  ADDW                              _stepX
                                  STW                               _posX                       ; Main: posX = posX + stepX

                                  LDW                               _posX
                                  SUBI                              98
                                  CALL                              convertGtOpAddr
                                  STW                               0xe8
                                  LDW                               _posX
                                  SUBI                              2
                                  CALL                              convertLtOpAddr
                                  ORW                               0xe8
                                  JumpFalse                         _endif_0x0591 4             ; Main: if (posX > 98) OR (posX < 2)

                                  LDI                               0
                                  SUBW                              _stepX
                                  STW                               _stepX                      ; Main: stepX = -stepX

                                  LDW                               _posX
                                  ADDW                              _stepX
                                  STW                               _posX                       ; Main: posX = posX + stepX

_endif_0x0591                     LDW                               _posY
                                  ADDW                              _stepY
                                  STW                               _posY                       ; Main: posY = posY + stepY

                                  LDW                               _posY
                                  SUBI                              110
                                  CALL                              convertGtOpAddr
                                  STW                               0xe8
                                  LDW                               _posY
                                  SUBI                              2
                                  CALL                              convertLtOpAddr
                                  ORW                               0xe8
                                  JumpFalse                         _endif_0x05c9 5             ; Main: if (posY > 110) OR (posY < 2)

                                  LDI                               0
                                  SUBW                              _stepY
                                  STW                               _stepY                      ; Main: stepY = -stepY

                                  LDW                               _posY
                                  ADDW                              _stepY
                                  STW                               _posY                       ; Main: posY = posY + stepY

_endif_0x05c9                     LDWI                              _forever
                                  CALL                              giga_vAC                    ; Main: goto forever

_printCursor                      PUSH                              
                                  LDW                               cursorXY
                                  STW                               _cursor                     ; Main: cursor = get("CURSOR_XY")

                                  LDI                               127
                                  PrintAcChar                                                   ; Main: print chr$(127);

                                  LDW                               _cursor
                                  STW                               cursorXY                    ; Main: set CURSOR_XY, cursor

                                  Return                                                        ; Main: return

_beep                             PUSH                              
                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDWI                              8200
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               1
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, 8200, 63, 1

                                  LDW                               _duration
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, duration

                                  LDW                               _duration
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait duration

                                  SoundAllOff                                                   ; Main: sound off

                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x3fe8
realTimeStub                      EQU     0x3fc0
convertEqOp                       EQU     0x76a1
convertNeOp                       EQU     0x75a1
convertLtOp                       EQU     0x74a1
convertGtOp                       EQU     0x73a1
setRealTimeProc0                  EQU     0x3fae
divide16bit                       EQU     0x47a8
rand16bit                         EQU     0x72a2
randMod16bit                      EQU     0x44a2
scanlineMode                      EQU     0x77a0
waitVBlank                        EQU     0x3fa2
waitVBlanks                       EQU     0x40a1
resetVideoFlags                   EQU     0x3ed0
resetVideoTable                   EQU     0x40d9
initClearFuncs                    EQU     0x3edc
clearVertBlinds                   EQU     0x42c9
clearCursorRow                    EQU     0x41cf
drawHLine                         EQU     0x4ba2
drawVLine                         EQU     0x49a1
drawRect                          EQU     0x43c0
resetMidi                         EQU     0x41a5
playMidi                          EQU     0x45af
playMidiVol                       EQU     0x46aa
midiStartNote                     EQU     0x44b5
soundAllOff                       EQU     0x3fd2
soundOnV                          EQU     0x42a1
printInit                         EQU     0x3eed
printText                         EQU     0x43a7
printChr                          EQU     0x45a2
printChar                         EQU     0x4aa0
atTextCursor                      EQU     0x40b4
newLineScroll                     EQU     0x48a2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       LDWI    waitVBlank
                    CALL    giga_vAC
                    BRA     waitVB_loop


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET


                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr

%if TIME_SLICING
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
%else
resetVT_loop        LDW     vramAddr
%endif
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    POP
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



drawHLine           PUSH
                    LD      drawHLine_x1
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LD      drawHLine_x2
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x1
                    SUBW    drawHLine_x2
                    
drawHL_cont         ADDI    1
                    ST      giga_sysArg0                    ; count
                    LD      fgbgColour + 1
                    ST      giga_sysArg1                    ; fill value
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg3                    ; high start address
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    SYS     54                              ; fill memory
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    POP
                    RET



drawVLine           PUSH
                    LDW     drawVLine_y2
                    SUBW    drawVLine_y1
                    BGE     drawVL_cont
                    LDW     drawVLine_y2
                    STW     drawLine_tmp
                    LDW     drawVLine_y1
                    STW     drawVLine_y2
                    LDW     drawLine_tmp
                    STW     drawVLine_y1                    ; if y2 < y1 then swap y2 with y1
                    
drawVL_cont         LD      drawVLine_x1
                    ST      giga_sysArg4
                    LD      drawVLine_y1
                    ADDI    8
                    ST      drawVLine_y1
                    ST      giga_sysArg5
                    LDW     drawVLine_y2
                    ADDI    8
                    ST      drawVLine_y2
                    SUBW    drawVLine_y1
                    SUBI    8
                    BLT     drawVL_loop1
                    
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn                      ; setup 8 pixel SYS routine
                    
                    LDW     drawVLine_y2
                    SUBI    7
                    STW     drawVLine_y8                    ; 8 pixel chunks limit

drawVL_loop0        LDI     0xFF
                    ST      giga_sysArg2                    ; 8 pixels of fg and bg colour
                    SYS     134                             ; SYS_VDrawBits_134, 270 - 134/2 = 0xCB
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      giga_sysArg5
                    ADDI    8
                    ST      giga_sysArg5
                    SUBW    drawVLine_y8
                    BLT     drawVL_loop0                    ; all 8 pixel chunks
                    
drawVL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg5
                    LD      giga_sysArg5
                    SUBW    drawVLine_y2
                    BLE     drawVL_loop1                    ; remaining pixels
                    POP
                    RET


drawRect            PUSH
                    LDW     drawRect_x1
                    STW     drawHLine_x1
                    LDW     drawRect_y1
                    STW     drawHLine_y1
                    LDW     drawRect_x2
                    STW     drawHLine_x2
                    LDWI    drawHLine
                    CALL    giga_vAC
                    LDW     drawRect_y2
                    STW     drawHLine_y1
                    LDWI    drawHLine
                    CALL    giga_vAC

                    LDW     drawRect_x1
                    STW     drawVLine_x1
                    LDW     drawRect_y1
                    STW     drawVLine_y1
                    LDW     drawRect_y2
                    STW     drawVLine_y2
                    LDWI    drawVLine
                    CALL    giga_vAC
                    LDW     drawRect_x2
                    STW     drawVLine_x1
                    LDW     drawRect_y1
                    STW     drawVLine_y1
                    LDW     drawRect_y2
                    STW     drawVLine_y2
                    LDWI    drawVLine
                    CALL    giga_vAC

                    POP
                    RET



audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


                    ; adds 10*16.66667ms delay between giga_frameCount and midiDelay so that if there ; is substantial processing between resetMidi and playMidi giga_frameCount will
                    ; not overflow past midiDelay and cause an extra initial 256*16.66667ms delay
resetMidi           LDI     0      
                    ST      giga_frameCount
                    ADDI    10
                    STW     midiDelay                       ; instant MIDI startup
                    LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMi_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr    
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMi_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0                     ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDW     midiCommand
                    ANDI    0xF0                    
                    XORI    0x90                            ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            			; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                            ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         			; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                            ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playM_exit1                     ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


playMidiVol         LDW     midiStream
                    BEQ     playMV_exit0                    ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playMV_start
playMV_exit0        RET

playMV_start        PUSH
playMV_process      LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDW     midiCommand
                    ANDI    0xF0
                    XORI    0x90                            ; check for start note
                    BNE     playMV_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC                        ; start note
                    LDWI    midiSetVolume
                    CALL    giga_vAC                        ; set note volume
                    BRA     playMV_process
                    
playMV_endnote      XORI    0x10                            ; check for end note
                    BNE     playMV_segment
    
                    LDWI    midiEndNote                     ; end note
                    CALL    giga_vAC
                    BRA     playMV_process

playMV_segment      XORI    0x50                            ; check for new segment
                    BNE     playMV_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playMV_exit1                    ; 0x0000 = stop
                    BRA     playMV_process
    
playMV_delay        LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playMV_exit1        POP
                    RET


midiStartNote       LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     midiPtr
                    LDW     midiStream                      ; midi note
                    PEEK
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                            ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                            ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; note address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr                         ; set note
                    
midiSN_exit         LDW     midiStream
                    ADDI    0x01                            ; midiStream++
                    STW     midiStream
                    RET

midiSetVolume       LDI     0xFA
                    ST      midiPtr                         ; wavA address 0x01FA <-> 0x04FA, (midiPtr is still valid from midiStartNote)
                    LDW     midiStream                      ; midi volume
                    PEEK
                    POKE    midiPtr
                    BRA     midiSN_exit                     ; save a few bytes by using midiStartNote's epilogue
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr                         ; end note
                    RET


soundAllOff         LDWI    0x01FC
                    STW     sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel 0
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 1
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 2
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 3
                    RET


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
fontId              EQU     register9
fontAddrs           EQU     register10
fontBase            EQU     register11
fontPosXY           EQU     register15


printInit           LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      fontPosXY + 1
                    LD      cursorXY
                    ST      fontPosXY                       ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    32
                    BLT     printC_exit
                    STW     textChr                         ; char-32                    

                    LDWI    _fontId_
                    PEEK
                    STW     fontId
                    LDWI    _fontsLut_                      ; fonts table
                    ADDW    fontId
                    ADDW    fontId
                    DEEK
                    STW     fontAddrs                       ; get font address table
                    INC     fontAddrs
                    INC     fontAddrs
                    DEEK                                    ; get font mapping table
                    BEQ     printC_noMap                    ; no mapping table means font contains all chars 32 -> 127 in the correct order
                    ADDW    textChr
                    PEEK
                    STW     textChr                         ; get mapped char
                    
printC_noMap        LDW     fontAddrs
                    DEEK
                    STW     fontBase                        ; baseline address, shared by all chars in a font
                    INC     fontAddrs
                    INC     fontAddrs
                    LDW     textChr
                    LSLW
                    ADDW    fontAddrs
                    DEEK                                    ; get char address
                    STW     giga_sysArg0
                    LDW     fontPosXY                       ; XY pos generated in printInit
                    SYS     64                              ; draw char
                    STW     fontPosXY
                    
                    LDW     fontBase
                    STW     giga_sysArg0
                    LDWI    0x0F00
                    ADDW    cursorXY
                    SYS     64                              ; draw baseline for char
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      fontPosXY
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

