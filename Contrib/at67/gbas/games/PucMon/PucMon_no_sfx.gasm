_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_reset                            EQU                               0x022f
_start                            EQU                               0x0234
_init                             EQU                               0x0239
_mod5                             EQU                               0x0307
_drawPucMon                       EQU                               0x03ed
_drawGhosts                       EQU                               0x04b2
_drawNextGhost                    EQU                               0x055b
_drawNormalGhost                  EQU                               0x056b
_drawScaredGhost                  EQU                               0x0617
_drawDeadGhost                    EQU                               0x083c
_drawPills                        EQU                               0x08af
_movePucMon                       EQU                               0x0967
_moveGhosts                       EQU                               0x0bb2
_moveNextGhost                    EQU                               0x13e7
_getGhostVars                     EQU                               0x14b2
_setGhostVars                     EQU                               0x14e5
_getGhostDir                      EQU                               0x15c6
_setGhostsMode                    EQU                               0x15e1
_getBlinkyTarget                  EQU                               0x17b0
_getPinkyTarget                   EQU                               0x17d9
_getInkyTarget                    EQU                               0x18b4
_getClydeTarget                   EQU                               0x18f5
_getJuncDir                       EQU                               0x19e4
_getWallDir                       EQU                               0x1dce
_replaceDot                       EQU                               0x1fd2
_coordsPucMon                     EQU                               0x20b8
_handleInput                      EQU                               0x20d8
_253                              EQU                               0x21a9
_254                              EQU                               0x21c0
_247                              EQU                               0x21d7
_251                              EQU                               0x21ee
_drawDeath                        EQU                               0x26d0
_drawMaze                         EQU                               0x27cc
_startLevel                       EQU                               0x2bf3
_resetLevel                       EQU                               0x2dd8
_initSystem                       EQU                               0x2eac
_repeat_0x0234                    EQU                               0x023e
_else_0x0250                      EQU                               0x0256
_endif_0x025a                     EQU                               0x0260
_else_0x0279                      EQU                               0x0277
_endif_0x0282                     EQU                               0x0280
_endif_0x02b7                     EQU                               0x02ab
_endif_0x02bc                     EQU                               0x02b0
_page_0x0300                      EQU                               0x0300
_elseif_0x033d                    EQU                               0x0332
_elseif_0x0352                    EQU                               0x0341
_endif_0x0365                     EQU                               0x034e
_elseif_0x039f                    EQU                               0x0378
_elseif_0x03b4                    EQU                               0x0387
_endif_0x03c7                     EQU                               0x0394
_div5                             EQU                               0x0396
_page_0x0400                      EQU                               0x0400
_endif_0x0461                     EQU                               0x041a
_elseif_0x04ad                    EQU                               0x0452
_elseif_0x04d4                    EQU                               0x0471
_else_0x04fa                      EQU                               0x048f
_endif_0x0513                     EQU                               0x04a4
_next_0x052a                      EQU                               0x04b7
_endif_0x055e                     EQU                               0x04e3
_page_0x0500                      EQU                               0x0500
_elseif_0x059a                    EQU                               0x051b
_else_0x05c5                      EQU                               0x053a
_else_0x05e6                      EQU                               0x054f
_endif_0x05eb                     EQU                               0x0554
_else_0x05ed                      EQU                               0x0556
_elseif_0x0645                    EQU                               0x059c
_elseif_0x0680                    EQU                               0x05c7
_else_0x06ba                      EQU                               0x05f1
_page_0x0600                      EQU                               0x0600
_endif_0x06df                     EQU                               0x0615
_elseif_0x0710                    EQU                               0x063e
_page_0x0800                      EQU                               0x0800
_elseif_0x073f                    EQU                               0x0807
_else_0x0765                      EQU                               0x0825
_endif_0x077e                     EQU                               0x083a
_elseif_0x07ad                    EQU                               0x085b
_elseif_0x07da                    EQU                               0x087a
_else_0x0806                      EQU                               0x0898
_endif_0x0825                     EQU                               0x08ad
_else_0x0882                      EQU                               0x08f2
_page_0x0900                      EQU                               0x0900
_else_0x08b1                      EQU                               0x091f
_else_0x08e0                      EQU                               0x0942
_endif_0x090f                     EQU                               0x0965
_elseif_0x098e                    EQU                               0x09ce
_page_0x0aa0                      EQU                               0x0aa0
_elseif_0x09e5                    EQU                               0x0ac4
_elseif_0x0a19                    EQU                               0x0af2
_page_0x0ba0                      EQU                               0x0ba0
_endif_0x0a31                     EQU                               0x0bb0
_next_0x0a38                      EQU                               0x0bb7
_page_0x0ca0                      EQU                               0x0ca0
_endif_0x0a97                     EQU                               0x0ca6
_page_0x0da0                      EQU                               0x0da0
_else_0x0b5d                      EQU                               0x0de4
_endif_0x0b61                     EQU                               0x0de8
_page_0x0ea0                      EQU                               0x0ea0
_endif_0x0ba1                     EQU                               0x0ec2
_else_0x0bc3                      EQU                               0x0ee0
_else_0x0bd8                      EQU                               0x0ef1
_page_0x0fa0                      EQU                               0x0fa0
_else_0x0c64                      EQU                               0x0ff6
_page_0x10a0                      EQU                               0x10a0
_endif_0x0cb2                     EQU                               0x10d6
_page_0x11a0                      EQU                               0x11a0
_endif_0x0cfd                     EQU                               0x11bd
_endif_0x0d14                     EQU                               0x11cc
_page_0x12a0                      EQU                               0x12a0
_elseif_0x0d45                    EQU                               0x12a2
_elseif_0x0d62                    EQU                               0x12b9
_else_0x0d92                      EQU                               0x12dd
_page_0x13a0                      EQU                               0x13a0
_endif_0x0dbd                     EQU                               0x13a6
_page_0x14a0                      EQU                               0x14a0
_endif_0x0e2d                     EQU                               0x14a2
_page_0x15a0                      EQU                               0x15a0
_else_0x0f2b                      EQU                               0x15f0
_page_0x16a0                      EQU                               0x16a0
_endif_0x0f67                     EQU                               0x16cc
_endif_0x0f69                     EQU                               0x16ce
_endif_0x0f83                     EQU                               0x16e4
_page_0x17a0                      EQU                               0x17a0
_endif_0x0fa1                     EQU                               0x17ae
_endif_0x0fc6                     EQU                               0x17cf
_page_0x18a0                      EQU                               0x18a0
_endif_0x1017                     EQU                               0x18aa
_endif_0x1070                     EQU                               0x18eb
_page_0x19a0                      EQU                               0x19a0
_endif_0x10cd                     EQU                               0x19da
_page_0x1aa0                      EQU                               0x1aa0
_endif_0x1139                     EQU                               0x1add
_page_0x1ba0                      EQU                               0x1ba0
_endif_0x1175                     EQU                               0x1bb4
_else_0x117a                      EQU                               0x1bb9
_page_0x1ca0                      EQU                               0x1ca0
_endif_0x11d1                     EQU                               0x1cac
_endif_0x120d                     EQU                               0x1cdc
_elseif_0x1226                    EQU                               0x1cf1
_page_0x1da0                      EQU                               0x1da0
_elseif_0x1240                    EQU                               0x1db3
_else_0x1259                      EQU                               0x1dc8
_endif_0x125d                     EQU                               0x1dcc
_page_0x1ea0                      EQU                               0x1ea0
_endif_0x12a6                     EQU                               0x1eb0
_else_0x12d0                      EQU                               0x1ece
_else_0x12d5                      EQU                               0x1ed3
_page_0x1fa0                      EQU                               0x1fa0
_endif_0x1311                     EQU                               0x1fae
_endif_0x133b                     EQU                               0x1fd0
_page_0x20a0                      EQU                               0x20a0
_endif_0x1396                     EQU                               0x20b6
_page_0x21a0                      EQU                               0x21a0
_else_0x141a                      EQU                               0x21be
_else_0x1439                      EQU                               0x21d5
_else_0x1458                      EQU                               0x21ec
_page_0x22a0                      EQU                               0x22a0
_else_0x1477                      EQU                               0x22b2
_drawScore                        EQU                               0x22b4
_next_0x1495                      EQU                               0x22d0
_page_0x23a0                      EQU                               0x23a0
_endif_0x150d                     EQU                               0x23e5
_drawHigh                         EQU                               0x23e7
_next_0x1518                      EQU                               0x23f0
_page_0x24a0                      EQU                               0x24a0
_drawLevel                        EQU                               0x24c9
_next_0x1571                      EQU                               0x24e5
_page_0x25a0                      EQU                               0x25a0
_drawLives                        EQU                               0x25bf
_while_0x15b7                     EQU                               0x25c8
_page_0x26a0                      EQU                               0x26a0
_while_0x15f1                     EQU                               0x26a2
_wend_0x1623                      EQU                               0x26ce
_next_0x162f                      EQU                               0x26da
_page_0x27a0                      EQU                               0x27a0
_next_0x1680                      EQU                               0x27d5
_page_0x28a0                      EQU                               0x28a0
_drawDots                         EQU                               0x28cc
_next_0x16fe                      EQU                               0x28d5
_next_0x1702                      EQU                               0x28d9
_page_0x29a0                      EQU                               0x29a0
_elseif_0x174d                    EQU                               0x29bb
_endif_0x1771                     EQU                               0x29d1
_endif_0x1786                     EQU                               0x29e6
_page_0x2aa0                      EQU                               0x2aa0
_endif_0x17cd                     EQU                               0x2ab7
_initVars                         EQU                               0x2ad5
_page_0x2ba0                      EQU                               0x2ba0
_next_0x1819                      EQU                               0x2ba8
_else_0x1835                      EQU                               0x2bbe
_endif_0x184e                     EQU                               0x2bc9
_page_0x2ca0                      EQU                               0x2ca0
_else_0x18cc                      EQU                               0x2ce1
_page_0x2da0                      EQU                               0x2da0
_else_0x1911                      EQU                               0x2dcd
_endif_0x191a                     EQU                               0x2dd6
_page_0x2ea0                      EQU                               0x2ea0
_page_0x2fa0                      EQU                               0x2fa0

; Global Variables
_livesDots                        EQU                               0x0030
_levelPain                        EQU                               0x0032
_timeTicks                        EQU                               0x0034
_flags                            EQU                               0x0036
_gmode                            EQU                               0x0038
_gx                               EQU                               0x003a
_gy                               EQU                               0x003c
_gxd                              EQU                               0x003e
_gyd                              EQU                               0x0040
_mz                               EQU                               0x0042
_pyd                              EQU                               0x0044
_oxd                              EQU                               0x0046
_oyd                              EQU                               0x0048
_puci                             EQU                               0x004a
_pucj                             EQU                               0x004c
_ti                               EQU                               0x004e
_tj                               EQU                               0x0050
_px                               EQU                               0x0052
_py                               EQU                               0x0054
_pxd                              EQU                               0x0056
_bonus                            EQU                               0x0058
_mx                               EQU                               0x005a
_my                               EQU                               0x005c
_ci                               EQU                               0x005e
_cj                               EQU                               0x0060
_xf                               EQU                               0x0062
_yf                               EQU                               0x0064
_gidx                             EQU                               0x0066
_i                                EQU                               0x0068
_slowed                           EQU                               0x006a
_di                               EQU                               0x006c
_dj                               EQU                               0x006e
_gi                               EQU                               0x0070
_gj                               EQU                               0x0072
_bi                               EQU                               0x0074
_bj                               EQU                               0x0076

; Local Variables
_div5_i                           EQU                               0x00d8
_div5_j                           EQU                               0x00da
_drawScore_char                   EQU                               0x00d8
_drawHigh_char                    EQU                               0x00d8
_drawLevel_char                   EQU                               0x00d8
_drawLives_puc                    EQU                               0x00d8
_drawDots_redraw                  EQU                               0x00d8
_initVars_corner                  EQU                               0x00d8

; Arrays
_maze_array                       EQU                               0x3bd0
_maze_array                       DW                                0x6fad 0x6ead 0x6dad 0x6cad 0x6bad 0x6aad 0x69ad 0x68ad 0x67ad 0x66ad 0x65ad 0x64ad 0x63ad 0x62ad 0x61ad 0x60ad 0x5fad 0x5ead 0x5dad 0x5cad 0x5bad 0x5aad 0x59ad 0x58ad 
_maze_0x6fad                      EQU                               0x6fad
_maze_0x6fad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x6ead                      EQU                               0x6ead
_maze_0x6ead                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x6dad                      EQU                               0x6dad
_maze_0x6dad                      DB                                0xf0 0x02 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x02 0xf0 
_maze_0x6cad                      EQU                               0x6cad
_maze_0x6cad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x6bad                      EQU                               0x6bad
_maze_0x6bad                      DB                                0xf0 0xd1 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0xd1 0xf0 
_maze_0x6aad                      EQU                               0x6aad
_maze_0x6aad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x69ad                      EQU                               0x69ad
_maze_0x69ad                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x68ad                      EQU                               0x68ad
_maze_0x68ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x67ad                      EQU                               0x67ad
_maze_0x67ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0x00 0x00 0xd0 0xb0 0x00 0xd0 0x00 0x00 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x66ad                      EQU                               0x66ad
_maze_0x66ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xe0 0xe0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x65ad                      EQU                               0x65ad
_maze_0x65ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0xc0 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x64ad                      EQU                               0x64ad
_maze_0x64ad                      DB                                0xa0 0x90 0x90 0x90 0x90 0x00 0xd1 0x00 0x00 0xd0 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0xd0 0x00 0x00 0xd1 0x00 0x90 0x90 0x90 0x90 0xa0 
_maze_0x63ad                      EQU                               0x63ad
_maze_0x63ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x62ad                      EQU                               0x62ad
_maze_0x62ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x61ad                      EQU                               0x61ad
_maze_0x61ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xd0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xd0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x60ad                      EQU                               0x60ad
_maze_0x60ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x5fad                      EQU                               0x5fad
_maze_0x5fad                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x5ead                      EQU                               0x5ead
_maze_0x5ead                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x5dad                      EQU                               0x5dad
_maze_0x5dad                      DB                                0xf0 0x02 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x00 0x00 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x02 0xf0 
_maze_0x5cad                      EQU                               0x5cad
_maze_0x5cad                      DB                                0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 
_maze_0x5bad                      EQU                               0x5bad
_maze_0x5bad                      DB                                0xf0 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xf0 
_maze_0x5aad                      EQU                               0x5aad
_maze_0x5aad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x59ad                      EQU                               0x59ad
_maze_0x59ad                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x58ad                      EQU                               0x58ad
_maze_0x58ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_MAZE_BORDER_array                EQU                               0x7f03
_MAZE_BORDER_array                DW                                0x0000 0x0073 0x00ff 0x00ff 0x00ff 0x00ff 0x00ff 
_MAZE_OUTER_T_array               EQU                               0x57ab
_MAZE_OUTER_T_array               DW                                0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x0000 0xffdd 0x0041 0x0000 0x0000 0x000f 0x0002 0x0000 0x00ff 
_MAZE_OUTER_B_array               EQU                               0x56a7
_MAZE_OUTER_B_array               DW                                0xffbc 0x0000 0x0000 0xffec 0x0009 0x0000 0xfff7 0x0000 0x0000 0xffec 0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x00ff 
_MAZE_TJUNC_0_array               EQU                               0x55b3
_MAZE_TJUNC_0_array               DW                                0x0019 0x0000 0x0000 0xfff6 0x0005 0x0000 0x0000 0x000a 0x000f 0x0000 0x00ff 
_MAZE_TJUNC_1_array               EQU                               0x7e03
_MAZE_TJUNC_1_array               DW                                0xfffe 0x0000 0x0000 0xfff6 0xfff1 0x0000 0x00ff 
_MAZE_CAGE_array                  EQU                               0x55a5
_MAZE_CAGE_array                  DW                                0xfff6 0x0000 0x0000 0x0014 0x0011 0x0000 0x00ff 
_MAZE_VERT_0_array                EQU                               0x54b7
_MAZE_VERT_0_array                DW                                0x0000 0x000f 0xfffb 0x0000 0x0000 0xfff1 0x0005 0x0000 0x00ff 
_MAZE_VERT_1_array                EQU                               0x54a5
_MAZE_VERT_1_array                DW                                0x0005 0x0000 0x0000 0x0019 0xfffb 0x0000 0x0000 0xffe7 0x00ff 
_MAZE_CORNER_array                EQU                               0x53b7
_MAZE_CORNER_array                DW                                0x000a 0x0000 0x0000 0x000a 0x0005 0x0000 0x0000 0xfff6 0x00ff 
_MAZE_HORIZ_0_array               EQU                               0x53a5
_MAZE_HORIZ_0_array               DW                                0x000f 0x0000 0x0000 0x0005 0xfff1 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_HORIZ_1_array               EQU                               0x52b7
_MAZE_HORIZ_1_array               DW                                0x0014 0x0000 0x0000 0x0005 0xffec 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_LINE_0_array                EQU                               0x6fa7
_MAZE_LINE_0_array                DW                                0x000f 0x0000 0x00ff 
_MAZE_LINE_1_array                EQU                               0x6fa1
_MAZE_LINE_1_array                DW                                0x0014 0x0000 0x00ff 
_MAZE_PIECES_array                EQU                               0x3ab8
_MAZE_PIECES_array                DW                                0x0200 0x0201 0x0202 0x029d 0x029e 0x029f 0x3402 0x3489 0x7546 0x7545 0x6b0c 0x6b7f 0x6b45 0x6b46 0x5745 0x5746 0x2545 0x2546 0x2f3e 0x2f4d 0x3e2a 0x3e61 0x1b25 0x1b66 0x570c 0x577f 0x0c0c 0x0c7f 0x0c25 0x0c66 0x252a 0x2561 0x5725 0x5766 0x1b0c 0x1b7f 
_MAZE_ADDRS_array                 EQU                               0x39b8
_MAZE_ADDRS_array                 DW                                0x7f03 0x7f03 0x7f03 0x7f03 0x7f03 0x7f03 0x57ab 0x57ab 0x56a7 0x56a7 0x55b3 0x55b3 0x7e03 0x7e03 0x7e03 0x7e03 0x7e03 0x7e03 0x55a5 0x55a5 0x54b7 0x54b7 0x54a5 0x54a5 0x53b7 0x53b7 0x53a5 0x53a5 0x52b7 0x52b7 0x6fa7 0x6fa7 0x6fa1 0x6fa1 0x6fa7 0x6fa7 
_GHOST_DIRS_array                 EQU                               0x52a7
_GHOST_DIRS_array                 DW                                0x0001 0x0000 0x0000 0x0001 0xffff 0x0000 0x0000 0xffff 
_gframes_array                    EQU                               0x51b9
_gframes_array                    DB                                0x06 0x04 0x02 0x00 0x0e 0x0c 0x0a 0x08 0x16 0x14 0x12 0x10 0x1e 0x1c 0x1a 0x18 
_ghostsXr_array                   EQU                               0x6ea3
_ghostsXr_array                   DW                                0x0042 0x0036 0x0036 0x004e 0x004e 
_ghostsYr_array                   EQU                               0x6da3
_ghostsYr_array                   DW                                0x0026 0x0030 0x003a 0x0030 0x003a 
_ghostsX_array                    EQU                               0x6ca5
_ghostsX_array                    DW                                0x0042 0x0036 0x0036 0x004e 
_ghostsY_array                    EQU                               0x6ba5
_ghostsY_array                    DW                                0x0026 0x0030 0x003a 0x0030 
_ghostsXd_array                   EQU                               0x6aa5
_ghostsXd_array                   DW                                0xffff 0xffff 0xffff 0xffff 
_ghostsYd_array                   EQU                               0x69a5
_ghostsYd_array                   DW                                0x0000 0x0000 0x0000 0x0000 
_ghostsFlags_array                EQU                               0x7da0
_ghostsFlags_array                DB                                0x00 0x00 0x00 0x00 
_highBCD_array                    EQU                               0x68a6
_highBCD_array                    DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD_array                   EQU                               0x67a6
_scoreBCD_array                   DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD_array                  EQU                               0x66a6
_pointsBCD_array                  DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_levelBCD_array                   EQU                               0x7f01
_levelBCD_array                   DB                                0x00 0x00 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x31a0                  EQU                               0x31a0
def_bytes_0x31a0                  DB                                144 71 145 35 4 128 4 144 83 129 5 128 4 144 78 4 
def_bytes_0x31b0                  EQU                               0x31b0
def_bytes_0x31b0                  DB                                128 4 144 75 145 47 5 128 4 144 83 145 35 4 144 78 
def_bytes_0x31c0                  EQU                               0x31c0
def_bytes_0x31c0                  DB                                4 128 129 9 144 75 8 145 47 5 128 4 144 72 145 36 
def_bytes_0x31d0                  EQU                               0x31d0
def_bytes_0x31d0                  DB                                4 128 4 144 84 129 5 128 4 144 79 4 128 4 144 76 
def_bytes_0x31e0                  EQU                               0x31e0
def_bytes_0x31e0                  DB                                145 48 5 128 4 144 84 145 36 4 144 79 4 128 129 9 
def_bytes_0x31f0                  EQU                               0x31f0
def_bytes_0x31f0                  DB                                144 76 8 145 48 5 128 4 144 71 145 35 4 208 160 50 
def_bytes_0x32a0                  EQU                               0x32a0
def_bytes_0x32a0                  DB                                128 4 144 83 129 5 128 4 144 78 4 128 4 144 75 145 
def_bytes_0x32b0                  EQU                               0x32b0
def_bytes_0x32b0                  DB                                47 5 128 4 144 83 145 35 4 144 78 4 128 129 9 144 
def_bytes_0x32c0                  EQU                               0x32c0
def_bytes_0x32c0                  DB                                75 8 145 47 4 128 5 144 75 145 42 4 144 76 4 144 
def_bytes_0x32d0                  EQU                               0x32d0
def_bytes_0x32d0                  DB                                77 129 4 128 5 144 77 145 44 4 144 78 4 144 79 129 
def_bytes_0x32e0                  EQU                               0x32e0
def_bytes_0x32e0                  DB                                4 128 5 144 79 145 46 4 144 80 4 144 81 129 4 128 
def_bytes_0x32f0                  EQU                               0x32f0
def_bytes_0x32f0                  DB                                5 144 83 145 47 8 128 129 208 0 0 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites
def_sprites_0x7fc9                EQU                               0x7fc9
def_sprites_0x7fc9                DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f92                EQU                               0x7f92
def_sprites_0x7f92                DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f5b                EQU                               0x7f5b
def_sprites_0x7f5b                DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f24                EQU                               0x7f24
def_sprites_0x7f24                DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 0 0 0 0 0 0 247 
def_sprites_0x7ec9                EQU                               0x7ec9
def_sprites_0x7ec9                DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 247 
def_sprites_0x7e92                EQU                               0x7e92
def_sprites_0x7e92                DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 247 
def_sprites_0x7e5b                EQU                               0x7e5b
def_sprites_0x7e5b                DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 247 
def_sprites_0x7e24                EQU                               0x7e24
def_sprites_0x7e24                DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 247 
def_sprites_0x7dc9                EQU                               0x7dc9
def_sprites_0x7dc9                DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7cc9                EQU                               0x7cc9
def_sprites_0x7cc9                DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7bc9                EQU                               0x7bc9
def_sprites_0x7bc9                DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7ac9                EQU                               0x7ac9
def_sprites_0x7ac9                DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 0 0 0 0 0 0 247 
def_sprites_0x79c9                EQU                               0x79c9
def_sprites_0x79c9                DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x78c9                EQU                               0x78c9
def_sprites_0x78c9                DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x77c9                EQU                               0x77c9
def_sprites_0x77c9                DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x76c9                EQU                               0x76c9
def_sprites_0x76c9                DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 0 0 0 0 0 0 247 
def_sprites_0x75c9                EQU                               0x75c9
def_sprites_0x75c9                DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 247 
def_sprites_0x74c9                EQU                               0x74c9
def_sprites_0x74c9                DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 247 
def_sprites_0x73c9                EQU                               0x73c9
def_sprites_0x73c9                DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 247 
def_sprites_0x72c9                EQU                               0x72c9
def_sprites_0x72c9                DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 247 
def_sprites_0x71c9                EQU                               0x71c9
def_sprites_0x71c9                DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x70c9                EQU                               0x70c9
def_sprites_0x70c9                DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x6fc9                EQU                               0x6fc9
def_sprites_0x6fc9                DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6ec9                EQU                               0x6ec9
def_sprites_0x6ec9                DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 0 0 0 0 0 0 247 
def_sprites_0x6dc9                EQU                               0x6dc9
def_sprites_0x6dc9                DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6cc9                EQU                               0x6cc9
def_sprites_0x6cc9                DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x6bc9                EQU                               0x6bc9
def_sprites_0x6bc9                DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6ac9                EQU                               0x6ac9
def_sprites_0x6ac9                DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 0 0 0 0 0 0 247 
def_sprites_0x69c9                EQU                               0x69c9
def_sprites_0x69c9                DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 247 
def_sprites_0x68c9                EQU                               0x68c9
def_sprites_0x68c9                DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 247 
def_sprites_0x67c9                EQU                               0x67c9
def_sprites_0x67c9                DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 247 
def_sprites_0x66c9                EQU                               0x66c9
def_sprites_0x66c9                DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 247 
def_sprites_0x65c9                EQU                               0x65c9
def_sprites_0x65c9                DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x64c9                EQU                               0x64c9
def_sprites_0x64c9                DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x63c9                EQU                               0x63c9
def_sprites_0x63c9                DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x62c9                EQU                               0x62c9
def_sprites_0x62c9                DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 0 0 0 0 0 0 247 
def_sprites_0x61c9                EQU                               0x61c9
def_sprites_0x61c9                DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x60c9                EQU                               0x60c9
def_sprites_0x60c9                DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x5fc9                EQU                               0x5fc9
def_sprites_0x5fc9                DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5ec9                EQU                               0x5ec9
def_sprites_0x5ec9                DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 0 0 0 0 0 0 247 
def_sprites_0x5dc9                EQU                               0x5dc9
def_sprites_0x5dc9                DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 247 
def_sprites_0x5cc9                EQU                               0x5cc9
def_sprites_0x5cc9                DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 247 
def_sprites_0x5bc9                EQU                               0x5bc9
def_sprites_0x5bc9                DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 247 
def_sprites_0x5ac9                EQU                               0x5ac9
def_sprites_0x5ac9                DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 247 
def_sprites_0x59c9                EQU                               0x59c9
def_sprites_0x59c9                DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x58c9                EQU                               0x58c9
def_sprites_0x58c9                DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x57c9                EQU                               0x57c9
def_sprites_0x57c9                DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x56c9                EQU                               0x56c9
def_sprites_0x56c9                DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 0 0 0 0 0 0 247 
def_sprites_0x55c9                EQU                               0x55c9
def_sprites_0x55c9                DB                                0 0 0 0 0 0 0 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x54c9                EQU                               0x54c9
def_sprites_0x54c9                DB                                0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x53c9                EQU                               0x53c9
def_sprites_0x53c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x52c9                EQU                               0x52c9
def_sprites_0x52c9                DB                                0 0 15 0 0 0 0 0 15 15 0 0 15 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x51c9                EQU                               0x51c9
def_sprites_0x51c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x50c9                EQU                               0x50c9
def_sprites_0x50c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4fc9                EQU                               0x4fc9
def_sprites_0x4fc9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4ec9                EQU                               0x4ec9
def_sprites_0x4ec9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4dc9                EQU                               0x4dc9
def_sprites_0x4dc9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4cc9                EQU                               0x4cc9
def_sprites_0x4cc9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 0 15 15 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4bc9                EQU                               0x4bc9
def_sprites_0x4bc9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4ac9                EQU                               0x4ac9
def_sprites_0x4ac9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 0 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x49c9                EQU                               0x49c9
def_sprites_0x49c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x48c9                EQU                               0x48c9
def_sprites_0x48c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x47c9                EQU                               0x47c9
def_sprites_0x47c9                DB                                0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x46c9                EQU                               0x46c9
def_sprites_0x46c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x45c9                EQU                               0x45c9
def_sprites_0x45c9                DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x44c9                EQU                               0x44c9
def_sprites_0x44c9                DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 0 0 0 0 0 0 247 
def_sprites_0x43c9                EQU                               0x43c9
def_sprites_0x43c9                DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 43 52 0 0 0 0 52 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x42c9                EQU                               0x42c9
def_sprites_0x42c9                DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 52 43 52 43 52 0 43 52 43 52 52 0 52 0 52 0 52 0 0 0 0 0 0 0 247 
def_sprites_0x41c9                EQU                               0x41c9
def_sprites_0x41c9                DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 247 
def_sprites_0x40c9                EQU                               0x40c9
def_sprites_0x40c9                DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 247 
def_sprites_0x3fc9                EQU                               0x3fc9
def_sprites_0x3fc9                DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 43 52 0 0 0 0 52 0 0 0 0 247 
def_sprites_0x3ec9                EQU                               0x3ec9
def_sprites_0x3ec9                DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 52 43 52 43 52 0 43 52 43 52 52 0 52 0 52 0 52 0 247 
def_sprites_0x7f11                EQU                               0x7f11
def_sprites_0x7f11                DB                                0 0 0 0 0 0 63 63 0 63 63 0 63 56 0 56 63 0 253 
def_sprites_0x7e11                EQU                               0x7e11
def_sprites_0x7e11                DB                                63 63 0 63 63 0 56 63 0 56 63 0 0 0 0 0 0 0 253 
def_sprites_0x3dc9                EQU                               0x3dc9
def_sprites_0x3dc9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x3cc9                EQU                               0x3cc9
def_sprites_0x3cc9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7da4                EQU                               0x7da4
def_sprites_0x7da4                DB                                0 0 0 0 0 0 0 43 43 43 0 0 43 43 43 43 43 0 43 43 43 43 43 0 43 43 43 43 43 0 0 43 43 43 0 0 250 
def_sprites_0x7ca4                EQU                               0x7ca4
def_sprites_0x7ca4                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 250 
def_sprites_0x7ba4                EQU                               0x7ba4
def_sprites_0x7ba4                DB                                0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 15 15 15 0 0 250 
def_sprites_0x7aa4                EQU                               0x7aa4
def_sprites_0x7aa4                DB                                63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x79a4                EQU                               0x79a4
def_sprites_0x79a4                DB                                0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_sprites_0x78a4                EQU                               0x78a4
def_sprites_0x78a4                DB                                0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x77a4                EQU                               0x77a4
def_sprites_0x77a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x76a4                EQU                               0x76a4
def_sprites_0x76a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x75a4                EQU                               0x75a4
def_sprites_0x75a4                DB                                0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_sprites_0x74a4                EQU                               0x74a4
def_sprites_0x74a4                DB                                63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x73a4                EQU                               0x73a4
def_sprites_0x73a4                DB                                0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x72a4                EQU                               0x72a4
def_sprites_0x72a4                DB                                63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_sprites_0x71a4                EQU                               0x71a4
def_sprites_0x71a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x70a4                EQU                               0x70a4
def_sprites_0x70a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 

; Define Fonts

; Lookup Tables
_lut_numericLabs                  EQU                               0x64a3
_lut_numericLabs                  DW                                253 254 247 251 0x0000
_lut_numericAddrs                 EQU                               0x63a5
_lut_numericAddrs                 DW                                0x21a9 0x21c0 0x21d7 0x21ee 
_lut_onAddrs_0x65a5               EQU                               0x65a5
_lut_onAddrs_0x65a5               DW                                0x17b0 0x17d9 0x18b4 0x18f5 
_spriteLut_0x62a3                 EQU                               0x62a3
_spriteLut_0x62a3                 DW                                0x7fc9 0x0000 0x7f92 0x0003 0x0000
_spriteLut_0x61a3                 EQU                               0x61a3
_spriteLut_0x61a3                 DW                                0x7f5b 0x0000 0x7f24 0x0003 0x0000
_spriteLut_0x60a3                 EQU                               0x60a3
_spriteLut_0x60a3                 DW                                0x7ec9 0x0000 0x7e92 0x0003 0x0000
_spriteLut_0x5fa3                 EQU                               0x5fa3
_spriteLut_0x5fa3                 DW                                0x7e5b 0x0000 0x7e24 0x0003 0x0000
_spriteLut_0x5ea3                 EQU                               0x5ea3
_spriteLut_0x5ea3                 DW                                0x7dc9 0x0000 0x7cc9 0x0003 0x0000
_spriteLut_0x5da3                 EQU                               0x5da3
_spriteLut_0x5da3                 DW                                0x7bc9 0x0000 0x7ac9 0x0003 0x0000
_spriteLut_0x5ca3                 EQU                               0x5ca3
_spriteLut_0x5ca3                 DW                                0x7dc9 0x0003 0x7cc9 0x0000 0x0000
_spriteLut_0x5ba3                 EQU                               0x5ba3
_spriteLut_0x5ba3                 DW                                0x7bc9 0x0003 0x7ac9 0x0000 0x0000
_spriteLut_0x5aa3                 EQU                               0x5aa3
_spriteLut_0x5aa3                 DW                                0x79c9 0x0000 0x78c9 0x0003 0x0000
_spriteLut_0x59a3                 EQU                               0x59a3
_spriteLut_0x59a3                 DW                                0x77c9 0x0000 0x76c9 0x0003 0x0000
_spriteLut_0x58a3                 EQU                               0x58a3
_spriteLut_0x58a3                 DW                                0x75c9 0x0000 0x74c9 0x0003 0x0000
_spriteLut_0x57a1                 EQU                               0x57a1
_spriteLut_0x57a1                 DW                                0x73c9 0x0000 0x72c9 0x0003 0x0000
_spriteLut_0x51af                 EQU                               0x51af
_spriteLut_0x51af                 DW                                0x71c9 0x0000 0x70c9 0x0003 0x0000
_spriteLut_0x51a5                 EQU                               0x51a5
_spriteLut_0x51a5                 DW                                0x6fc9 0x0000 0x6ec9 0x0003 0x0000
_spriteLut_0x50bf                 EQU                               0x50bf
_spriteLut_0x50bf                 DW                                0x71c9 0x0003 0x70c9 0x0000 0x0000
_spriteLut_0x50b5                 EQU                               0x50b5
_spriteLut_0x50b5                 DW                                0x6fc9 0x0003 0x6ec9 0x0000 0x0000
_spriteLut_0x50ab                 EQU                               0x50ab
_spriteLut_0x50ab                 DW                                0x6dc9 0x0000 0x6cc9 0x0003 0x0000
_spriteLut_0x50a1                 EQU                               0x50a1
_spriteLut_0x50a1                 DW                                0x6bc9 0x0000 0x6ac9 0x0003 0x0000
_spriteLut_0x4fbf                 EQU                               0x4fbf
_spriteLut_0x4fbf                 DW                                0x69c9 0x0000 0x68c9 0x0003 0x0000
_spriteLut_0x4fb5                 EQU                               0x4fb5
_spriteLut_0x4fb5                 DW                                0x67c9 0x0000 0x66c9 0x0003 0x0000
_spriteLut_0x4fab                 EQU                               0x4fab
_spriteLut_0x4fab                 DW                                0x65c9 0x0000 0x64c9 0x0003 0x0000
_spriteLut_0x4fa1                 EQU                               0x4fa1
_spriteLut_0x4fa1                 DW                                0x63c9 0x0000 0x62c9 0x0003 0x0000
_spriteLut_0x4ebf                 EQU                               0x4ebf
_spriteLut_0x4ebf                 DW                                0x65c9 0x0003 0x64c9 0x0000 0x0000
_spriteLut_0x4eb5                 EQU                               0x4eb5
_spriteLut_0x4eb5                 DW                                0x63c9 0x0003 0x62c9 0x0000 0x0000
_spriteLut_0x4eab                 EQU                               0x4eab
_spriteLut_0x4eab                 DW                                0x61c9 0x0000 0x60c9 0x0003 0x0000
_spriteLut_0x4ea1                 EQU                               0x4ea1
_spriteLut_0x4ea1                 DW                                0x5fc9 0x0000 0x5ec9 0x0003 0x0000
_spriteLut_0x4dbf                 EQU                               0x4dbf
_spriteLut_0x4dbf                 DW                                0x5dc9 0x0000 0x5cc9 0x0003 0x0000
_spriteLut_0x4db5                 EQU                               0x4db5
_spriteLut_0x4db5                 DW                                0x5bc9 0x0000 0x5ac9 0x0003 0x0000
_spriteLut_0x4dab                 EQU                               0x4dab
_spriteLut_0x4dab                 DW                                0x59c9 0x0000 0x58c9 0x0003 0x0000
_spriteLut_0x4da1                 EQU                               0x4da1
_spriteLut_0x4da1                 DW                                0x57c9 0x0000 0x56c9 0x0003 0x0000
_spriteLut_0x4cbf                 EQU                               0x4cbf
_spriteLut_0x4cbf                 DW                                0x59c9 0x0003 0x58c9 0x0000 0x0000
_spriteLut_0x4cb5                 EQU                               0x4cb5
_spriteLut_0x4cb5                 DW                                0x57c9 0x0003 0x56c9 0x0000 0x0000
_spriteLut_0x4cab                 EQU                               0x4cab
_spriteLut_0x4cab                 DW                                0x55c9 0x0000 0x54c9 0x0003 0x0000
_spriteLut_0x4ca1                 EQU                               0x4ca1
_spriteLut_0x4ca1                 DW                                0x53c9 0x0000 0x52c9 0x0003 0x0000
_spriteLut_0x4bbf                 EQU                               0x4bbf
_spriteLut_0x4bbf                 DW                                0x51c9 0x0000 0x50c9 0x0003 0x0000
_spriteLut_0x4bb5                 EQU                               0x4bb5
_spriteLut_0x4bb5                 DW                                0x4fc9 0x0000 0x4ec9 0x0003 0x0000
_spriteLut_0x4bab                 EQU                               0x4bab
_spriteLut_0x4bab                 DW                                0x55c9 0x0800 0x54c9 0x0803 0x0000
_spriteLut_0x4ba1                 EQU                               0x4ba1
_spriteLut_0x4ba1                 DW                                0x53c9 0x0800 0x52c9 0x0803 0x0000
_spriteLut_0x4abf                 EQU                               0x4abf
_spriteLut_0x4abf                 DW                                0x51c9 0x0800 0x50c9 0x0803 0x0000
_spriteLut_0x4ab5                 EQU                               0x4ab5
_spriteLut_0x4ab5                 DW                                0x4fc9 0x0800 0x4ec9 0x0803 0x0000
_spriteLut_0x4aab                 EQU                               0x4aab
_spriteLut_0x4aab                 DW                                0x4dc9 0x0000 0x4cc9 0x0003 0x0000
_spriteLut_0x4aa1                 EQU                               0x4aa1
_spriteLut_0x4aa1                 DW                                0x4bc9 0x0000 0x4ac9 0x0003 0x0000
_spriteLut_0x49bf                 EQU                               0x49bf
_spriteLut_0x49bf                 DW                                0x49c9 0x0000 0x48c9 0x0003 0x0000
_spriteLut_0x49b5                 EQU                               0x49b5
_spriteLut_0x49b5                 DW                                0x47c9 0x0000 0x46c9 0x0003 0x0000
_spriteLut_0x49ab                 EQU                               0x49ab
_spriteLut_0x49ab                 DW                                0x4dc9 0x0003 0x4cc9 0x0000 0x0000
_spriteLut_0x49a1                 EQU                               0x49a1
_spriteLut_0x49a1                 DW                                0x4bc9 0x0003 0x4ac9 0x0000 0x0000
_spriteLut_0x48bf                 EQU                               0x48bf
_spriteLut_0x48bf                 DW                                0x49c9 0x0003 0x48c9 0x0000 0x0000
_spriteLut_0x48b5                 EQU                               0x48b5
_spriteLut_0x48b5                 DW                                0x47c9 0x0003 0x46c9 0x0000 0x0000
_spriteLut_0x48ab                 EQU                               0x48ab
_spriteLut_0x48ab                 DW                                0x45c9 0x0000 0x44c9 0x0003 0x0000
_spriteLut_0x48a1                 EQU                               0x48a1
_spriteLut_0x48a1                 DW                                0x43c9 0x0000 0x42c9 0x0003 0x0000
_spriteLut_0x47bf                 EQU                               0x47bf
_spriteLut_0x47bf                 DW                                0x41c9 0x0000 0x40c9 0x0003 0x0000
_spriteLut_0x47b5                 EQU                               0x47b5
_spriteLut_0x47b5                 DW                                0x3fc9 0x0000 0x3ec9 0x0003 0x0000
_spriteLut_0x47ab                 EQU                               0x47ab
_spriteLut_0x47ab                 DW                                0x45c9 0x0000 0x44c9 0x0003 0x0000
_spriteLut_0x47a1                 EQU                               0x47a1
_spriteLut_0x47a1                 DW                                0x43c9 0x0000 0x42c9 0x0003 0x0000
_spriteLut_0x46bf                 EQU                               0x46bf
_spriteLut_0x46bf                 DW                                0x45c9 0x0003 0x44c9 0x0000 0x0000
_spriteLut_0x46b5                 EQU                               0x46b5
_spriteLut_0x46b5                 DW                                0x43c9 0x0003 0x42c9 0x0000 0x0000
_spriteLut_0x68a0                 EQU                               0x68a0
_spriteLut_0x68a0                 DW                                0x7f11 0x0200 0x0000
_spriteLut_0x67a0                 EQU                               0x67a0
_spriteLut_0x67a0                 DW                                0x7f11 0x0000 0x0000
_spriteLut_0x66a0                 EQU                               0x66a0
_spriteLut_0x66a0                 DW                                0x7e11 0x0000 0x0000
_spriteLut_0x56a1                 EQU                               0x56a1
_spriteLut_0x56a1                 DW                                0x7e11 0x0000 0x0000
_spriteLut_0x46ab                 EQU                               0x46ab
_spriteLut_0x46ab                 DW                                0x3dc9 0x0000 0x3cc9 0x0006 0x0000
_spriteLut_0x52a1                 EQU                               0x52a1
_spriteLut_0x52a1                 DW                                0x7da4 0x0000 0x0000
_spriteLut_0x46a5                 EQU                               0x46a5
_spriteLut_0x46a5                 DW                                0x7ca4 0x0000 0x0000
_spriteLut_0x45bf                 EQU                               0x45bf
_spriteLut_0x45bf                 DW                                0x3dc9 0x0000 0x3cc9 0x0003 0x0000
_spriteLut_0x45b9                 EQU                               0x45b9
_spriteLut_0x45b9                 DW                                0x7ba4 0x0000 0x0000
_spriteLut_0x45b3                 EQU                               0x45b3
_spriteLut_0x45b3                 DW                                0x7aa4 0x0000 0x0000
_spriteLut_0x45ad                 EQU                               0x45ad
_spriteLut_0x45ad                 DW                                0x79a4 0x0000 0x0000
_spriteLut_0x45a7                 EQU                               0x45a7
_spriteLut_0x45a7                 DW                                0x78a4 0x0000 0x0000
_spriteLut_0x45a1                 EQU                               0x45a1
_spriteLut_0x45a1                 DW                                0x77a4 0x0000 0x0000
_spriteLut_0x44c3                 EQU                               0x44c3
_spriteLut_0x44c3                 DW                                0x76a4 0x0000 0x0000
_spriteLut_0x44bd                 EQU                               0x44bd
_spriteLut_0x44bd                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x44b7                 EQU                               0x44b7
_spriteLut_0x44b7                 DW                                0x74a4 0x0000 0x0000
_spriteLut_0x44b1                 EQU                               0x44b1
_spriteLut_0x44b1                 DW                                0x73a4 0x0000 0x0000
_spriteLut_0x44ab                 EQU                               0x44ab
_spriteLut_0x44ab                 DW                                0x72a4 0x0000 0x0000
_spriteLut_0x44a5                 EQU                               0x44a5
_spriteLut_0x44a5                 DW                                0x71a4 0x0000 0x0000
_spriteLut_0x43c3                 EQU                               0x43c3
_spriteLut_0x43c3                 DW                                0x70a4 0x0000 0x0000
_spritesLut_                      EQU                               0x0668
_spritesLut_                      DW                                0x62a3 0x61a3 0x60a3 0x5fa3 0x5ea3 0x5da3 0x5ca3 0x5ba3 0x5aa3 0x59a3 0x58a3 0x57a1 0x51af 0x51a5 0x50bf 0x50b5 0x50ab 0x50a1 0x4fbf 0x4fb5 0x4fab 0x4fa1 0x4ebf 0x4eb5 0x4eab 0x4ea1 0x4dbf 0x4db5 0x4dab 0x4da1 0x4cbf 0x4cb5 0x4cab 0x4ca1 0x4bbf 0x4bb5 0x4bab 0x4ba1 0x4abf 0x4ab5 0x4aab 0x4aa1 0x49bf 0x49b5 0x49ab 0x49a1 0x48bf 0x48b5 0x48ab 0x48a1 0x47bf 0x47b5 0x47ab 0x47a1 0x46bf 0x46b5 0x68a0 0x67a0 0x66a0 0x56a1 0x46ab 0x52a1 0x46a5 0x45bf 0x45b9 0x45b3 0x45ad 0x45a7 0x45a1 0x44c3 0x44bd 0x44b7 0x44b1 0x44ab 0x44a5 0x43c3 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  Init8Array2d                                                  ; Main: INIT

                                  LDWI                              _initSystem
                                  CALL                              giga_vAC                    ; Main: gosub initSystem

                                  LDWI                              _drawMaze
                                  CALL                              giga_vAC                    ; Main: gosub drawMaze

_reset                            LDWI                              _resetLevel
                                  CALL                              giga_vAC                    ; Main: gosub resetLevel

_start                            LDWI                              _startLevel
                                  CALL                              giga_vAC                    ; Main: gosub startLevel

_init                             LDWI                              _initVars
                                  CALL                              giga_vAC                    ; Main: call initVars

_repeat_0x0234                    WaitVBlank                                                    ; Main: wait

                                  LDW                               _gmode
                                  XORI                              1
                                  BNE                               _else_0x0250                ; Main: if gmode &&= SCARED_MODE

                                  LDWI                              _drawGhosts
                                  CALL                              giga_vAC                    ; Main: gosub drawGhosts

                                  LDWI                              _drawPucMon
                                  CALL                              giga_vAC
                                  BRA                               _endif_0x025a               ; Main: gosub drawPucMon

_else_0x0250                      LDWI                              _drawPucMon
                                  CALL                              giga_vAC                    ; Main: gosub drawPucMon

                                  LDWI                              _drawGhosts
                                  CALL                              giga_vAC                    ; Main: gosub drawGhosts

_endif_0x025a                     LD                                _livesDots
                                  XORI                              0
                                  BNE                               _endif_0x0282               ; Main: if livesDots.lo &&= 0

                                  LD                                _levelPain
                                  XORI                              99
                                  BNE                               _else_0x0279
                                  LDWI                              257
                                  STW                               register0
                                  LDI                               64
                                  POKE                              register0                   ; Main: if levelPain.lo &&= 99 then poke &h0101, &h40  'level100 easter egg, good luck once you get to level 100!

_else_0x0279                      INC                               _levelPain                  ; Main: inc levelPain.lo

                                  INC                               _levelPain + 1              ; Main: inc levelPain.hi

                                  LDWI                              _start
                                  CALL                              giga_vAC                    ; Main: goto start

_endif_0x0282                     LD                                _flags + 1
                                  XORI                              1
                                  BNE                               _endif_0x02bc               ; Main: if flags.hi &&= 1

                                  LDI                               0
                                  ST                                _flags + 1                  ; Main: flags.hi = 0

                                  LD                                _livesDots + 1
                                  SUBI                              1
                                  ST                                _livesDots + 1              ; Main: livesDots.hi = livesDots.hi - 1

                                  LDI                               0x00
                                  STW                               0xd8
                                  LDWI                              _drawDots
                                  CALL                              giga_vAC                    ; Main: call drawDots, 0 'refresh

                                  LDWI                              _drawDeath
                                  CALL                              giga_vAC                    ; Main: gosub drawDeath

                                  LD                                _livesDots + 1
                                  XORI                              0
                                  BNE                               _endif_0x02b7               ; Main: if livesDots.hi &&= 0

                                  LDWI                              _reset
                                  CALL                              giga_vAC                    ; Main: goto reset

_endif_0x02b7                     LDWI                              _init
                                  CALL                              giga_vAC                    ; Main: goto init

_endif_0x02bc                     LDI                               60
                                  STW                               spriteId
                                  LDI                               3
                                  ST                                spriteXY
                                  LDI                               53
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Tunnel, (1+ORIGIN_X),   (51+ORIGIN_Y)

                                  LDI                               60
                                  STW                               spriteId
                                  LDI                               125
                                  ST                                spriteXY
                                  LDI                               53
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Tunnel, (123+ORIGIN_X), (51+ORIGIN_Y)

                                  LDWI                              _drawPills
                                  CALL                              giga_vAC                    ; Main: gosub drawPills

                                  LDWI                              _setGhostsMode
                                  CALL                              giga_vAC                    ; Main: gosub setGhostsMode

                                  LDWI                              _moveGhosts
                                  CALL                              giga_vAC                    ; Main: gosub moveGhosts

                                  LDWI                              _handleInput
                                  CALL                              giga_vAC                    ; Main: gosub handleInput

                                  LDWI                              _movePucMon
                                  CALL                              giga_vAC                    ; Main: gosub movePucMon

                                  INC                               _timeTicks                  ; Main: inc timeTicks.lo

                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  LDWI                              _repeat_0x0234
                                  CALL                              giga_vAC                    ; Main: forever

_mod5                             PUSH                              
                                  LD                                _mx + 1
                                  STW                               0xe8
                                  LD                                _mx
                                  ADDW                              0xe8
                                  STW                               _mx
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               0xec
                                  LDW                               _mx
                                  ANDI                              15
                                  ADDW                              0xec
                                  STW                               _mx                         ; Main: mx = mx.hi + mx.lo : mx = (mx LSR 4) + (mx AND &h000F)

                                  LDW                               _mx
                                  SUBI                              14
                                  BLE                               _elseif_0x033d              ; Main: if mx &&> 14

                                  LDW                               _mx
                                  SUBI                              15
                                  STW                               _mx
                                  BRA                               _endif_0x0365               ; Main: mx = mx - 15

_elseif_0x033d                    LDW                               _mx
                                  SUBI                              9
                                  BLE                               _elseif_0x0352              ; Main: elseif mx &&> 9

                                  LDW                               _mx
                                  SUBI                              10
                                  STW                               _mx
                                  BRA                               _endif_0x0365               ; Main: mx = mx - 10

_elseif_0x0352                    LDW                               _mx
                                  SUBI                              4
                                  BLE                               _endif_0x0365               ; Main: elseif mx &&> 4

                                  LDW                               _mx
                                  SUBI                              5
                                  STW                               _mx                         ; Main: mx = mx - 5

_endif_0x0365                     LD                                _my + 1
                                  STW                               0xe8
                                  LD                                _my
                                  ADDW                              0xe8
                                  STW                               _my
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               0xec
                                  LDW                               _my
                                  ANDI                              15
                                  ADDW                              0xec
                                  STW                               _my                         ; Main: my = my.hi + my.lo : my = (my LSR 4) + (my AND &h000F)

                                  LDW                               _my
                                  SUBI                              14
                                  BLE                               _elseif_0x039f              ; Main: if my &&> 14

                                  LDW                               _my
                                  SUBI                              15
                                  STW                               _my
                                  BRA                               _endif_0x03c7               ; Main: my = my - 15

_elseif_0x039f                    LDW                               _my
                                  SUBI                              9
                                  BLE                               _elseif_0x03b4              ; Main: elseif my &&> 9

                                  LDW                               _my
                                  SUBI                              10
                                  STW                               _my
                                  BRA                               _endif_0x03c7               ; Main: my = my - 10

_elseif_0x03b4                    LDW                               _my
                                  SUBI                              4
                                  BLE                               _endif_0x03c7               ; Main: elseif my &&> 4

                                  LDW                               _my
                                  SUBI                              5
                                  STW                               _my                         ; Main: my = my - 5

_endif_0x03c7                     Return                                                        ; Main: return

_div5                             PUSH                                                          ; Main: proc div5

                                  LDW                               _ci
                                  STW                               mathShift
                                  ShiftRight6bit                    
                                  STW                               0xea
                                  LDW                               _ci
                                  SUBW                              0xea
                                  STW                               _ci                         ; Main: ci = ci - (ci LSR 6)                             'error term

                                  LDW                               _ci
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               _div5_i
                                  LSLW                              
                                  ADDW                              _div5_i
                                  STW                               0xe8
                                  LDW                               _ci
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xe8
                                  STW                               _ci                         ; Main: i  = ci LSL 4 : ci = (i LSL 1) + i + (ci LSL 2)  'multiply by 52

                                  LD                                _ci + 1
                                  STW                               _ci                         ; Main: ci = ci.hi                                       'divide by 256

                                  LDW                               _cj
                                  STW                               mathShift
                                  ShiftRight6bit                    
                                  STW                               0xea
                                  LDW                               _cj
                                  SUBW                              0xea
                                  STW                               _cj                         ; Main: cj = cj - (cj LSR 6)                             'error term

                                  LDW                               _cj
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               _div5_j
                                  LSLW                              
                                  ADDW                              _div5_j
                                  STW                               0xe8
                                  LDW                               _cj
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xe8
                                  STW                               _cj                         ; Main: j  = cj LSL 4 : cj = (j LSL 1) + j + (cj LSL 2)  'multiply by 52

                                  LD                                _cj + 1
                                  STW                               _cj                         ; Main: cj = cj.hi                                       'divide by 256

                                  Return                                                        ; Main: endproc

_drawPucMon                       PUSH                              
                                  LDW                               _mz
                                  XORI                              240
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  BNE                               _endif_0x0461               ; Main: if mz &&= WALL

                                  LDI                               42
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucLt + 2, px, py

                                  Return                                                        ; Main: return

_endif_0x0461                     LDW                               _px
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              3
                                  STW                               _xf                         ; Main: xf = (px LSR 1) AND 3

                                  LDW                               _py
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              3
                                  STW                               _yf                         ; Main: yf = (py LSR 1) AND 3

                                  LDW                               _pxd
                                  XORI                              1
                                  BNE                               _elseif_0x04ad              ; Main: if pxd &&= 1

                                  LDI                               44
                                  ADDW                              _xf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  BRA                               _endif_0x0513               ; Main: sprite FlipX, PucRt + xf, px, py

_elseif_0x04ad                    LDWI                              -1
                                  XORW                              _pxd
                                  BNE                               _elseif_0x04d4              ; Main: elseif pxd &&= -1

                                  LDI                               40
                                  ADDW                              _xf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  BRA                               _endif_0x0513               ; Main: sprite NoFlip, PucLt + xf, px, py

_elseif_0x04d4                    LDW                               _pyd
                                  XORI                              1
                                  BNE                               _else_0x04fa                ; Main: elseif pyd &&= 1

                                  LDI                               36
                                  ADDW                              _yf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteY                       
                                  BRA                               _endif_0x0513               ; Main: sprite FlipY, PucDn + yf, px, py

_else_0x04fa                      LDI                               32
                                  ADDW                              _yf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucUp + yf, px, py

_endif_0x0513                     LDW                               _px
                                  ADDW                              _pxd
                                  STW                               _px                         ; Main: px = px + pxd

                                  LDW                               _py
                                  ADDW                              _pyd
                                  STW                               _py                         ; Main: py = py + pyd

                                  Return                                                        ; Main: return

_drawGhosts                       PUSH                              
                                  LDI                               0
                                  STW                               _gidx                       ; Main: for gidx=0 to NUM_GHOSTS-1

_next_0x052a                      LDWI                              _getGhostVars
                                  CALL                              giga_vAC                    ; Main: gosub getGhostVars

                                  LD                                _livesDots
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  STW                               0xe8
                                  LD                                _flags + 1
                                  ORW                               0xe8
                                  BEQ                               _endif_0x055e               ; Main: if &((flags.hi) OR (livesDots.lo = 0))

                                  LDI                               63
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, gx, gy

                                  LDWI                              _drawNextGhost
                                  CALL                              giga_vAC                    ; Main: goto drawNextGhost

_endif_0x055e                     LDW                               _gx
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  STW                               _xf                         ; Main: xf = (gx LSR 2) AND 1

                                  LDW                               _gy
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  STW                               _yf                         ; Main: yf = (gy LSR 2) AND 1

                                  LD                                _flags
                                  ANDI                              1
                                  BEQ                               _elseif_0x059a              ; Main: if &(flags.lo AND 1)

                                  LDWI                              _drawDeadGhost
                                  CALL                              giga_vAC
                                  BRA                               _drawNextGhost              ; Main: gosub drawDeadGhost

_elseif_0x059a                    LDW                               _gmode
                                  XORI                              1
                                  BNE                               _else_0x05ed                ; Main: elseif gmode &&= SCARED_MODE

                                  LD                                _levelPain + 1
                                  STW                               register15
                                  LDI                               8
                                  SUBW                              register15
                                  STW                               0xe8
                                  LD                                _timeTicks + 1
                                  SUBW                              0xe8
                                  BGE                               _else_0x05c5                ; Main: if timeTicks.hi &&< (8-levelPain.hi)

                                  LDWI                              _drawScaredGhost
                                  CALL                              giga_vAC
                                  BRA                               _endif_0x05eb               ; Main: gosub drawScaredGhost

_else_0x05c5                      LD                                _timeTicks
                                  STW                               mathShift
                                  ShiftRight3bit                    
                                  ANDI                              1
                                  BEQ                               _else_0x05e6                ; Main: if &((timeTicks.lo LSR 3) AND 1)

                                  LDWI                              _drawNormalGhost
                                  CALL                              giga_vAC
                                  BRA                               _endif_0x05eb               ; Main: gosub drawNormalGhost

_else_0x05e6                      LDWI                              _drawScaredGhost
                                  CALL                              giga_vAC                    ; Main: gosub drawScaredGhost

_endif_0x05eb                     BRA                               _drawNextGhost              ; Main: endif

_else_0x05ed                      LDWI                              _drawNormalGhost
                                  CALL                              giga_vAC                    ; Main: gosub drawNormalGhost

_drawNextGhost                    ForNextFarInc                     _gidx _next_0x052a 3        ; Main: next gidx

                                  Return                                                        ; Main: return

_drawNormalGhost                  PUSH                              
                                  LDW                               _gidx
                                  LSLW                              
                                  LSLW                              
                                  STW                               _i                          ; Main: i = gidx LSL 2

                                  LDW                               _gxd
                                  XORI                              1
                                  JumpEQ                            _elseif_0x0645 25           ; Main: if gxd &= 1

                                  LDWI                              20921
                                  ADDW                              _i
                                  PEEK                              
                                  ADDW                              _xf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  LDWI                              _endif_0x06df
                                  CALL                              giga_vAC                    ; Main: sprite FlipX,  peek(@gframes + 0 + i) + xf, gx, gy

_elseif_0x0645                    LDWI                              -1
                                  XORW                              _gxd
                                  JumpEQ                            _elseif_0x0680 26           ; Main: elseif gxd &= -1

                                  LDWI                              20922
                                  ADDW                              _i
                                  PEEK                              
                                  ADDW                              _xf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  LDWI                              _endif_0x06df
                                  CALL                              giga_vAC                    ; Main: sprite NoFlip, peek(@gframes + 1 + i) + xf, gx, gy

_elseif_0x0680                    LDW                               _gyd
                                  XORI                              1
                                  JumpEQ                            _else_0x06ba 27             ; Main: elseif gyd &= 1

                                  LDWI                              20923
                                  ADDW                              _i
                                  PEEK                              
                                  ADDW                              _yf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  LDWI                              _endif_0x06df
                                  CALL                              giga_vAC                    ; Main: sprite NoFlip, peek(@gframes + 2 + i) + yf, gx, gy

_else_0x06ba                      LDWI                              20924
                                  ADDW                              _i
                                  PEEK                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  ADDW                              _yf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, peek(@gframes + 3 + i) + yf, gx, gy

_endif_0x06df                     Return                                                        ; Main: return

_drawScaredGhost                  PUSH                              
                                  LDW                               _gxd
                                  XORI                              1
                                  JumpEQ                            _elseif_0x0710 29           ; Main: if gxd &= 1

                                  LDI                               54
                                  ADDW                              _xf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  LDWI                              _endif_0x077e
                                  CALL                              giga_vAC                    ; Main: sprite FlipX,  ScaredRt + xf, gx, gy

_elseif_0x0710                    LDWI                              -1
                                  XORW                              _gxd
                                  JumpEQ                            _elseif_0x073f 30           ; Main: elseif gxd &= -1

                                  LDI                               52
                                  ADDW                              _xf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  STLW                              0xFE
                                  LDWI                              _page_0x0800
                                  CALL                              giga_vAC
_page_0x0800                      LDLW                              0xFE
                                  LDWI                              _endif_0x077e
                                  CALL                              giga_vAC                    ; Main: sprite NoFlip, ScaredLt + xf, gx, gy

_elseif_0x073f                    LDW                               _gyd
                                  XORI                              1
                                  BNE                               _else_0x0765                ; Main: elseif gyd &&= 1

                                  LDI                               50
                                  ADDW                              _yf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  BRA                               _endif_0x077e               ; Main: sprite NoFlip, ScaredDn + yf, gx, gy

_else_0x0765                      LDI                               48
                                  ADDW                              _yf
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, ScaredUp + yf, gx, gy

_endif_0x077e                     Return                                                        ; Main: return

_drawDeadGhost                    PUSH                              
                                  LDW                               _gxd
                                  XORI                              1
                                  BNE                               _elseif_0x07ad              ; Main: if gxd &&= 1

                                  LDI                               59
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  BRA                               _endif_0x0825               ; Main: sprite FlipX,  EyesRt, gx+2, gy+3

_elseif_0x07ad                    LDWI                              -1
                                  XORW                              _gxd
                                  BNE                               _elseif_0x07da              ; Main: elseif gxd &&= -1

                                  LDI                               58
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  BRA                               _endif_0x0825               ; Main: sprite NoFlip, EyesLt, gx+2, gy+3

_elseif_0x07da                    LDW                               _gyd
                                  XORI                              1
                                  BNE                               _else_0x0806                ; Main: elseif gyd &&= 1

                                  LDI                               57
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  BRA                               _endif_0x0825               ; Main: sprite NoFlip, EyesDn, gx+2, gy+3

_else_0x0806                      LDI                               56
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSpriteY                                                   ; Main: sprite FlipY,  EyesUp, gx+2, gy+3

_endif_0x0825                     Return                                                        ; Main: return

_drawPills                        PUSH                              
                                  LD                                _timeTicks
                                  ANDI                              7
                                  STW                               _i                          ; Main: i = timeTicks.lo AND 7

                                  LDW                               _i
                                  XORI                              0
                                  JumpEQ                            _endif_0x090f 41            ; Main: if i &= 0

                                  LD                                _timeTicks
                                  STW                               mathShift
                                  ShiftRight3bit                    
                                  ANDI                              1
                                  STW                               _i                          ; Main: i = (timeTicks.lo LSR 3) AND 1

                                  LDWI                              0x6dae
                                  PEEK                              
                                  XORI                              2
                                  JumpEQ                            _else_0x0882 37
                                  LDI                               61
                                  ADDW                              _i
                                  STW                               spriteId
                                  LDI                               5
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_LT) &= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x0882                      LDWI                              0x6dc7
                                  PEEK                              
                                  XORI                              2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0900
                                  CALL                              giga_vAC
_page_0x0900                      LDLW                              0xFE
                                  JumpEQ                            _else_0x08b1 38
                                  LDI                               61
                                  ADDW                              _i
                                  STW                               spriteId
                                  LDI                               130
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_RT) &= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x08b1                      LDWI                              0x5dae
                                  PEEK                              
                                  XORI                              2
                                  JumpEQ                            _else_0x08e0 39
                                  LDI                               61
                                  ADDW                              _i
                                  STW                               spriteId
                                  LDI                               5
                                  ST                                spriteXY
                                  LDI                               89
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_LB) &= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_else_0x08e0                      LDWI                              0x5dc7
                                  PEEK                              
                                  XORI                              2
                                  JumpEQ                            _endif_0x090f 40
                                  LDI                               61
                                  ADDW                              _i
                                  STW                               spriteId
                                  LDI                               130
                                  ST                                spriteXY
                                  LDI                               89
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_RB) &= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_endif_0x090f                     Return                                                        ; Main: return

_movePucMon                       PUSH                              
                                  LDWI                              _coordsPucMon
                                  CALL                              giga_vAC                    ; Main: gosub coordsPucMon

                                  LDW                               _ci
                                  SUBW                              _pxd
                                  STW                               _puci                       ; Main: puci = ci - pxd

                                  LDW                               _cj
                                  SUBW                              _pyd
                                  STW                               _pucj                       ; Main: pucj = cj - pyd

                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(cj, ci)

                                  LDW                               _mz
                                  ANDI                              15
                                  XORI                              1
                                  JumpEQ                            _elseif_0x098e 42           ; Main: if (mz AND &h0F) &= DOT

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               3
                                  STW                               memValue
                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: maze(cj, ci) = (mz AND &hF0) OR RDOT

                                  LDWI                              26278
                                  STW                               bcdDstAddr
                                  LDI                               10
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 10

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC                    ; Main: call drawScore

                                  LD                                _livesDots
                                  SUBI                              1
                                  ST                                _livesDots
                                  LDWI                              _endif_0x0a31
                                  CALL                              giga_vAC                    ; Main: livesDots.lo = livesDots.lo - 1

_elseif_0x098e                    LDW                               _mz
                                  XORI                              2
                                  JumpEQ                            _elseif_0x09e5 43           ; Main: elseif mz &= PILL

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               4
                                  STW                               memValue
                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: maze(cj, ci) = (mz AND &hF0) OR RPILL

                                  LDI                               1
                                  STW                               _gmode                      ; Main: gmode = SCARED_MODE

                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
                                  LDI                               0
                                  STW                               _timeTicks                  ; Main: timeTicks = 0

                                  LDWI                              26278
                                  STW                               bcdDstAddr
                                  LDI                               50
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 50

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC                    ; Main: call drawScore

                                  LD                                _livesDots
                                  SUBI                              1
                                  ST                                _livesDots
                                  LDWI                              _endif_0x0a31
                                  CALL                              giga_vAC                    ; Main: livesDots.lo = livesDots.lo - 1

_elseif_0x09e5                    LDW                               _mz
                                  SUBI                              224
                                  JumpGE                            _elseif_0x0a19 44           ; Main: elseif mz &>= DOOR

                                  LDW                               _oxd
                                  STW                               _pxd
                                  LDW                               _oyd
                                  STW                               _pyd                        ; Main: pxd = oxd : pyd = oyd

                                  LDWI                              _coordsPucMon
                                  CALL                              giga_vAC                    ; Main: gosub coordsPucMon

                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  STW                               _mz
                                  LDWI                              _endif_0x0a31
                                  CALL                              giga_vAC                    ; Main: mz = maze(cj, ci)

_elseif_0x0a19                    LDW                               _mz
                                  XORI                              160
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
                                  JumpEQ                            _endif_0x0a31 45            ; Main: elseif mz &= TUNNEL

                                  LDI                               131
                                  SUBW                              _px
                                  STW                               _px                         ; Main: px = (129+ORIGIN_X) - px

_endif_0x0a31                     Return                                                        ; Main: return

_moveGhosts                       PUSH                              
                                  LDI                               0
                                  STW                               _gidx                       ; Main: for gidx=0 to NUM_GHOSTS-1

_next_0x0a38                      LDWI                              _getGhostVars
                                  CALL                              giga_vAC                    ; Main: gosub getGhostVars

                                  LDI                               0
                                  STW                               _slowed                     ; Main: slowed = 0

                                  LDW                               _gmode
                                  XORI                              1
                                  CALL                              convertEqOpAddr
                                  STW                               0xe8
                                  LD                                _flags
                                  ANDI                              2
                                  ORW                               0xe8
                                  JumpFalse                         _endif_0x0a97 48            ; Main: if (gmode = SCARED_MODE) OR (flags.lo AND 2)

                                  LD                                _timeTicks
                                  XORI                              255
                                  ANDI                              1
                                  JumpFalse                         _endif_0x0a97 47            ; Main: if timeTicks.lo XOR 255 AND 1  'if timeTicks.lo AND 1 = 0

                                  LD                                _flags
                                  XORI                              255
                                  ANDI                              1
                                  JumpFalse                         _endif_0x0a97 46            ; Main: if flags.lo XOR 255 AND 1  'if flags.lo     AND 1 = 0

                                  LDI                               1
                                  STW                               _slowed                     ; Main: slowed = 1

                                  LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  STW                               _gxd
                                  STW                               _gyd                        ; Main: gxd = 0 : gyd = gxd

_endif_0x0a97                     LDW                               _gx
                                  ADDW                              _gxd
                                  STW                               _gx                         ; Main: gx = gx + gxd

                                  LDW                               _gy
                                  ADDW                              _gyd
                                  STW                               _gy                         ; Main: gy = gy + gyd

                                  LD                                _flags
                                  XORI                              255
                                  ANDI                              1
                                  JumpFalse                         _endif_0x0b61 53            ; Main: if flags.lo XOR 255 AND 1  'if flags.lo AND 1 = 0

                                  LDW                               _gx
                                  SUBW                              _px
                                  Absolute                          
                                  SUBI                              3
                                  JumpLE                            _endif_0x0b61 52            ; Main: if abs(gx - px) &<= 3

                                  LDW                               _gy
                                  SUBW                              _py
                                  Absolute                          
                                  SUBI                              3
                                  JumpLE                            _endif_0x0b61 51            ; Main: if abs(gy - py) &<= 3

                                  LDI                               63
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, gx, gy

                                  LDW                               _gmode
                                  XORI                              1
                                  JumpEQ                            _else_0x0b5d 49             ; Main: if gmode &= SCARED_MODE

                                  LD                                _flags
                                  ORI                               1
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7da0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: flags.lo = flags.lo OR 1 : ghostsFlags(gidx) = flags.lo

                                  LDWI                              26278
                                  STW                               bcdDstAddr
                                  LDW                               _bonus
                                  BcdInt                            
                                  LDW                               _bonus
                                  ADDW                              _bonus
                                  STW                               _bonus                      ; Main: bcdint @pointsBCD, bonus : bonus = bonus + bonus

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC
                                  LDWI                              _endif_0x0b61
                                  CALL                              giga_vAC                    ; Main: call drawScore

_else_0x0b5d                      LDI                               1
                                  ST                                _flags + 1                  ; Main: flags.hi = 1

_endif_0x0b61                     LDW                               _gmode
                                  XORI                              1
                                  JumpEQ                            _endif_0x0ba1 56            ; Main: if gmode &= SCARED_MODE

                                  LD                                _timeTicks + 1
                                  XORI                              0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ea0
                                  CALL                              giga_vAC
_page_0x0ea0                      LDLW                              0xFE
                                  JumpEQ                            _endif_0x0ba1 55            ; Main: if timeTicks.hi &= 0

                                  LD                                _timeTicks
                                  XORI                              1
                                  JumpEQ                            _endif_0x0ba1 54            ; Main: if timeTicks.lo &= 1

                                  LDI                               0
                                  SUBW                              _gxd
                                  STW                               _gxd
                                  LDI                               0
                                  SUBW                              _gyd
                                  STW                               _gyd                        ; Main: gxd = -gxd : gyd = -gyd

_endif_0x0ba1                     LDW                               _gx
                                  STW                               _mx
                                  LDW                               _gy
                                  STW                               _my
                                  LDWI                              _mod5
                                  CALL                              giga_vAC                    ; Main: mx = gx : my = gy : gosub mod5

                                  LDW                               _mx
                                  XORI                              3
                                  JumpNE                            _else_0x0bc3 57
                                  LDWI                              _moveNextGhost
                                  CALL                              giga_vAC                    ; Main: if mx &<> 3 then goto moveNextGhost

_else_0x0bc3                      LDW                               _my
                                  XORI                              3
                                  JumpNE                            _else_0x0bd8 58
                                  LDWI                              _moveNextGhost
                                  CALL                              giga_vAC                    ; Main: if my &<> 3 then goto moveNextGhost

_else_0x0bd8                      LDW                               _gx
                                  ADDW                              _gxd
                                  ADDW                              _gxd
                                  STLW                              0xFE
                                  LDWI                              _page_0x0fa0
                                  CALL                              giga_vAC
_page_0x0fa0                      LDLW                              0xFE
                                  ADDW                              _gxd
                                  ADDI                              4
                                  STW                               _ci                         ; Main: ci = gx + gxd + gxd + gxd + -(ORIGIN_X-6)

                                  LDW                               _gy
                                  ADDW                              _gyd
                                  ADDW                              _gyd
                                  ADDW                              _gyd
                                  ADDI                              4
                                  STW                               _cj                         ; Main: cj = gy + gyd + gyd + gyd +  (ORIGIN_Y+2)

                                  LDWI                              _div5
                                  CALL                              giga_vAC                    ; Main: call div5

                                  LDW                               _ci
                                  SUBW                              _gxd
                                  SUBW                              _gxd
                                  STW                               _di                         ; Main: di = ci - gxd - gxd

                                  LDW                               _cj
                                  SUBW                              _gyd
                                  SUBW                              _gyd
                                  STW                               _dj                         ; Main: dj = cj - gyd - gyd

                                  LDW                               _ci
                                  SUBW                              _gxd
                                  STW                               _gi                         ; Main: gi = ci - gxd

                                  LDW                               _cj
                                  SUBW                              _gyd
                                  STW                               _gj                         ; Main: gj = cj - gyd

                                  LDW                               _dj
                                  STW                               memIndex0
                                  LDW                               _di
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(dj, di)

                                  LDW                               _slowed
                                  XORI                              0
                                  JumpEQ                            _else_0x0c64 59
                                  LDWI                              _replaceDot
                                  CALL                              giga_vAC                    ; Main: if slowed &= 0 then gosub replaceDot

_else_0x0c64                      LDW                               _gj
                                  STLW                              0xFE
                                  LDWI                              _page_0x10a0
                                  CALL                              giga_vAC
_page_0x10a0                      LDLW                              0xFE
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              192
                                  JumpEQ                            _endif_0x0cb2 62            ; Main: if maze(gj, gi) &= EXIT

                                  LD                                _flags
                                  XORI                              255
                                  ANDI                              1
                                  BEQ                               _endif_0x0cb2               ; Main: if &(flags.lo XOR 255 AND 1)  'if flags.lo AND 1 = 0

                                  LDW                               _gmode
                                  XORI                              1
                                  JumpNE                            _endif_0x0cb2 60            ; Main: if gmode &<> SCARED_MODE

                                  LDI                               0
                                  STW                               _gxd
                                  LDWI                              -1
                                  STW                               _gyd                        ; Main: gxd = 0 : gyd = -1

_endif_0x0cb2                     LDW                               _gidx
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x65a5
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: on gidx gosub getBlinkyTarget, getPinkyTarget, getInkyTarget, getClydeTarget

                                  LDW                               _gi
                                  XORI                              13
                                  JumpEQ                            _endif_0x0cfd 64            ; Main: if gi &= 13

                                  LDW                               _gj
                                  XORI                              10
                                  STLW                              0xFE
                                  LDWI                              _page_0x11a0
                                  CALL                              giga_vAC
_page_0x11a0                      LDLW                              0xFE
                                  JumpEQ                            _endif_0x0cfd 63            ; Main: if gj &= 10

                                  LD                                _flags
                                  ANDI                              254
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7da0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: flags.lo = flags.lo AND &hFE : ghostsFlags(gidx) = flags.lo

_endif_0x0cfd                     LD                                _flags
                                  ANDI                              1
                                  BEQ                               _endif_0x0d14               ; Main: if &(flags.lo AND 1)

                                  LDI                               12
                                  STW                               _ti
                                  LDI                               11
                                  STW                               _tj                         ; Main: ti = 12 : tj = 11

_endif_0x0d14                     LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(cj, ci)

                                  LDW                               _mz
                                  XORI                              240
                                  JumpEQ                            _elseif_0x0d45 66           ; Main: if mz &= WALL

                                  LDWI                              _getWallDir
                                  CALL                              giga_vAC                    ; Main: gosub getWallDir

                                  LDWI                              _getGhostDir
                                  CALL                              giga_vAC
                                  LDWI                              _moveNextGhost
                                  CALL                              giga_vAC                    ; Main: gosub getGhostDir

                                  STLW                              0xFE
                                  LDWI                              _page_0x12a0
                                  CALL                              giga_vAC
_page_0x12a0                      LDLW                              0xFE
_elseif_0x0d45                    LDW                               _mz
                                  XORI                              160
                                  JumpEQ                            _elseif_0x0d62 67           ; Main: elseif mz &= TUNNEL

                                  LDI                               131
                                  SUBW                              _gx
                                  STW                               _gx
                                  LDWI                              _moveNextGhost
                                  CALL                              giga_vAC                    ; Main: gx = (129+ORIGIN_X) - gx

_elseif_0x0d62                    LDW                               _mz
                                  XORI                              144
                                  JumpEQ                            _else_0x0d92 68             ; Main: elseif mz &= SLOW

                                  LD                                _flags
                                  ORI                               2
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7da0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr
                                  LDWI                              _moveNextGhost
                                  CALL                              giga_vAC                    ; Main: flags.lo = flags.lo OR 2 : ghostsFlags(gidx) = flags.lo

_else_0x0d92                      LD                                _flags
                                  ANDI                              2
                                  JumpFalse                         _endif_0x0dbd 69            ; Main: if flags.lo AND 2

                                  LD                                _flags
                                  ANDI                              253
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7da0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x13a0
                                  CALL                              giga_vAC
_page_0x13a0                      LDLW                              0xFE
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: flags.lo = flags.lo AND &hFD : ghostsFlags(gidx) = flags.lo

_endif_0x0dbd                     LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  ANDI                              240
                                  STW                               _mz                         ; Main: mz = maze(gj, gi) AND &hF0

                                  LDW                               _mz
                                  XORI                              208
                                  CALL                              convertEqOpAddr
                                  STW                               0xe8
                                  LDW                               _mz
                                  XORI                              224
                                  CALL                              convertEqOpAddr
                                  STW                               0xea
                                  LDW                               _mz
                                  XORI                              176
                                  CALL                              convertEqOpAddr
                                  ORW                               0xea
                                  STW                               0xec
                                  LD                                _flags
                                  ANDI                              1
                                  ANDW                              0xec
                                  ORW                               0xe8
                                  BEQ                               _moveNextGhost              ; Main: if &((mz = JUNC) OR (((mz = DOOR) OR (mz = ENTER)) AND (flags.lo AND 1)))

                                  LDWI                              _getJuncDir
                                  CALL                              giga_vAC                    ; Main: gosub getJuncDir

                                  LDWI                              _getGhostDir
                                  CALL                              giga_vAC                    ; Main: gosub getGhostDir

_moveNextGhost                    LDW                               _slowed
                                  XORI                              0
                                  JumpEQ                            _endif_0x0e2d 72            ; Main: if slowed &= 0

                                  LDWI                              _setGhostVars
                                  CALL                              giga_vAC                    ; Main: gosub setGhostVars

                                  STLW                              0xFE
                                  LDWI                              _page_0x14a0
                                  CALL                              giga_vAC
_page_0x14a0                      LDLW                              0xFE
_endif_0x0e2d                     ForNextFarInc                     _gidx _next_0x0a38 3        ; Main: next gidx

                                  Return                                                        ; Main: return

_getGhostVars                     PUSH                              
                                  LDWI                              0x6ca5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  PEEK                              
                                  STW                               _gx
                                  LDWI                              0x6ba5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  PEEK                              
                                  STW                               _gy                         ; Main: gx = ghostsX(gidx).lo : gy = ghostsY(gidx).lo

                                  LDWI                              0x6aa5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  DEEK                              
                                  STW                               _gxd
                                  LDWI                              0x69a5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  DEEK                              
                                  STW                               _gyd                        ; Main: gxd = ghostsXd(gidx)  : gyd = ghostsYd(gidx)

                                  LDWI                              0x7da0
                                  ADDW                              _gidx
                                  PEEK                              
                                  ST                                _flags                      ; Main: flags.lo = ghostsFlags(gidx)

                                  Return                                                        ; Main: return

_setGhostVars                     PUSH                              
                                  LDWI                              0x6ca5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gx
                                  DOKE                              memAddr
                                  LDWI                              0x6ba5
                                  ADDW                              _gidx
                                  STLW                              0xFE
                                  LDWI                              _page_0x15a0
                                  CALL                              giga_vAC
_page_0x15a0                      LDLW                              0xFE
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gy
                                  DOKE                              memAddr                     ; Main: ghostsX(gidx) = gx : ghostsY(gidx) = gy

                                  LDWI                              0x6aa5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gxd
                                  DOKE                              memAddr
                                  LDWI                              0x69a5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gyd
                                  DOKE                              memAddr                     ; Main: ghostsXd(gidx) = gxd : ghostsYd(gidx) = gyd

                                  Return                                                        ; Main: return

_getGhostDir                      PUSH                              
                                  LDW                               _i
                                  LSLW                              
                                  LSLW                              
                                  STW                               _i                          ; Main: i = i LSL 2

                                  LDWI                              21159
                                  ADDW                              _i
                                  DEEK                              
                                  STW                               _gxd                        ; Main: gxd = deek(@GHOST_DIRS + i + 0)

                                  LDWI                              21159
                                  ADDW                              _i
                                  ADDI                              2
                                  DEEK                              
                                  STW                               _gyd                        ; Main: gyd = deek(@GHOST_DIRS + i + 2)

                                  Return                                                        ; Main: return

_setGhostsMode                    PUSH                              
                                  LD                                _timeTicks
                                  ANDI                              31
                                  JumpFalse                         _else_0x0f2b 73
                                  Return                                                        ; Main: if (timeTicks.lo AND &h1F) then return

_else_0x0f2b                      INC                               _timeTicks + 1              ; Main: inc timeTicks.hi

                                  LDW                               _gmode
                                  XORI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x16a0
                                  CALL                              giga_vAC
_page_0x16a0                      LDLW                              0xFE
                                  JumpEQ                            _endif_0x0f69 75            ; Main: if gmode &= SCARED_MODE

                                  LD                                _levelPain + 1
                                  STW                               register15
                                  LDI                               10
                                  SUBW                              register15
                                  STW                               0xe8
                                  LD                                _timeTicks + 1
                                  SUBW                              0xe8
                                  JumpGT                            _endif_0x0f67 74            ; Main: if timeTicks.hi &> (10 - levelPain.hi)

                                  LDI                               0
                                  ST                                _timeTicks + 1              ; Main: timeTicks.hi = 0

                                  LDI                               200
                                  STW                               _bonus                      ; Main: bonus = 200

                                  LDI                               0
                                  STW                               _gmode                      ; Main: gmode = CHASE_MODE

_endif_0x0f67                     Return                                                        ; Main: return

_endif_0x0f69                     LD                                _timeTicks + 1
                                  SUBI                              30
                                  JumpGT                            _endif_0x0f83 76            ; Main: if timeTicks.hi &> 30

                                  LDI                               0
                                  ST                                _timeTicks + 1              ; Main: timeTicks.hi = 0

                                  LDI                               0
                                  STW                               _gmode                      ; Main: gmode = CHASE_MODE

                                  Return                                                        ; Main: return

_endif_0x0f83                     LDI                               20
                                  STW                               0xe8
                                  LD                                _levelPain + 1
                                  ADDW                              0xe8
                                  STW                               0xe8
                                  LD                                _timeTicks + 1
                                  SUBW                              0xe8
                                  STLW                              0xFE
                                  LDWI                              _page_0x17a0
                                  CALL                              giga_vAC
_page_0x17a0                      LDLW                              0xFE
                                  JumpGT                            _endif_0x0fa1 77            ; Main: if timeTicks.hi &> (20 + levelPain.hi)

                                  LDI                               2
                                  STW                               _gmode                      ; Main: gmode = SCATTER_MODE

_endif_0x0fa1                     Return                                                        ; Main: return

_getBlinkyTarget                  PUSH                              
                                  LDW                               _gi
                                  STW                               _bi
                                  LDW                               _gj
                                  STW                               _bj                         ; Main: bi = gi : bj = gj

                                  LDW                               _gmode
                                  XORI                              0
                                  JumpEQ                            _endif_0x0fc6 78            ; Main: if gmode &= CHASE_MODE

                                  LDW                               _puci
                                  STW                               _ti
                                  LDW                               _pucj
                                  STW                               _tj                         ; Main: ti = puci : tj = pucj

                                  Return                                                        ; Main: return

_endif_0x0fc6                     LDI                               27
                                  STW                               _ti
                                  LDI                               0
                                  STW                               _tj                         ; Main: ti = 27 : tj = 0

                                  Return                                                        ; Main: return

_getPinkyTarget                   PUSH                              
                                  LDW                               _gmode
                                  XORI                              0
                                  JumpEQ                            _endif_0x1017 79            ; Main: if gmode &= CHASE_MODE

                                  LDW                               _puci
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  STW                               _ti                         ; Main: ti = puci + pxd + pxd + pxd + pxd

                                  LDW                               _pucj
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  STLW                              0xFE
                                  LDWI                              _page_0x18a0
                                  CALL                              giga_vAC
_page_0x18a0                      LDLW                              0xFE
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  STW                               _tj                         ; Main: tj = pucj + pyd + pyd + pyd + pyd

                                  Return                                                        ; Main: return

_endif_0x1017                     LDI                               0
                                  STW                               _ti
                                  LDI                               0
                                  STW                               _tj                         ; Main: ti = 0 : tj = 0

                                  Return                                                        ; Main: return

_getInkyTarget                    PUSH                              
                                  LDW                               _gmode
                                  XORI                              0
                                  JumpEQ                            _endif_0x1070 80            ; Main: if gmode &= CHASE_MODE

                                  LDW                               _puci
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  STW                               _ti                         ; Main: ti = puci + pxd + pxd

                                  LDW                               _pucj
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  STW                               _tj                         ; Main: tj = pucj + pyd + pyd

                                  LDW                               _ti
                                  SUBW                              _bi
                                  STW                               _bi
                                  LDW                               _tj
                                  SUBW                              _bj
                                  STW                               _bj                         ; Main: bi = ti - bi : bj = tj - bj 'vector from Blinky to (Puc + 2)

                                  LDW                               _ti
                                  ADDW                              _bi
                                  STW                               _ti                         ; Main: ti = ti + bi

                                  LDW                               _tj
                                  ADDW                              _bj
                                  STW                               _tj                         ; Main: tj = tj + bj

                                  Return                                                        ; Main: return

_endif_0x1070                     LDI                               27
                                  STW                               _ti
                                  LDI                               23
                                  STW                               _tj                         ; Main: ti = 27 : tj = 23

                                  Return                                                        ; Main: return

_getClydeTarget                   PUSH                              
                                  LDW                               _gmode
                                  STLW                              0xFE
                                  LDWI                              _page_0x19a0
                                  CALL                              giga_vAC
_page_0x19a0                      LDLW                              0xFE
                                  XORI                              0
                                  JumpEQ                            _endif_0x10cd 82            ; Main: if gmode &= CHASE_MODE

                                  LDW                               _puci
                                  SUBW                              _gi
                                  Absolute                          
                                  STW                               0xea
                                  LDW                               _pucj
                                  SUBW                              _gj
                                  Absolute                          
                                  ADDW                              0xea
                                  SUBI                              8
                                  JumpGT                            _endif_0x10cd 81            ; Main: if abs(puci - gi) + abs(pucj - gj) &> 8 'taxi-cab distance

                                  LDW                               _puci
                                  STW                               _ti
                                  LDW                               _pucj
                                  STW                               _tj                         ; Main: ti = puci : tj = pucj

                                  Return                                                        ; Main: return

_endif_0x10cd                     LDI                               0
                                  STW                               _ti
                                  LDI                               23
                                  STW                               _tj                         ; Main: ti = 0 : tj = 23

                                  Return                                                        ; Main: return

_getJuncDir                       PUSH                              
                                  LDW                               _gxd
                                  JumpFalse                         _else_0x117a 88             ; Main: if (gxd)

                                  LDW                               _tj
                                  SUBW                              _gj
                                  STLW                              0xFE
                                  LDWI                              _page_0x1aa0
                                  CALL                              giga_vAC
_page_0x1aa0                      LDLW                              0xFE
                                  Absolute                          
                                  JumpFalse                         _endif_0x1175 87            ; Main: if (abs(tj - gj))

                                  LDW                               _gj
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x1139 84            ; Main: if maze(gj - 1, gi) &<> WALL

                                  LDI                               3
                                  STW                               _i
                                  LDW                               _tj
                                  SUBW                              _gj
                                  JumpLT                            _endif_0x1139 83
                                  Return                                                        ; Main: i = 3 : if tj &< gj then return

_endif_0x1139                     LDW                               _gj
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x1175 86            ; Main: if maze(gj + 1, gi) &<> WALL

                                  STLW                              0xFE
                                  LDWI                              _page_0x1ba0
                                  CALL                              giga_vAC
_page_0x1ba0                      LDLW                              0xFE
                                  LDI                               1
                                  STW                               _i
                                  LDW                               _tj
                                  SUBW                              _gj
                                  JumpGT                            _endif_0x1175 85
                                  Return                                                        ; Main: i = 1 : if tj &> gj then return

_endif_0x1175                     LDWI                              _endif_0x120d
                                  CALL                              giga_vAC                    ; Main: endif

_else_0x117a                      LDW                               _ti
                                  SUBW                              _gi
                                  Absolute                          
                                  JumpFalse                         _endif_0x120d 93            ; Main: if (abs(ti - gi))

                                  LDW                               _gi
                                  SUBI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x11d1 90            ; Main: if maze(gj, gi - 1) &<> WALL

                                  LDI                               2
                                  STW                               _i
                                  LDW                               _ti
                                  SUBW                              _gi
                                  STLW                              0xFE
                                  LDWI                              _page_0x1ca0
                                  CALL                              giga_vAC
_page_0x1ca0                      LDLW                              0xFE
                                  JumpLT                            _endif_0x11d1 89
                                  Return                                                        ; Main: i = 2 : if ti &< gi then return

_endif_0x11d1                     LDW                               _gi
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x120d 92            ; Main: if maze(gj, gi + 1) &<> WALL

                                  LDI                               0
                                  STW                               _i
                                  LDW                               _ti
                                  SUBW                              _gi
                                  JumpGT                            _endif_0x120d 91
                                  Return                                                        ; Main: i = 0 : if ti &> gi then return

_endif_0x120d                     LDW                               _gxd
                                  XORI                              1
                                  JumpEQ                            _elseif_0x1226 95           ; Main: if gxd &= 1

                                  LDI                               0
                                  STW                               _i
                                  LDWI                              _endif_0x125d
                                  CALL                              giga_vAC                    ; Main: i = 0

_elseif_0x1226                    LDWI                              -1
                                  XORW                              _gxd
                                  STLW                              0xFE
                                  LDWI                              _page_0x1da0
                                  CALL                              giga_vAC
_page_0x1da0                      LDLW                              0xFE
                                  JumpEQ                            _elseif_0x1240 96           ; Main: elseif gxd &= -1

                                  LDI                               2
                                  STW                               _i
                                  LDWI                              _endif_0x125d
                                  CALL                              giga_vAC                    ; Main: i = 2

_elseif_0x1240                    LDW                               _gyd
                                  XORI                              1
                                  JumpEQ                            _else_0x1259 97             ; Main: elseif gyd &= 1

                                  LDI                               1
                                  STW                               _i
                                  LDWI                              _endif_0x125d
                                  CALL                              giga_vAC                    ; Main: i = 1

_else_0x1259                      LDI                               3
                                  STW                               _i                          ; Main: i = 3

_endif_0x125d                     Return                                                        ; Main: return

_getWallDir                       PUSH                              
                                  LDW                               _gxd
                                  JumpFalse                         _else_0x12d5 102            ; Main: if (gxd)

                                  LDW                               _gj
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x12a6 100           ; Main: if maze(gj - 1, gi) &<> WALL

                                  LDI                               3
                                  STW                               _i
                                  STLW                              0xFE
                                  LDWI                              _page_0x1ea0
                                  CALL                              giga_vAC
_page_0x1ea0                      LDLW                              0xFE
                                  LDW                               _tj
                                  SUBW                              _gj
                                  JumpLT                            _endif_0x12a6 99
                                  Return                                                        ; Main: i = 3 : if tj &< gj then return

_endif_0x12a6                     LDW                               _gj
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _else_0x12d0 101
                                  LDI                               1
                                  STW                               _i
_else_0x12d0                      LDWI                              _endif_0x133b
                                  CALL                              giga_vAC                    ; Main: if maze(gj + 1, gi) &<> WALL then i = 1

_else_0x12d5                      LDW                               _gi
                                  SUBI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x1311 104           ; Main: if maze(gj, gi - 1) &<> WALL

                                  LDI                               2
                                  STW                               _i
                                  LDW                               _ti
                                  STLW                              0xFE
                                  LDWI                              _page_0x1fa0
                                  CALL                              giga_vAC
_page_0x1fa0                      LDLW                              0xFE
                                  SUBW                              _gi
                                  JumpLT                            _endif_0x1311 103
                                  Return                                                        ; Main: i = 2 : if ti &< gi then return

_endif_0x1311                     LDW                               _gi
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x133b 105
                                  LDI                               0
                                  STW                               _i                          ; Main: if maze(gj, gi + 1) &<> WALL then i = 0

_endif_0x133b                     Return                                                        ; Main: return

_replaceDot                       PUSH                              
                                  LDW                               _mz
                                  ANDI                              15
                                  XORI                              1
                                  JumpEQ                            _endif_0x1396 107           ; Main: if (mz AND &h0F) &= DOT

                                  LDW                               _di
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _di
                                  ADDI                              2
                                  STW                               _di                         ; Main: di = (di LSL 2) + di + ORIGIN_X   'di = di*5 + 12

                                  LDW                               _dj
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _dj
                                  ADDI                              2
                                  STW                               _dj                         ; Main: dj = (dj LSL 2) + dj + ORIGIN_Y   'dj = dj*5 + 2

                                  LDW                               _dj
                                  STLW                              0xFE
                                  LDWI                              _page_0x20a0
                                  CALL                              giga_vAC
_page_0x20a0                      LDLW                              0xFE
                                  ADDI                              8
                                  STW                               0xe8
                                  LD                                0xe8
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              _di
                                  STW                               0xea
                                  LDI                               43
                                  POKE                              0xea                        ; Main: poke ((dj + 8) LSL 8) + di, &h2B  'convert dj, di to vram address

_endif_0x1396                     Return                                                        ; Main: return

_coordsPucMon                     PUSH                              
                                  LDW                               _px
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDI                              4
                                  STW                               _ci                         ; Main: ci = px + pxd + pxd + pxd + -(ORIGIN_X-6)

                                  LDW                               _py
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  ADDI                              4
                                  STW                               _cj                         ; Main: cj = py + pyd + pyd + pyd +  (ORIGIN_Y+2)

                                  LDWI                              _div5
                                  CALL                              giga_vAC                    ; Main: call div5

                                  Return                                                        ; Main: return

_handleInput                      PUSH                              
                                  LDW                               _pxd
                                  STW                               _oxd
                                  LDW                               _pyd
                                  STW                               _oyd                        ; Main: oxd = pxd : oyd = pyd

                                  LDW                               _px
                                  STW                               _mx
                                  LDW                               _py
                                  STW                               _my
                                  LDWI                              _mod5
                                  CALL                              giga_vAC                    ; Main: mx = px : my = py : gosub mod5

                                  LD                                giga_buttonState
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  STLW                              0xFE
                                  LDWI                              _page_0x21a0
                                  CALL                              giga_vAC
_page_0x21a0                      LDLW                              0xFE
                                  GosubNumeric                                                  ; Main: gosub get("BUTTON_STATE")

                                  Return                                                        ; Main: return

_253                              PUSH                              
                                  LDW                               _my
                                  XORI                              3
                                  JumpEQ                            _else_0x141a 108
                                  LDI                               0
                                  STW                               _pyd
                                  SUBI                              1
                                  STW                               _pxd                        ; Main: if my &= 3 then pyd = 0 : pxd = pyd-1

_else_0x141a                      Return                                                        ; Main: return

_254                              PUSH                              
                                  LDW                               _my
                                  XORI                              3
                                  JumpEQ                            _else_0x1439 109
                                  LDI                               0
                                  STW                               _pyd
                                  ADDI                              1
                                  STW                               _pxd                        ; Main: if my &= 3 then pyd = 0 : pxd = pyd+1

_else_0x1439                      Return                                                        ; Main: return

_247                              PUSH                              
                                  LDW                               _mx
                                  XORI                              3
                                  JumpEQ                            _else_0x1458 110
                                  LDI                               0
                                  STW                               _pxd
                                  SUBI                              1
                                  STW                               _pyd                        ; Main: if mx &= 3 then pxd = 0 : pyd = pxd-1

_else_0x1458                      Return                                                        ; Main: return

_251                              PUSH                              
                                  LDW                               _mx
                                  XORI                              3
                                  STLW                              0xFE
                                  LDWI                              _page_0x22a0
                                  CALL                              giga_vAC
_page_0x22a0                      LDLW                              0xFE
                                  JumpEQ                            _else_0x1477 111
                                  LDI                               0
                                  STW                               _pxd
                                  ADDI                              1
                                  STW                               _pyd                        ; Main: if mx &= 3 then pxd = 0 : pyd = pxd+1

_else_0x1477                      Return                                                        ; Main: return

_drawScore                        PUSH                                                          ; Main: proc drawScore

                                  LDWI                              26278
                                  STW                               bcdSrcAddr
                                  LDWI                              26534
                                  STW                               bcdDstAddr
                                  LDI                               7
                                  BcdAdd                                                        ; Main: bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                                  LDI                               114
                                  STW                               _drawScore_char             ; Main: char = SCORE_X+ORIGIN_X

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 to SCORE_LEN-1

_next_0x1495                      LDWI                              26540
                                  SUBW                              _i
                                  PEEK                              
                                  ADDI                              66
                                  STW                               spriteId
                                  LDW                               _drawScore_char
                                  ST                                spriteXY
                                  LDI                               67
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), char, SCORE_Y+ORIGIN_Y

                                  LDW                               _drawScore_char
                                  ADDI                              6
                                  STW                               _drawScore_char             ; Main: char = char + 6

                                  STLW                              0xFE
                                  LDWI                              _page_0x23a0
                                  CALL                              giga_vAC
_page_0x23a0                      LDLW                              0xFE
                                  ForNextFarInc                     _i _next_0x1495 6           ; Main: next i

                                  LDWI                              0x67ac
                                  STW                               bcdSrcAddr
                                  LDWI                              0x68ac
                                  STW                               bcdDstAddr
                                  LDI                               7
                                  BcdCmp                            
                                  XORI                              1
                                  JumpEQ                            _endif_0x150d 112           ; Main: if bcdcmp(@scoreBCD+(SCORE_LEN-1), @highBCD+(SCORE_LEN-1), SCORE_LEN) &= 1

                                  LDWI                              26534
                                  STW                               bcdSrcAddr
                                  LDWI                              26790
                                  STW                               bcdDstAddr
                                  LDI                               7
                                  BcdCpy                                                        ; Main: bcdcpy @scoreBCD, @highBCD, SCORE_LEN

                                  LDWI                              _drawHigh
                                  CALL                              giga_vAC                    ; Main: call drawHigh

_endif_0x150d                     Return                                                        ; Main: endproc

_drawHigh                         PUSH                                                          ; Main: proc drawHigh

                                  LDI                               114
                                  STW                               _drawHigh_char              ; Main: char = HIGH_X+ORIGIN_X

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 to SCORE_LEN-1

_next_0x1518                      LDWI                              26796
                                  SUBW                              _i
                                  PEEK                              
                                  ADDI                              66
                                  STLW                              0xFE
                                  LDWI                              _page_0x24a0
                                  CALL                              giga_vAC
_page_0x24a0                      LDLW                              0xFE
                                  STW                               spriteId
                                  LDW                               _drawHigh_char
                                  ST                                spriteXY
                                  LDI                               42
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@highBCD + SCORE_LEN-1 - i), char, HIGH_Y+ORIGIN_Y

                                  LDW                               _drawHigh_char
                                  ADDI                              6
                                  STW                               _drawHigh_char              ; Main: char = char + 6

                                  ForNextFarInc                     _i _next_0x1518 6           ; Main: next i

                                  Return                                                        ; Main: endproc

_drawLevel                        PUSH                                                          ; Main: proc drawLevel

                                  LDI                               65
                                  STW                               spriteId
                                  LDI                               139
                                  ST                                spriteXY
                                  LDI                               55
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Level, LEVEL_X+ORIGIN_X, LEVEL_Y+ORIGIN_Y

                                  LDI                               145
                                  STW                               _drawLevel_char             ; Main: char = LEVEL_X+ORIGIN_X + 6

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 to LEVEL_LEN-1

_next_0x1571                      LDWI                              32514
                                  SUBW                              _i
                                  PEEK                              
                                  ADDI                              66
                                  STW                               spriteId
                                  LDW                               _drawLevel_char
                                  ST                                spriteXY
                                  LDI                               55
                                  ADDI                              8
                                  STLW                              0xFE
                                  LDWI                              _page_0x25a0
                                  CALL                              giga_vAC
_page_0x25a0                      LDLW                              0xFE
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@levelBCD + LEVEL_LEN-1 - i), char, LEVEL_Y+ORIGIN_Y

                                  LDW                               _drawLevel_char
                                  ADDI                              6
                                  STW                               _drawLevel_char             ; Main: char = char + 6

                                  ForNextFarInc                     _i _next_0x1571 1           ; Main: next i

                                  Return                                                        ; Main: endproc

_drawLives                        PUSH                                                          ; Main: proc drawLives

                                  LDI                               139
                                  STW                               _drawLives_puc              ; Main: puc = LIFE_X+ORIGIN_X

                                  LDI                               1
                                  STW                               _i                          ; Main: i = 1

_while_0x15b7                     LD                                _livesDots + 1
                                  STW                               register15
                                  LDW                               _i
                                  SUBW                              register15
                                  JumpLE                            _while_0x15f1 113           ; Main: while i &<= livesDots.hi

                                  LDI                               64
                                  STW                               spriteId
                                  LDW                               _drawLives_puc
                                  ST                                spriteXY
                                  LDI                               111
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Life, puc, LIFE_Y+ORIGIN_Y

                                  LDW                               _drawLives_puc
                                  ADDI                              6
                                  STW                               _drawLives_puc              ; Main: puc = puc + 6

                                  INC                               _i                          ; Main: inc i

                                  LDWI                              _while_0x15b7
                                  CALL                              giga_vAC                    ; Main: wend

                                  STLW                              0xFE
                                  LDWI                              _page_0x26a0
                                  CALL                              giga_vAC
_page_0x26a0                      LDLW                              0xFE
_while_0x15f1                     LDW                               _i
                                  SUBI                              3
                                  JumpLE                            _wend_0x1623 114            ; Main: while i &<= 3

                                  LDI                               62
                                  STW                               spriteId
                                  LDW                               _drawLives_puc
                                  ST                                spriteXY
                                  LDI                               111
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase6x6, puc, LIFE_Y+ORIGIN_Y

                                  LDW                               _drawLives_puc
                                  ADDI                              6
                                  STW                               _drawLives_puc              ; Main: puc = puc + 6

                                  INC                               _i                          ; Main: inc i

                                  LDWI                              _while_0x15f1
                                  CALL                              giga_vAC                    ; Main: wend

_wend_0x1623                      Return                                                        ; Main: endproc

_drawDeath                        PUSH                              
                                  LDWI                              _drawLives
                                  CALL                              giga_vAC                    ; Main: call drawLives

                                  LDI                               1
                                  STW                               _i                          ; Main: for i=1 to 6

_next_0x162f                      LDI                               42
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucLt + 2, px, py

                                  LDI                               10
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait 10

                                  LDI                               63
                                  STLW                              0xFE
                                  LDWI                              _page_0x27a0
                                  CALL                              giga_vAC
_page_0x27a0                      LDLW                              0xFE
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, px, py

                                  LDI                               10
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait 10

                                  ForNextFarInc                     _i _next_0x162f 6           ; Main: next i

                                  Return                                                        ; Main: return

_drawMaze                         PUSH                              
                                  LDI                               48
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h30

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 to (NUM_MAZE_PIECES*2 - 2) step 4

_next_0x1680                      LDWI                              15032
                                  ADDW                              _i
                                  DEEK                              
                                  STW                               cursorXY
                                  LDWI                              14776
                                  ADDW                              _i
                                  DEEK                              
                                  STW                               drawPoly_addr
                                  DrawPolyRel                                                   ; Main: set CURSOR_XY, deek(@MAZE_PIECES + i)     : polyR deek(@MAZE_ADDRS + i)

                                  LDWI                              15032
                                  ADDW                              _i
                                  ADDI                              2
                                  DEEK                              
                                  STW                               cursorXY
                                  LDI                               0xB8
                                  ST                                drawPoly_mode
                                  STLW                              0xFE
                                  LDWI                              _page_0x28a0
                                  CALL                              giga_vAC
_page_0x28a0                      LDLW                              0xFE
                                  SetPolyRelFlipX                   
                                  LDWI                              14776
                                  ADDW                              _i
                                  ADDI                              2
                                  DEEK                              
                                  STW                               drawPoly_addr
                                  DrawPolyRel                                                   ; Main: set CURSOR_XY, deek(@MAZE_PIECES + i + 2) : polyR deek(@MAZE_ADDRS + i + 2), FLIPX

                                  ForNextFarAdd                     _i _next_0x1680 70 4        ; Main: next i

                                  LDI                               0
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, 0 '&h2B

                                  Return                                                        ; Main: return

_drawDots                         PUSH                                                          ; Main: proc drawDots, redraw

                                  LDI                               43
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h2B

                                  LDI                               0
                                  STW                               _cj                         ; Main: for cj=0 to 23

_next_0x16fe                      LDI                               0
                                  STW                               _ci                         ; Main: for ci=0 to 27

_next_0x1702                      LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(cj, ci)

                                  LDW                               _drawDots_redraw
                                  XORI                              1
                                  JumpEQ                            _endif_0x1786 117           ; Main: if redraw &= 1

                                  LDW                               _mz
                                  STLW                              0xFE
                                  LDWI                              _page_0x29a0
                                  CALL                              giga_vAC
_page_0x29a0                      LDLW                              0xFE
                                  ANDI                              15
                                  XORI                              3
                                  JumpEQ                            _elseif_0x174d 115          ; Main: if (mz AND &h0F) &= RDOT       'reset dots

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               1
                                  STW                               _mz
                                  LDWI                              _endif_0x1771
                                  CALL                              giga_vAC                    ; Main: mz = (mz AND &hF0) OR DOT

_elseif_0x174d                    LDW                               _mz
                                  ANDI                              15
                                  XORI                              4
                                  JumpEQ                            _endif_0x1771 116           ; Main: elseif (mz AND &h0F) &= RPILL  'reset pills

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               2
                                  STW                               _mz                         ; Main: mz = (mz AND &hF0) OR PILL

_endif_0x1771                     LDW                               _mz
                                  STW                               memValue
                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x3bd0
                                  CALL                              convert8Arr2dAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: maze(cj, ci) = mz

_endif_0x1786                     LDW                               _mz
                                  ANDI                              15
                                  XORI                              1
                                  JumpEQ                            _endif_0x17cd 118           ; Main: if (mz AND &h0F) &= DOT

                                  LDW                               _ci
                                  LSLW                              
                                  LSLW                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x2aa0
                                  CALL                              giga_vAC
_page_0x2aa0                      LDLW                              0xFE
                                  ADDW                              _ci
                                  ADDI                              2
                                  ST                                drawPixel_xy
                                  LDW                               _cj
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _cj
                                  ADDI                              2
                                  ST                                drawPixel_xy + 1
                                  DrawPixel                                                     ; Main: pset (ci LSL 2) + ci + ORIGIN_X, (cj LSL 2) + cj + ORIGIN_Y

_endif_0x17cd                     ForNextFarInc                     _ci _next_0x1702 27         ; Main: next ci

                                  ForNextFarInc                     _cj _next_0x16fe 23         ; Main: next cj

                                  Return                                                        ; Main: endproc

_initVars                         PUSH                                                          ; Main: proc initVars

                                  LDI                               0x34
                                  STW                               varAddress
                                  ResetVars                                                     ; Main: init vars @timeTicks

                                  LDI                               65
                                  STW                               _px                         ; Main: px = (63+ORIGIN_X)

                                  LDI                               88
                                  STW                               _py                         ; Main: py = (86+ORIGIN_Y)

                                  LDWI                              -1
                                  STW                               _pxd                        ; Main: pxd = -1

                                  LDI                               200
                                  STW                               _bonus                      ; Main: bonus = 200

                                  Rand                              
                                  ANDI                              3
                                  STLW                              0xFE
                                  LDWI                              _page_0x2ba0
                                  CALL                              giga_vAC
_page_0x2ba0                      LDLW                              0xFE
                                  STW                               _initVars_corner            ; Main: corner = (rnd(0) AND 3)

                                  LDI                               0
                                  STW                               _gidx                       ; Main: for gidx=0 to (NUM_GHOSTS - 1)

_next_0x1819                      LDW                               _gidx
                                  XORI                              0
                                  JumpEQ                            _else_0x1835 119            ; Main: if gidx &= 0

                                  LDW                               _gidx
                                  LSLW                              
                                  STW                               _i
                                  LDWI                              _endif_0x184e
                                  CALL                              giga_vAC                    ; Main: i = gidx LSL 1                          'blinky is always reset to the same position

_else_0x1835                      LDW                               _initVars_corner
                                  ADDW                              _gidx
                                  ANDI                              3
                                  ADDI                              1
                                  LSLW                              
                                  STW                               _i                          ; Main: i = (((corner + gidx) AND 3) + 1) LSL 1 'pinky, inky and clyde are reset to 1 of 4 random cage corners

_endif_0x184e                     LDWI                              28323
                                  ADDW                              _i
                                  DEEK                              
                                  STW                               _gx                         ; Main: gx = deek(@ghostsXr + i)

                                  LDWI                              28067
                                  ADDW                              _i
                                  DEEK                              
                                  STW                               _gy                         ; Main: gy = deek(@ghostsYr + i)

                                  LDWI                              -1
                                  STW                               _gxd                        ; Main: gxd = -1                                    'ghosts initially move left

                                  LDWI                              _setGhostVars
                                  CALL                              giga_vAC                    ; Main: gosub setGhostVars

                                  ForNextFarInc                     _gidx _next_0x1819 3        ; Main: next gidx

                                  Return                                                        ; Main: endproc

_startLevel                       PUSH                              
                                  LDI                               63
                                  STW                               spriteId
                                  STLW                              0xFE
                                  LDWI                              _page_0x2ca0
                                  CALL                              giga_vAC
_page_0x2ca0                      LDLW                              0xFE
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, px, py

                                  LDI                               212
                                  ST                                _livesDots                  ; Main: livesDots.lo = 212

                                  LDWI                              26278
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 0

                                  LDWI                              32513
                                  STW                               bcdDstAddr
                                  LD                                _levelPain
                                  BcdInt                                                        ; Main: bcdint @levelBCD, levelPain.lo

                                  LD                                _levelPain + 1
                                  SUBI                              7
                                  JumpGT                            _else_0x18cc 121
                                  LDI                               7
                                  ST                                _levelPain + 1              ; Main: if levelPain.hi &> 7 then levelPain.hi = 7

_else_0x18cc                      LDI                               0x01
                                  STW                               0xd8
                                  LDWI                              _drawDots
                                  CALL                              giga_vAC                    ; Main: call drawDots, 1 'redraw

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC                    ; Main: call drawScore

                                  LDWI                              _drawHigh
                                  CALL                              giga_vAC                    ; Main: call drawHigh

                                  LDWI                              _drawLives
                                  STLW                              0xFE
                                  LDWI                              _page_0x2da0
                                  CALL                              giga_vAC
_page_0x2da0                      LDLW                              0xFE
                                  CALL                              giga_vAC                    ; Main: call drawLives

                                  LDWI                              _drawLevel
                                  CALL                              giga_vAC                    ; Main: call drawLevel

                                  LD                                _levelPain
                                  XORI                              0
                                  JumpEQ                            _else_0x1911 122            ; Main: if levelPain.lo &= 0

                                  LDI                               2
                                  ST                                waveType + 1
                                  LDWI                              12704
                                  PlayMusic                         
                                  LDWI                              _endif_0x191a
                                  CALL                              giga_vAC                    ; Main: play music, MUSIC_INTRO, 2

_else_0x1911                      LDI                               120
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait 120

_endif_0x191a                     Return                                                        ; Main: return

_resetLevel                       PUSH                              
                                  LDI                               0
                                  STW                               _levelPain                  ; Main: levelPain = 0+0*256

                                  LDWI                              768
                                  STW                               _livesDots                  ; Main: livesDots = 3*256

                                  LDWI                              26534
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @scoreBCD, 0

                                  LDWI                              257
                                  STW                               register0
                                  LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x2ea0
                                  CALL                              giga_vAC
_page_0x2ea0                      LDLW                              0xFE
                                  POKE                              register0                   ; Main: poke &h0101, 0

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  Return                                                        ; Main: return

_initSystem                       PUSH                              
                                  LDI                               65
                                  STW                               _px
                                  LDI                               88
                                  STW                               _py                         ; Main: px = (63+ORIGIN_X) : py = (86+ORIGIN_Y)

                                  LDWI                              256
                                  STW                               register0
                                  LDI                               10
                                  POKE                              register0                   ; Main: poke &h0100, &h0A

                                  LDWI                              258
                                  STW                               register0
                                  LDI                               10
                                  POKE                              register0                   ; Main: poke &h0102, &h0A

                                  LDWI                              492
                                  STW                               register0
                                  LDI                               125
                                  POKE                              register0                   ; Main: poke &h01EC, &h7D

                                  LDWI                              494
                                  STW                               register0
                                  LDI                               125
                                  POKE                              register0                   ; Main: poke &h01EE, &h7D

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  LDI                               0
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, 0

                                  LDWI                              2560
                                  STW                               clrAddress
                                  LDI                               160
                                  STW                               clrWidth
                                  LDI                               116
                                  STW                               clrLines
                                  ClearRect                                                     ; Main: cls &h0A00, 160, 116

                                  STLW                              0xFE
                                  LDWI                              _page_0x2fa0
                                  CALL                              giga_vAC
_page_0x2fa0                      LDLW                              0xFE
                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x3cb2
convertEqOp                       EQU     0x30d8
convert8Arr2d                     EQU     0x34b6
resetVars                         EQU     0x3ea0
absolute                          EQU     0x34ac
rand16bit                         EQU     0x30d0
shiftRight1bit                    EQU     0x34a2
shiftRight2bit                    EQU     0x33c3
shiftRight3bit                    EQU     0x33b9
shiftRight4bit                    EQU     0x33af
shiftRight6bit                    EQU     0x33a5
gosubNumericLabel                 EQU     0x33cd
scanlineMode                      EQU     0x30f5
waitVBlank                        EQU     0x36a2
waitVBlanks                       EQU     0x3aa5
resetVideoFlags                   EQU     0x34c0
initClearFuncs                    EQU     0x3ca1
clearRect                         EQU     0x41a4
drawPixel                         EQU     0x3fa0
drawLineSlow                      EQU     0x35cc
drawLineSlowExt                   EQU     0x3ba1
drawLineSlowLoop                  EQU     0x35a2
drawLineSlowSwap                  EQU     0x3eb0
drawPolyRel                       EQU     0x37b8
setPolyRelFlipX                   EQU     0x30eb
setPolyRelFlipY                   EQU     0x30e1
drawSprite_                       EQU     0x42a1
drawSprite                        EQU     0x3da3
drawSpriteX                       EQU     0x36bb
drawSpriteY                       EQU     0x36ae
midiGetNote                       EQU     0x3db0
resetMusic                        EQU     0x43a1
playMusic                         EQU     0x38b1
musicPlayNote                     EQU     0x38a0
bcdAdd                            EQU     0x34cc
bcdInt                            EQU     0x36c8
bcdDigits                         EQU     0x3fad
bcdCmp                            EQU     0x40a5
bcdCmpExt                         EQU     0x39a5
bcdCpy                            EQU     0x37a5
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert8Arr2d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVars           LDI     0
                    DOKE    varAddress
                    INC     varAddress
                    INC     varAddress
                    LD      varAddress
                    XORI    giga_One                        ; end of user vars
                    BNE     resetVars
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            LDW     mathX
                    BGE     abs_exit
                    LDI     0
                    SUBW    mathX
abs_exit            RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight3bit      LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


shiftRight6bit      LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       LDWI    waitVBlank
                    CALL    giga_vAC
                    BRA     waitVB_loop


resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears a rectangle on the viewable screen
clearRect           PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      clrAddress + 1
                    ST      giga_sysArg3
                    LD      clrLines
                    
clearR_loop         ST      clrLines
                    LD      clrWidth
                    ST      giga_sysArg0
                    LD      clrAddress
                    ST      giga_sysArg2
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clrLines
                    SUBI    1
                    BNE     clearR_loop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    POP
                    RET


drawPixel           LD      drawPixel_xy + 1                ; poke peek(256 + 2*y)*256 + x, fg_colour
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      drawPixel_xy + 1
                    LD      fgbgColour + 1
                    POKE    drawPixel_xy
                    RET




drawLineSlow        PUSH
                    LDI     1
                    STW     drawLine_u
                    LDW     drawLine_x2
                    SUBW    drawLine_x1                     ; dx = x2 - x1
                    BGE     drawLS_dxp
                    LDWI    -1
                    STW     drawLine_u
                    LDW     drawLine_x1
                    SUBW    drawLine_x2                     ; dx = x1 - x2
                    
drawLS_dxp          STW     drawLine_dx
                    LDWI    256
                    STW     drawLine_v
                    LDW     drawLine_y2
                    SUBW    drawLine_y1                     ; dy = y2 - y1
                    BGE     drawLS_dyp
                    LDWI    -256
                    STW     drawLine_v
                    LDW     drawLine_y1
                    SUBW    drawLine_y2                     ; sy = y1 - y2
                    
drawLS_dyp          STW     drawLine_dy
                    LDWI    drawLineSlowExt
                    CALL    giga_vAC




drawLineSlowExt     LD      drawLine_x1
                    ST      drawLine_addr
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_addr + 1
                    LDW     drawLine_dx
                    SUBW    drawLine_dy
                    BGE     drawLS_noswap
                    LDWI    drawLineSlowSwap
                    CALL    giga_vAC
                    
drawLS_noswap       LDI     0
                    SUBW    drawLine_dx
                    STW     drawLine_count
                    STW     drawLine_num
                    LDW     drawLine_dx
                    ADDW    drawLine_dx
                    STW     drawLine_dx
                    LDW     drawLine_dy
                    ADDW    drawLine_dy
                    STW     drawLine_dy
                    LDWI    drawLineSlowLoop
                    CALL    giga_vAC


drawLineSlowLoop    LD      fgbgColour + 1
                    POKE    drawLine_addr
                    LDW     drawLine_count
                    ADDW    drawLine_dy
                    STW     drawLine_count
                    BLE     drawLLS_xy
                    SUBW    drawLine_dx
                    STW     drawLine_count
                    LDW     drawLine_addr
                    ADDW    drawLine_v
                    STW     drawLine_addr

drawLLS_xy          LDW     drawLine_addr
                    ADDW    drawLine_u
                    STW     drawLine_addr
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDW     drawLine_num
                    ADDI    1
                    STW     drawLine_num
                    BLE     drawLineSlowLoop

                    POP
                    RET


drawLineSlowSwap    LDW     drawLine_dx
                    STW     drawLine_tmp
                    LDW     drawLine_dy
                    STW     drawLine_dx
                    LDW     drawLine_tmp
                    STW     drawLine_dy
                    LDW     drawLine_u
                    STW     drawLine_tmp
                    LDW     drawLine_v
                    STW     drawLine_u
                    LDW     drawLine_tmp
                    STW     drawLine_v
                    RET



drawPolyRel         PUSH

drawPR_loop         LD      cursorXY
                    STW     drawLine_x1
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_x2
                    SUBI    255
                    BEQ     drawPR_exit
                    LDW     drawLine_x1
drawPR_x2           ADDW    drawLine_x2                     ;relative X mode
                    STW     drawLine_x2
                    ST      cursorXY
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_y2
                    LDW     drawLine_y1
drawPR_y2           ADDW    drawLine_y2                     ;relative Y mode
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    LDWI    drawLineSlow
                    CALL    giga_vAC
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    BRA     drawPR_loop
                    
drawPR_exit         LDI     0x99                            ;ADDW
                    ST      drawPoly_mode
                    LDWI    setPolyRelFlipX
                    CALL    giga_vAC
                    LDWI    setPolyRelFlipY
                    CALL    giga_vAC                        ;reset X and Y modes
                    POP
                    RET


setPolyRelFlipX     LDWI    drawPR_x2
                    STW     drawPoly_addr
                    LD      drawPoly_mode
                    POKE    drawPoly_addr
                    RET


setPolyRelFlipY     LDWI    drawPR_y2
                    STW     drawPoly_addr
                    LD      drawPoly_mode
                    POKE    drawPoly_addr
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite_         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawS_loop          LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     drawS_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    BRA     drawS_loop
                    
drawS_exit          POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteY         PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


resetMusic          LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMu_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMu_loop
                    RET



midiGetNote         LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     musicPtr
                    LD      musicNote
                    LSLW
                    ADDW    musicPtr
                    STW     musicPtr
                    LUP     0x00                            ; get ROM note low byte
                    ;LSLW                                    ; left shift low byte as SOUND command expects
                    ST      musicNote                       ; a non system internal frequency
                    LDW     musicPtr
                    LUP     0x01                            ; get ROM note high byte
                    ST      musicNote + 1
                    LDW     musicNote                       ; this is needed for GET("MIDI_NOTE")
                    RET



playMusic           PUSH
                    
playN_process       LDW     musicStream
                    INC     musicStream
                    PEEK                                    ; get music stream byte
                    STW     musicCommand
                    ANDI    0xF0
                    XORI    0x90                            ; check for start note
                    BNE     playN_endnote
                    LDW     musicStream
                    INC     musicStream
                    PEEK                                    ; get music note
                    ST      musicNote
                    LDWI    midiGetNote
                    CALL    giga_vAC            			; start note
                    LDWI    musicPlayNote
                    CALL    giga_vAC
                    BRA     playN_process
                    
playN_endnote       XORI    0x10                            ; check for end note
                    BNE     playN_segment
                    LDI     0
                    STW     musicNote
                    LDWI    musicPlayNote         			; end note
                    CALL    giga_vAC
                    BRA     playN_process

playN_segment       XORI    0x50                            ; check for new segment
                    BNE     playN_delay
                    LDW     musicStream                     ; music stream
                    DEEK
                    STW     musicStream                     ; 0xD0 new music segment address
                    BNE     playN_process                   ; 0x0000 = stop
                    POP
                    RET

playN_delay         LDW     musicCommand
                    ST      giga_soundTimer                 ; keep pumping soundTimer
                    STW     waitVBlankNum
                    LDWI    waitVBlanks
                    CALL    giga_vAC
                    BRA     playN_process


musicPlayNote       LDW     musicCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      musicPtr + 1
                    LDI     0xFC
                    ST      musicPtr                        ; note address 0x01FC <-> 0x04FC
                    LDW     musicNote
                    DOKE    musicPtr                        ; set note
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


bcdAdd              LDI     0
                    STW     bcdCarry
                    
bcdA_loop           LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                  ; no handling of values > 9
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKE    bcdDstAddr          ; modifies dst bcd value
                    INC     bcdDstAddr
                    INC     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdA_loop
                    RET



                    ; create a bcd value from a +ve int, (max 42767)
bcdInt              PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          ; bcdDstAddr must point to >= 5 digit bcd value
                    LDI     0
                    STW     bcdDigit
                    LDWI    10000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDWI    1000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     100
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     10
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LD      bcdValue
                    POKE    bcdDstAddr
                    POP
                    RET


bcdDigits           LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            ; calculate digit
                    BRA     bcdD_index
    
bcdD_cont           LD      bcdDigit
                    POKE    bcdDstAddr                          ; store digit
                    LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDI     0
                    ST      bcdDigit                            ; reset digit
                    
bcdD_exit           RET



bcdCmp              LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    SUBW    bcdDstData
                    BGT     bcdC_gt
                    BLT     bcdC_lt
                    PUSH
                    LDWI    bcdCmpExt
                    CALL    giga_vAC
                    POP
                    BGT     bcdCmp
                    LDI     0
                    RET

bcdC_gt             LDI     1
                    RET
                    
bcdC_lt             LDWI    -1
                    RET                    


bcdCmpExt           LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDW     bcdSrcAddr
                    SUBI    1
                    STW     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    RET


bcdCpy              LDW     bcdSrcAddr
                    PEEK
                    POKE    bcdDstAddr
                    INC     bcdSrcAddr
                    INC     bcdDstAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdCpy
                    RET

