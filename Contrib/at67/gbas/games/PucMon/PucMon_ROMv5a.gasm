_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
DISABLE_CLIP_BIT                  EQU                               0x0004
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd
DISABLE_CLIP_MSK                  EQU                               0xfffb

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMv5a.i

; Labels
_entryPoint_                      EQU                               0x0200
_reset                            EQU                               0x021f
_start                            EQU                               0x0222
_init                             EQU                               0x0225
_mod5                             EQU                               0x0306
_drawGhosts                       EQU                               0x044c
_drawNextGhost                    EQU                               0x04bc
_drawEyesGhost                    EQU                               0x0656
_movePucMon                       EQU                               0x08d0
_moveNextGhost                    EQU                               0x10bc
_getGhostVars                     EQU                               0x10e2
_setGhostVars                     EQU                               0x11b9
_setGhostsMode                    EQU                               0x12af
_getBlinkyTarget                  EQU                               0x13ad
_getPinkyTarget                   EQU                               0x13cf
_getInkyTarget                    EQU                               0x13f9
_getClydeTarget                   EQU                               0x14d7
_getJuncDir                       EQU                               0x15b2
_getWallDir                       EQU                               0x17e7
_replaceDot                       EQU                               0x19c5
_coordsPucMon                     EQU                               0x19fb
_handleInput                      EQU                               0x1abd
_253                              EQU                               0x1ade
_254                              EQU                               0x1af0
_247                              EQU                               0x1baa
_251                              EQU                               0x1bbc
_nextLevel                        EQU                               0x26d3
_startLevel                       EQU                               0x27f4
_resetLevel                       EQU                               0x29a5
_initSystem                       EQU                               0x29c4
_repeat_0x0228                    EQU                               0x0228
_else_0x023f                      EQU                               0x023b
_endif_0x0245                     EQU                               0x0241
_endif_0x025a                     EQU                               0x024e
_endif_0x0287                     EQU                               0x0271
_endif_0x028a                     EQU                               0x0274
_div5                             EQU                               0x02aa
_page_0x0300                      EQU                               0x0300
_elseif_0x036d                    EQU                               0x0330
_elseif_0x0383                    EQU                               0x0340
_endif_0x0396                     EQU                               0x034d
_elseif_0x03cf                    EQU                               0x0376
_elseif_0x03e5                    EQU                               0x0386
_endif_0x03f8                     EQU                               0x0393
_drawPucMon                       EQU                               0x0395
_endif_0x0419                     EQU                               0x03b0
_elseif_0x0460                    EQU                               0x03e3
_page_0x0400                      EQU                               0x0400
_elseif_0x0489                    EQU                               0x040e
_else_0x04ae                      EQU                               0x042b
_endif_0x04c5                     EQU                               0x043e
_next_0x04dc                      EQU                               0x0451
_endif_0x0509                     EQU                               0x0476
_elseif_0x051e                    EQU                               0x0483
_else_0x0548                      EQU                               0x04a1
_else_0x0566                      EQU                               0x04b3
_endif_0x0569                     EQU                               0x04b6
_else_0x056c                      EQU                               0x04b9
_drawNormalGhost                  EQU                               0x04c7
_page_0x0500                      EQU                               0x0500
_else_0x05e0                      EQU                               0x051b
_endif_0x05fd                     EQU                               0x0530
_else_0x0623                      EQU                               0x054a
_else_0x0626                      EQU                               0x054d
_else_0x0653                      EQU                               0x056e
_endif_0x0670                     EQU                               0x0583
_endif_0x0696                     EQU                               0x059d
_drawScaredGhost                  EQU                               0x059f
_else_0x06ea                      EQU                               0x05df
_endif_0x06fb                     EQU                               0x05f0
_page_0x0600                      EQU                               0x0600
_else_0x0714                      EQU                               0x060d
_else_0x0717                      EQU                               0x0610
_else_0x0738                      EQU                               0x062d
_endif_0x0749                     EQU                               0x063e
_endif_0x0763                     EQU                               0x0654
_elseif_0x0791                    EQU                               0x0674
_page_0x0800                      EQU                               0x0800
_elseif_0x07c0                    EQU                               0x0812
_else_0x07eb                      EQU                               0x082f
_endif_0x0808                     EQU                               0x0842
_drawPills                        EQU                               0x0844
_else_0x0858                      EQU                               0x087a
_else_0x0880                      EQU                               0x0896
_else_0x08a8                      EQU                               0x08b2
_endif_0x08d0                     EQU                               0x08ce
_page_0x0900                      EQU                               0x0900
_elseif_0x094a                    EQU                               0x0937
_elseif_0x0995                    EQU                               0x0976
_elseif_0x09c1                    EQU                               0x099c
_endif_0x09d4                     EQU                               0x09a9
_endif_0x09ea                     EQU                               0x09b7
_moveGhosts                       EQU                               0x09b9
_next_0x09f1                      EQU                               0x09be
_endif_0x0a4b                     EQU                               0x09f6
_page_0x0aa0                      EQU                               0x0aa0
_page_0x0ba0                      EQU                               0x0ba0
_else_0x0b0b                      EQU                               0x0bcc
_endif_0x0b0f                     EQU                               0x0bd0
_endif_0x0b3e                     EQU                               0x0bef
_page_0x0ca0                      EQU                               0x0ca0
_else_0x0b57                      EQU                               0x0ca8
_else_0x0b65                      EQU                               0x0cb2
_page_0x0da0                      EQU                               0x0da0
_else_0x0be7                      EQU                               0x0da6
_endif_0x0c2c                     EQU                               0x0dd3
_page_0x0ea0                      EQU                               0x0ea0
_endif_0x0c73                     EQU                               0x0eaf
_endif_0x0c8a                     EQU                               0x0ebe
_elseif_0x0cb8                    EQU                               0x0ee6
_elseif_0x0cce                    EQU                               0x0ef6
_page_0x0fa0                      EQU                               0x0fa0
_else_0x0cf7                      EQU                               0x0fb9
_endif_0x0d21                     EQU                               0x0fd3
_page_0x10a0                      EQU                               0x10a0
_endif_0x0d8c                     EQU                               0x10c4
_else_0x0da9                      EQU                               0x10dd
_endif_0x0dac                     EQU                               0x10e0
_page_0x11a0                      EQU                               0x11a0
_getGhostDir                      EQU                               0x11f0
_page_0x12a0                      EQU                               0x12a0
_else_0x0e9b                      EQU                               0x12b9
_endif_0x0ecd                     EQU                               0x12df
_endif_0x0ecf                     EQU                               0x12e1
_endif_0x0ee4                     EQU                               0x12f2
_page_0x13a0                      EQU                               0x13a0
_endif_0x0efd                     EQU                               0x13ab
_endif_0x0f1b                     EQU                               0x13c5
_endif_0x0f65                     EQU                               0x13ef
_page_0x14a0                      EQU                               0x14a0
_endif_0x0fb7                     EQU                               0x14cd
_page_0x15a0                      EQU                               0x15a0
_endif_0x1006                     EQU                               0x15a8
_endif_0x1061                     EQU                               0x15eb
_page_0x16a0                      EQU                               0x16a0
_endif_0x1094                     EQU                               0x16b2
_else_0x1097                      EQU                               0x16b5
_endif_0x10df                     EQU                               0x16e9
_page_0x17a0                      EQU                               0x17a0
_endif_0x1112                     EQU                               0x17b6
_elseif_0x1124                    EQU                               0x17c4
_elseif_0x1137                    EQU                               0x17d3
_else_0x1149                      EQU                               0x17e1
_endif_0x114d                     EQU                               0x17e5
_page_0x18a0                      EQU                               0x18a0
_endif_0x118b                     EQU                               0x18b9
_else_0x11b1                      EQU                               0x18d3
_else_0x11b4                      EQU                               0x18d6
_page_0x19a0                      EQU                               0x19a0
_endif_0x11ea                     EQU                               0x19a5
_endif_0x1210                     EQU                               0x19c3
_endif_0x1266                     EQU                               0x19f9
_page_0x1aa0                      EQU                               0x1aa0
_else_0x12df                      EQU                               0x1aee
_page_0x1ba0                      EQU                               0x1ba0
_else_0x12fc                      EQU                               0x1ba8
_else_0x1316                      EQU                               0x1bba
_else_0x1330                      EQU                               0x1bcc
_drawScore                        EQU                               0x1bce
_next_0x134a                      EQU                               0x1be6
_page_0x1ca0                      EQU                               0x1ca0
_endif_0x13af                     EQU                               0x1cdb
_drawHigh                         EQU                               0x1cdd
_next_0x13ba                      EQU                               0x1ce6
_page_0x1da0                      EQU                               0x1da0
_drawLevel                        EQU                               0x1db7
_next_0x140d                      EQU                               0x1dd1
_drawLives                        EQU                               0x1df9
_page_0x1ea0                      EQU                               0x1ea0
_while_0x144c                     EQU                               0x1ea6
_while_0x147d                     EQU                               0x1ecd
_wend_0x14a6                      EQU                               0x1ef0
_eatSound                         EQU                               0x1ef2
_page_0x1fa0                      EQU                               0x1fa0
_endif_0x14ef                     EQU                               0x1fcf
_scaredSound                      EQU                               0x1fd1
_else_0x151f                      EQU                               0x1ff9
_page_0x20a0                      EQU                               0x20a0
_chaseSound                       EQU                               0x20a4
_deadSound                        EQU                               0x20ec
_repeat_0x1592                    EQU                               0x20f9
_page_0x21a0                      EQU                               0x21a0
_next_0x1596                      EQU                               0x21a2
_next_0x15bc                      EQU                               0x21c8
_page_0x22a0                      EQU                               0x22a0
_drawDeath                        EQU                               0x22a9
_next_0x1612                      EQU                               0x22bc
_page_0x23a0                      EQU                               0x23a0
_else_0x1694                      EQU                               0x23c9
_endif_0x16a5                     EQU                               0x23da
_endif_0x16bc                     EQU                               0x23e7
_page_0x24a0                      EQU                               0x24a0
_next_0x16da                      EQU                               0x24a9
_drawDots                         EQU                               0x24eb
_next_0x174d                      EQU                               0x24f4
_next_0x1751                      EQU                               0x24f8
_page_0x25a0                      EQU                               0x25a0
_elseif_0x1791                    EQU                               0x25c8
_endif_0x17b0                     EQU                               0x25d9
_endif_0x17c6                     EQU                               0x25ef
_page_0x26a0                      EQU                               0x26a0
_endif_0x180b                     EQU                               0x26b9
_else_0x1839                      EQU                               0x26e3
_initVars                         EQU                               0x26ea
_page_0x27a0                      EQU                               0x27a0
_next_0x186f                      EQU                               0x27b9
_else_0x1882                      EQU                               0x27c6
_endif_0x189b                     EQU                               0x27d1
_page_0x28a0                      EQU                               0x28a0
_else_0x1903                      EQU                               0x28ce
_else_0x1931                      EQU                               0x28f8
_page_0x29a0                      EQU                               0x29a0
_endif_0x1938                     EQU                               0x29a3
_page_0x2aa0                      EQU                               0x2aa0
_waitArbitrary                    EQU                               0x2ab9
_next_0x19b6                      EQU                               0x2abe

; Global Variables
_livesDots                        EQU                               0x0030
_levelPain                        EQU                               0x0032
_timeTicks                        EQU                               0x0034
_flags                            EQU                               0x0036
_gmode                            EQU                               0x0038
_gx                               EQU                               0x003a
_gy                               EQU                               0x003c
_gxd                              EQU                               0x003e
_gyd                              EQU                               0x0040
_gdir                             EQU                               0x0042
_mz                               EQU                               0x0044
_pyd                              EQU                               0x0046
_oxd                              EQU                               0x0048
_oyd                              EQU                               0x004a
_puci                             EQU                               0x004c
_pucj                             EQU                               0x004e
_ti                               EQU                               0x0050
_tj                               EQU                               0x0052
_bi                               EQU                               0x0054
_bj                               EQU                               0x0056
_zi                               EQU                               0x0058
_zj                               EQU                               0x005a
_px                               EQU                               0x005c
_py                               EQU                               0x005e
_pxd                              EQU                               0x0060
_bonus                            EQU                               0x0062
_eatTicks                         EQU                               0x0064
_scaredTicks                      EQU                               0x0066
_ci                               EQU                               0x0068
_cj                               EQU                               0x006a
_mx                               EQU                               0x006c
_my                               EQU                               0x006e
_gidx                             EQU                               0x0070
_slowed                           EQU                               0x0072
_di                               EQU                               0x0074
_dj                               EQU                               0x0076
_gi                               EQU                               0x0078
_gj                               EQU                               0x007a

; Local Variables
_div5_i                           EQU                               0x00d8
_div5_j                           EQU                               0x00da
_drawPucMon_xf                    EQU                               0x00d8
_drawPucMon_yf                    EQU                               0x00da
_drawNormalGhost_i                EQU                               0x00d8
_drawNormalGhost_xf               EQU                               0x00da
_drawNormalGhost_yf               EQU                               0x00dc
_drawNormalGhost_yskirt           EQU                               0x00de
_drawScaredGhost_xf               EQU                               0x00d8
_drawScaredGhost_yf               EQU                               0x00da
_drawScaredGhost_yskirt           EQU                               0x00dc
_drawPills_i                      EQU                               0x00d8
_getGhostDir_dir                  EQU                               0x00d8
_drawScore_i                      EQU                               0x00d8
_drawScore_char                   EQU                               0x00da
_drawHigh_i                       EQU                               0x00d8
_drawHigh_char                    EQU                               0x00da
_drawLevel_i                      EQU                               0x00d8
_drawLevel_char                   EQU                               0x00da
_drawLives_i                      EQU                               0x00d8
_drawLives_puc                    EQU                               0x00da
_eatSound_n                       EQU                               0x00d8
_chaseSound_n                     EQU                               0x00d8
_chaseSound_v                     EQU                               0x00da
_chaseSound_f                     EQU                               0x00dc
_deadSound_i                      EQU                               0x00d8
_deadSound_v                      EQU                               0x00da
_deadSound_f                      EQU                               0x00dc
_drawDeath_i                      EQU                               0x00d8
_drawDeath_j                      EQU                               0x00da
_drawDeath_n                      EQU                               0x00dc
_drawDeath_f                      EQU                               0x00de
_page_0x24a0_i                    EQU                               0x00d8
_drawDots_redraw                  EQU                               0x00d8
_initVars_i                       EQU                               0x00d8
_initVars_corner                  EQU                               0x00da
_waitArbitrary_i                  EQU                               0x00d8

; Arrays
_maze_array                       EQU                               0x57b4
_maze_array                       DW                                0x6ea6 0x6dad 0x6cad 0x6bad 0x6aad 0x69ad 0x68ad 0x67ad 0x66ad 0x65ad 0x64ad 0x63ad 0x62ad 0x61ad 0x60ad 0x5fad 0x5ead 0x5dad 0x5cad 0x5bad 0x5aad 0x59ad 0x58ad 0x57e4 
_maze_0x6ea6                      EQU                               0x6ea6
_maze_0x6ea6                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x6dad                      EQU                               0x6dad
_maze_0x6dad                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x6cad                      EQU                               0x6cad
_maze_0x6cad                      DB                                0xf0 0x02 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x02 0xf0 
_maze_0x6bad                      EQU                               0x6bad
_maze_0x6bad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x6aad                      EQU                               0x6aad
_maze_0x6aad                      DB                                0xf0 0xd1 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0xd1 0xf0 
_maze_0x69ad                      EQU                               0x69ad
_maze_0x69ad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x68ad                      EQU                               0x68ad
_maze_0x68ad                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x67ad                      EQU                               0x67ad
_maze_0x67ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x66ad                      EQU                               0x66ad
_maze_0x66ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0x00 0x00 0xd0 0xb0 0x00 0xd0 0x00 0x00 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x65ad                      EQU                               0x65ad
_maze_0x65ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xe0 0xe0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x64ad                      EQU                               0x64ad
_maze_0x64ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0xc0 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x63ad                      EQU                               0x63ad
_maze_0x63ad                      DB                                0xa0 0x90 0x90 0x90 0x90 0x00 0xd1 0x00 0x00 0xd0 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0xd0 0x00 0x00 0xd1 0x00 0x90 0x90 0x90 0x90 0xa0 
_maze_0x62ad                      EQU                               0x62ad
_maze_0x62ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x61ad                      EQU                               0x61ad
_maze_0x61ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x60ad                      EQU                               0x60ad
_maze_0x60ad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xd0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xd0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x5fad                      EQU                               0x5fad
_maze_0x5fad                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x5ead                      EQU                               0x5ead
_maze_0x5ead                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x5dad                      EQU                               0x5dad
_maze_0x5dad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x5cad                      EQU                               0x5cad
_maze_0x5cad                      DB                                0xf0 0x02 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x00 0x00 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x02 0xf0 
_maze_0x5bad                      EQU                               0x5bad
_maze_0x5bad                      DB                                0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 
_maze_0x5aad                      EQU                               0x5aad
_maze_0x5aad                      DB                                0xf0 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xf0 
_maze_0x59ad                      EQU                               0x59ad
_maze_0x59ad                      DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x58ad                      EQU                               0x58ad
_maze_0x58ad                      DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x57e4                      EQU                               0x57e4
_maze_0x57e4                      DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_MAZE_BORDER_array                EQU                               0x57a6
_MAZE_BORDER_array                DW                                0x0000 0x0073 0x00ff 0x00ff 0x00ff 0x00ff 0x00ff 
_MAZE_OUTER_T_array               EQU                               0x56e2
_MAZE_OUTER_T_array               DW                                0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x0000 0xffdd 0x0041 0x0000 0x0000 0x000f 0x0002 0x0000 0x00ff 
_MAZE_OUTER_B_array               EQU                               0x56c0
_MAZE_OUTER_B_array               DW                                0xffbc 0x0000 0x0000 0xffec 0x0009 0x0000 0xfff7 0x0000 0x0000 0xffec 0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x00ff 
_MAZE_TJUNC_0_array               EQU                               0x56aa
_MAZE_TJUNC_0_array               DW                                0x0019 0x0000 0x0000 0xfff6 0x0005 0x0000 0x0000 0x000a 0x000f 0x0000 0x00ff 
_MAZE_TJUNC_1_array               EQU                               0x55f2
_MAZE_TJUNC_1_array               DW                                0xfffe 0x0000 0x0000 0xfff6 0xfff1 0x0000 0x00ff 
_MAZE_CAGE_array                  EQU                               0x55e4
_MAZE_CAGE_array                  DW                                0xfff6 0x0000 0x0000 0x0014 0x0011 0x0000 0x00ff 
_MAZE_VERT_0_array                EQU                               0x55d2
_MAZE_VERT_0_array                DW                                0x0000 0x000f 0xfffb 0x0000 0x0000 0xfff1 0x0005 0x0000 0x00ff 
_MAZE_VERT_1_array                EQU                               0x55c0
_MAZE_VERT_1_array                DW                                0x0005 0x0000 0x0000 0x0019 0xfffb 0x0000 0x0000 0xffe7 0x00ff 
_MAZE_CORNER_array                EQU                               0x55ae
_MAZE_CORNER_array                DW                                0x000a 0x0000 0x0000 0x000a 0x0005 0x0000 0x0000 0xfff6 0x00ff 
_MAZE_HORIZ_0_array               EQU                               0x54ee
_MAZE_HORIZ_0_array               DW                                0x000f 0x0000 0x0000 0x0005 0xfff1 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_HORIZ_1_array               EQU                               0x54dc
_MAZE_HORIZ_1_array               DW                                0x0014 0x0000 0x0000 0x0005 0xffec 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_LINE_0_array                EQU                               0x6fa0
_MAZE_LINE_0_array                DW                                0x000f 0x0000 0x00ff 
_MAZE_LINE_1_array                EQU                               0x6ea0
_MAZE_LINE_1_array                DW                                0x0014 0x0000 0x00ff 
_MAZE_PIECES_array                EQU                               0x53b8
_MAZE_PIECES_array                DW                                0x0200 0x0201 0x0202 0x029d 0x029e 0x029f 0x3402 0x3489 0x7546 0x7545 0x6b0c 0x6b7f 0x6b45 0x6b46 0x5745 0x5746 0x2545 0x2546 0x2f3e 0x2f4d 0x3e2a 0x3e61 0x1b25 0x1b66 0x570c 0x577f 0x0c0c 0x0c7f 0x0c25 0x0c66 0x252a 0x2561 0x5725 0x5766 0x1b0c 0x1b7f 
_MAZE_ADDRS_array                 EQU                               0x52b8
_MAZE_ADDRS_array                 DW                                0x57a6 0x57a6 0x57a6 0x57a6 0x57a6 0x57a6 0x56e2 0x56e2 0x56c0 0x56c0 0x56aa 0x56aa 0x55f2 0x55f2 0x55f2 0x55f2 0x55f2 0x55f2 0x55e4 0x55e4 0x55d2 0x55d2 0x55c0 0x55c0 0x55ae 0x55ae 0x54ee 0x54ee 0x54dc 0x54dc 0x6fa0 0x6fa0 0x6ea0 0x6ea0 0x6fa0 0x6fa0 
_GHOST_DIRS_array                 EQU                               0x54cc
_GHOST_DIRS_array                 DW                                0x0001 0x0000 0x0000 0x0001 0xffff 0x0000 0x0000 0xffff 
_gframes_array                    EQU                               0x54bc
_gframes_array                    DB                                0x03 0x02 0x01 0x00 0x07 0x06 0x05 0x04 0x0b 0x0a 0x09 0x08 0x0f 0x0e 0x0d 0x0c 
_gframes1_array                   EQU                               0x7da0
_gframes1_array                   DB                                0x38 0x39 0x3a 0x3b 
_ghostsXr_array                   EQU                               0x6da3
_ghostsXr_array                   DW                                0x0042 0x0036 0x0036 0x004e 0x004e 
_ghostsYr_array                   EQU                               0x6ca3
_ghostsYr_array                   DW                                0x0026 0x0030 0x003a 0x0030 0x003a 
_ghostsX_array                    EQU                               0x6ba5
_ghostsX_array                    DW                                0x0042 0x0036 0x0036 0x004e 
_ghostsY_array                    EQU                               0x6aa5
_ghostsY_array                    DW                                0x0026 0x0030 0x003a 0x0030 
_ghostsXd_array                   EQU                               0x69a5
_ghostsXd_array                   DW                                0xffff 0xffff 0xffff 0xffff 
_ghostsYd_array                   EQU                               0x68a5
_ghostsYd_array                   DW                                0x0000 0x0000 0x0000 0x0000 
_ghostsFlags_array                EQU                               0x7ca0
_ghostsFlags_array                DB                                0x00 0x00 0x00 0x00 
_highBCD_array                    EQU                               0x67a6
_highBCD_array                    DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD_array                   EQU                               0x66a6
_scoreBCD_array                   DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD_array                  EQU                               0x65a6
_pointsBCD_array                  DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_levelBCD_array                   EQU                               0x6ba0
_levelBCD_array                   DB                                0x00 0x00 0x00 0x00 0x00 
_enotes_array                     EQU                               0x6aa0
_enotes_array                     DB                                0x3a 0x3d 0x3f 0x3c 0x39 
_gnotes_array                     EQU                               0x54ac
_gnotes_array                     DB                                0x45 0x47 0x48 0x4a 0x4c 0x4d 0x4f 0x51 0x53 0x51 0x4f 0x4d 0x4c 0x4a 0x48 0x47 
_dnotes_array                     EQU                               0x53a8
_dnotes_array                     DB                                0x4b 0x4a 0x49 0x48 0x47 0x46 0x45 0x44 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x31a0                  EQU                               0x31a0
def_bytes_0x31a0                  DB                                144 71 145 35 4 128 4 144 83 129 5 128 4 144 78 4 
def_bytes_0x31b0                  EQU                               0x31b0
def_bytes_0x31b0                  DB                                128 4 144 75 145 47 5 128 4 144 83 145 35 4 144 78 
def_bytes_0x31c0                  EQU                               0x31c0
def_bytes_0x31c0                  DB                                4 128 129 9 144 75 8 145 47 5 128 4 144 72 145 36 
def_bytes_0x31d0                  EQU                               0x31d0
def_bytes_0x31d0                  DB                                4 128 4 144 84 129 5 128 4 144 79 4 128 4 144 76 
def_bytes_0x31e0                  EQU                               0x31e0
def_bytes_0x31e0                  DB                                145 48 5 128 4 144 84 145 36 4 144 79 4 128 129 9 
def_bytes_0x31f0                  EQU                               0x31f0
def_bytes_0x31f0                  DB                                144 76 8 145 48 5 128 4 144 71 145 35 4 208 160 50 
def_bytes_0x32a0                  EQU                               0x32a0
def_bytes_0x32a0                  DB                                128 4 144 83 129 5 128 4 144 78 4 128 4 144 75 145 
def_bytes_0x32b0                  EQU                               0x32b0
def_bytes_0x32b0                  DB                                47 5 128 4 144 83 145 35 4 144 78 4 128 129 9 144 
def_bytes_0x32c0                  EQU                               0x32c0
def_bytes_0x32c0                  DB                                75 8 145 47 4 128 5 144 75 145 42 4 144 76 4 144 
def_bytes_0x32d0                  EQU                               0x32d0
def_bytes_0x32d0                  DB                                77 129 4 128 5 144 77 145 44 4 144 78 4 144 79 129 
def_bytes_0x32e0                  EQU                               0x32e0
def_bytes_0x32e0                  DB                                4 128 5 144 79 145 46 4 144 80 4 144 81 129 4 128 
def_bytes_0x32f0                  EQU                               0x32f0
def_bytes_0x32f0                  DB                                5 144 83 145 47 8 128 129 208 0 0 
def_bytes_0x0700                  EQU                               0x0700
def_bytes_0x0700                  DB(4)                                32 35 38 41 44 47 49 52 54 56 58 59 61 62 62 63 63 63 62 62 61 59 58 56 54 52 49 47 44 41 38 35 32 29 26 23 20 17 15 12 10 8 6 5 3 2 2 1 1 1 2 2 3 5 6 8 10 12 15 17 20 23 26 29 
def_bytes_0x0701                  EQU                               0x0701
def_bytes_0x0701                  DB(4)                                31 39 46 51 55 58 60 62 63 62 60 58 55 51 46 39 33 27 22 16 11 6 3 1 0 1 3 6 11 16 22 32 39 46 51 55 59 62 63 62 59 54 48 41 32 23 15 8 3 0 3 8 15 26 38 49 58 63 55 46 35 22 11 0 
def_bytes_0x0703                  EQU                               0x0703
def_bytes_0x0703                  DB(4)                                33 45 52 57 60 62 63 62 60 57 52 45 48 50 52 53 52 50 48 45 42 39 35 31 26 21 17 13 11 15 21 28 34 41 47 52 50 47 43 38 31 23 19 16 14 12 11 12 14 16 19 22 25 23 20 15 9 4 1 0 1 5 11 20 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Sprites
def_sprites_0x7fc9                EQU                               0x7fc9
def_sprites_0x7fc9                DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f92                EQU                               0x7f92
def_sprites_0x7f92                DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f5b                EQU                               0x7f5b
def_sprites_0x7f5b                DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 247 
def_sprites_0x7f24                EQU                               0x7f24
def_sprites_0x7f24                DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 247 
def_sprites_0x7ec9                EQU                               0x7ec9
def_sprites_0x7ec9                DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7e92                EQU                               0x7e92
def_sprites_0x7e92                DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7e5b                EQU                               0x7e5b
def_sprites_0x7e5b                DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7e24                EQU                               0x7e24
def_sprites_0x7e24                DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x7dc9                EQU                               0x7dc9
def_sprites_0x7dc9                DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 247 
def_sprites_0x7cc9                EQU                               0x7cc9
def_sprites_0x7cc9                DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 247 
def_sprites_0x7bc9                EQU                               0x7bc9
def_sprites_0x7bc9                DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7ac9                EQU                               0x7ac9
def_sprites_0x7ac9                DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x79c9                EQU                               0x79c9
def_sprites_0x79c9                DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x78c9                EQU                               0x78c9
def_sprites_0x78c9                DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x77c9                EQU                               0x77c9
def_sprites_0x77c9                DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 247 
def_sprites_0x76c9                EQU                               0x76c9
def_sprites_0x76c9                DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 247 
def_sprites_0x75c9                EQU                               0x75c9
def_sprites_0x75c9                DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x74c9                EQU                               0x74c9
def_sprites_0x74c9                DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x73c9                EQU                               0x73c9
def_sprites_0x73c9                DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x72c9                EQU                               0x72c9
def_sprites_0x72c9                DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x71c9                EQU                               0x71c9
def_sprites_0x71c9                DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 247 
def_sprites_0x70c9                EQU                               0x70c9
def_sprites_0x70c9                DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 247 
def_sprites_0x6fc9                EQU                               0x6fc9
def_sprites_0x6fc9                DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6ec9                EQU                               0x6ec9
def_sprites_0x6ec9                DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x6dc9                EQU                               0x6dc9
def_sprites_0x6dc9                DB                                0 0 0 0 0 0 0 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6cc9                EQU                               0x6cc9
def_sprites_0x6cc9                DB                                0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6bc9                EQU                               0x6bc9
def_sprites_0x6bc9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6ac9                EQU                               0x6ac9
def_sprites_0x6ac9                DB                                0 0 15 0 0 0 0 0 15 15 0 0 15 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x69c9                EQU                               0x69c9
def_sprites_0x69c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x68c9                EQU                               0x68c9
def_sprites_0x68c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x67c9                EQU                               0x67c9
def_sprites_0x67c9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x66c9                EQU                               0x66c9
def_sprites_0x66c9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x65c9                EQU                               0x65c9
def_sprites_0x65c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x64c9                EQU                               0x64c9
def_sprites_0x64c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 0 15 15 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x63c9                EQU                               0x63c9
def_sprites_0x63c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x62c9                EQU                               0x62c9
def_sprites_0x62c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 0 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x61c9                EQU                               0x61c9
def_sprites_0x61c9                DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x60c9                EQU                               0x60c9
def_sprites_0x60c9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5fc9                EQU                               0x5fc9
def_sprites_0x5fc9                DB                                0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5ec9                EQU                               0x5ec9
def_sprites_0x5ec9                DB                                15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5dc9                EQU                               0x5dc9
def_sprites_0x5dc9                DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5cc9                EQU                               0x5cc9
def_sprites_0x5cc9                DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 0 0 0 0 0 0 247 
def_sprites_0x5bc9                EQU                               0x5bc9
def_sprites_0x5bc9                DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 247 
def_sprites_0x5ac9                EQU                               0x5ac9
def_sprites_0x5ac9                DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 247 
def_sprites_0x7f11                EQU                               0x7f11
def_sprites_0x7f11                DB                                0 0 0 0 0 0 63 63 0 63 63 0 63 56 0 56 63 0 253 
def_sprites_0x7e11                EQU                               0x7e11
def_sprites_0x7e11                DB                                63 63 0 63 63 0 56 63 0 56 63 0 0 0 0 0 0 0 253 
def_sprites_0x59c9                EQU                               0x59c9
def_sprites_0x59c9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x58c9                EQU                               0x58c9
def_sprites_0x58c9                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7da4                EQU                               0x7da4
def_sprites_0x7da4                DB                                0 0 0 0 0 0 0 43 43 43 0 0 43 43 43 43 43 0 43 43 43 43 43 0 43 43 43 43 43 0 0 43 43 43 0 0 250 
def_sprites_0x7ca4                EQU                               0x7ca4
def_sprites_0x7ca4                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 250 
def_sprites_0x7ba4                EQU                               0x7ba4
def_sprites_0x7ba4                DB                                0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 15 15 15 0 0 250 
def_sprites_0x7aa4                EQU                               0x7aa4
def_sprites_0x7aa4                DB                                63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x79a4                EQU                               0x79a4
def_sprites_0x79a4                DB                                0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_sprites_0x78a4                EQU                               0x78a4
def_sprites_0x78a4                DB                                0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x77a4                EQU                               0x77a4
def_sprites_0x77a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x76a4                EQU                               0x76a4
def_sprites_0x76a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x75a4                EQU                               0x75a4
def_sprites_0x75a4                DB                                0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_sprites_0x74a4                EQU                               0x74a4
def_sprites_0x74a4                DB                                63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x73a4                EQU                               0x73a4
def_sprites_0x73a4                DB                                0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x72a4                EQU                               0x72a4
def_sprites_0x72a4                DB                                63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_sprites_0x71a4                EQU                               0x71a4
def_sprites_0x71a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x70a4                EQU                               0x70a4
def_sprites_0x70a4                DB                                0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x7f0a                EQU                               0x7f0a
def_sprites_0x7f0a                DB                                0 3 0 0 0 0 255 
def_sprites_0x7f03                EQU                               0x7f03
def_sprites_0x7f03                DB                                3 0 3 0 3 0 255 
def_sprites_0x7e0a                EQU                               0x7e0a
def_sprites_0x7e0a                DB                                0 59 0 0 0 0 255 
def_sprites_0x7e03                EQU                               0x7e03
def_sprites_0x7e03                DB                                59 0 59 0 59 0 255 
def_sprites_0x6fc2                EQU                               0x6fc2
def_sprites_0x6fc2                DB                                0 61 0 0 0 0 255 
def_sprites_0x6fbb                EQU                               0x6fbb
def_sprites_0x6fbb                DB                                61 0 61 0 61 0 255 
def_sprites_0x6fb4                EQU                               0x6fb4
def_sprites_0x6fb4                DB                                0 11 0 0 0 0 255 
def_sprites_0x6fad                EQU                               0x6fad
def_sprites_0x6fad                DB                                11 0 11 0 11 0 255 
def_sprites_0x6fa6                EQU                               0x6fa6
def_sprites_0x6fa6                DB                                0 52 0 0 0 0 255 
def_sprites_0x6ec2                EQU                               0x6ec2
def_sprites_0x6ec2                DB                                52 0 52 0 52 0 255 

; Define Fonts

; Lookup Tables
_lut_numericLabs                  EQU                               0x63a3
_lut_numericLabs                  DW                                253 254 247 251 0x0000
_lut_numericAddrs                 EQU                               0x62a5
_lut_numericAddrs                 DW                                0x1ade 0x1af0 0x1baa 0x1bbc 
_lut_onAddrs_0x64a5               EQU                               0x64a5
_lut_onAddrs_0x64a5               DW                                0x13ad 0x13cf 0x13f9 0x14d7 
_spriteLut_0x61a3                 EQU                               0x61a3
_spriteLut_0x61a3                 DW                                0x7fc9 0x0000 0x7f92 0x0003 0x0000
_spriteLut_0x60a3                 EQU                               0x60a3
_spriteLut_0x60a3                 DW                                0x7f5b 0x0000 0x7f24 0x0003 0x0000
_spriteLut_0x5fa3                 EQU                               0x5fa3
_spriteLut_0x5fa3                 DW                                0x7ec9 0x0000 0x7e92 0x0003 0x0000
_spriteLut_0x5ea3                 EQU                               0x5ea3
_spriteLut_0x5ea3                 DW                                0x7ec9 0x0003 0x7e92 0x0000 0x0000
_spriteLut_0x5da3                 EQU                               0x5da3
_spriteLut_0x5da3                 DW                                0x7e5b 0x0000 0x7e24 0x0003 0x0000
_spriteLut_0x5ca3                 EQU                               0x5ca3
_spriteLut_0x5ca3                 DW                                0x7dc9 0x0000 0x7cc9 0x0003 0x0000
_spriteLut_0x5ba3                 EQU                               0x5ba3
_spriteLut_0x5ba3                 DW                                0x7bc9 0x0000 0x7ac9 0x0003 0x0000
_spriteLut_0x5aa3                 EQU                               0x5aa3
_spriteLut_0x5aa3                 DW                                0x7bc9 0x0003 0x7ac9 0x0000 0x0000
_spriteLut_0x59a3                 EQU                               0x59a3
_spriteLut_0x59a3                 DW                                0x79c9 0x0000 0x78c9 0x0003 0x0000
_spriteLut_0x58a3                 EQU                               0x58a3
_spriteLut_0x58a3                 DW                                0x77c9 0x0000 0x76c9 0x0003 0x0000
_spriteLut_0x56a0                 EQU                               0x56a0
_spriteLut_0x56a0                 DW                                0x75c9 0x0000 0x74c9 0x0003 0x0000
_spriteLut_0x55a4                 EQU                               0x55a4
_spriteLut_0x55a4                 DW                                0x75c9 0x0003 0x74c9 0x0000 0x0000
_spriteLut_0x54a2                 EQU                               0x54a2
_spriteLut_0x54a2                 DW                                0x73c9 0x0000 0x72c9 0x0003 0x0000
_spriteLut_0x52ae                 EQU                               0x52ae
_spriteLut_0x52ae                 DW                                0x71c9 0x0000 0x70c9 0x0003 0x0000
_spriteLut_0x52a4                 EQU                               0x52a4
_spriteLut_0x52a4                 DW                                0x6fc9 0x0000 0x6ec9 0x0003 0x0000
_spriteLut_0x51f6                 EQU                               0x51f6
_spriteLut_0x51f6                 DW                                0x6fc9 0x0003 0x6ec9 0x0000 0x0000
_spriteLut_0x51ec                 EQU                               0x51ec
_spriteLut_0x51ec                 DW                                0x6dc9 0x0000 0x6cc9 0x0003 0x0000
_spriteLut_0x51e2                 EQU                               0x51e2
_spriteLut_0x51e2                 DW                                0x6bc9 0x0000 0x6ac9 0x0003 0x0000
_spriteLut_0x51d8                 EQU                               0x51d8
_spriteLut_0x51d8                 DW                                0x69c9 0x0000 0x68c9 0x0003 0x0000
_spriteLut_0x51ce                 EQU                               0x51ce
_spriteLut_0x51ce                 DW                                0x67c9 0x0000 0x66c9 0x0003 0x0000
_spriteLut_0x51c4                 EQU                               0x51c4
_spriteLut_0x51c4                 DW                                0x6dc9 0x0800 0x6cc9 0x0803 0x0000
_spriteLut_0x51ba                 EQU                               0x51ba
_spriteLut_0x51ba                 DW                                0x6bc9 0x0800 0x6ac9 0x0803 0x0000
_spriteLut_0x51b0                 EQU                               0x51b0
_spriteLut_0x51b0                 DW                                0x69c9 0x0800 0x68c9 0x0803 0x0000
_spriteLut_0x51a6                 EQU                               0x51a6
_spriteLut_0x51a6                 DW                                0x67c9 0x0800 0x66c9 0x0803 0x0000
_spriteLut_0x50f6                 EQU                               0x50f6
_spriteLut_0x50f6                 DW                                0x65c9 0x0000 0x64c9 0x0003 0x0000
_spriteLut_0x50ec                 EQU                               0x50ec
_spriteLut_0x50ec                 DW                                0x63c9 0x0000 0x62c9 0x0003 0x0000
_spriteLut_0x50e2                 EQU                               0x50e2
_spriteLut_0x50e2                 DW                                0x61c9 0x0000 0x60c9 0x0003 0x0000
_spriteLut_0x50d8                 EQU                               0x50d8
_spriteLut_0x50d8                 DW                                0x5fc9 0x0000 0x5ec9 0x0003 0x0000
_spriteLut_0x50ce                 EQU                               0x50ce
_spriteLut_0x50ce                 DW                                0x65c9 0x0003 0x64c9 0x0000 0x0000
_spriteLut_0x50c4                 EQU                               0x50c4
_spriteLut_0x50c4                 DW                                0x63c9 0x0003 0x62c9 0x0000 0x0000
_spriteLut_0x50ba                 EQU                               0x50ba
_spriteLut_0x50ba                 DW                                0x61c9 0x0003 0x60c9 0x0000 0x0000
_spriteLut_0x50b0                 EQU                               0x50b0
_spriteLut_0x50b0                 DW                                0x5fc9 0x0003 0x5ec9 0x0000 0x0000
_spriteLut_0x50a6                 EQU                               0x50a6
_spriteLut_0x50a6                 DW                                0x5dc9 0x0000 0x5cc9 0x0003 0x0000
_spriteLut_0x4ff6                 EQU                               0x4ff6
_spriteLut_0x4ff6                 DW                                0x5bc9 0x0000 0x5ac9 0x0003 0x0000
_spriteLut_0x4fec                 EQU                               0x4fec
_spriteLut_0x4fec                 DW                                0x5dc9 0x0000 0x5cc9 0x0003 0x0000
_spriteLut_0x4fe2                 EQU                               0x4fe2
_spriteLut_0x4fe2                 DW                                0x5dc9 0x0003 0x5cc9 0x0000 0x0000
_spriteLut_0x67a0                 EQU                               0x67a0
_spriteLut_0x67a0                 DW                                0x7f11 0x0200 0x0000
_spriteLut_0x66a0                 EQU                               0x66a0
_spriteLut_0x66a0                 DW                                0x7f11 0x0000 0x0000
_spriteLut_0x65a0                 EQU                               0x65a0
_spriteLut_0x65a0                 DW                                0x7e11 0x0000 0x0000
_spriteLut_0x57a0                 EQU                               0x57a0
_spriteLut_0x57a0                 DW                                0x7e11 0x0000 0x0000
_spriteLut_0x4fd8                 EQU                               0x4fd8
_spriteLut_0x4fd8                 DW                                0x59c9 0x0000 0x58c9 0x0006 0x0000
_spriteLut_0x53a2                 EQU                               0x53a2
_spriteLut_0x53a2                 DW                                0x7da4 0x0000 0x0000
_spriteLut_0x51a0                 EQU                               0x51a0
_spriteLut_0x51a0                 DW                                0x7ca4 0x0000 0x0000
_spriteLut_0x4fce                 EQU                               0x4fce
_spriteLut_0x4fce                 DW                                0x59c9 0x0000 0x58c9 0x0003 0x0000
_spriteLut_0x50a0                 EQU                               0x50a0
_spriteLut_0x50a0                 DW                                0x7ba4 0x0000 0x0000
_spriteLut_0x4fc8                 EQU                               0x4fc8
_spriteLut_0x4fc8                 DW                                0x7aa4 0x0000 0x0000
_spriteLut_0x4fc2                 EQU                               0x4fc2
_spriteLut_0x4fc2                 DW                                0x79a4 0x0000 0x0000
_spriteLut_0x4fbc                 EQU                               0x4fbc
_spriteLut_0x4fbc                 DW                                0x78a4 0x0000 0x0000
_spriteLut_0x4fb6                 EQU                               0x4fb6
_spriteLut_0x4fb6                 DW                                0x77a4 0x0000 0x0000
_spriteLut_0x4fb0                 EQU                               0x4fb0
_spriteLut_0x4fb0                 DW                                0x76a4 0x0000 0x0000
_spriteLut_0x4faa                 EQU                               0x4faa
_spriteLut_0x4faa                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x4fa4                 EQU                               0x4fa4
_spriteLut_0x4fa4                 DW                                0x74a4 0x0000 0x0000
_spriteLut_0x4efa                 EQU                               0x4efa
_spriteLut_0x4efa                 DW                                0x73a4 0x0000 0x0000
_spriteLut_0x4ef4                 EQU                               0x4ef4
_spriteLut_0x4ef4                 DW                                0x72a4 0x0000 0x0000
_spriteLut_0x4eee                 EQU                               0x4eee
_spriteLut_0x4eee                 DW                                0x71a4 0x0000 0x0000
_spriteLut_0x4ee8                 EQU                               0x4ee8
_spriteLut_0x4ee8                 DW                                0x70a4 0x0000 0x0000
_spriteLut_0x4ede                 EQU                               0x4ede
_spriteLut_0x4ede                 DW                                0x7f0a 0x0000 0x7f03 0x0003 0x0000
_spriteLut_0x4ed4                 EQU                               0x4ed4
_spriteLut_0x4ed4                 DW                                0x7e0a 0x0000 0x7e03 0x0003 0x0000
_spriteLut_0x4eca                 EQU                               0x4eca
_spriteLut_0x4eca                 DW                                0x6fc2 0x0000 0x6fbb 0x0003 0x0000
_spriteLut_0x4ec0                 EQU                               0x4ec0
_spriteLut_0x4ec0                 DW                                0x6fb4 0x0000 0x6fad 0x0003 0x0000
_spriteLut_0x4eb6                 EQU                               0x4eb6
_spriteLut_0x4eb6                 DW                                0x6fa6 0x0000 0x6ec2 0x0003 0x0000
_spritesLut_                      EQU                               0x0686
_spritesLut_                      DW                                0x61a3 0x60a3 0x5fa3 0x5ea3 0x5da3 0x5ca3 0x5ba3 0x5aa3 0x59a3 0x58a3 0x56a0 0x55a4 0x54a2 0x52ae 0x52a4 0x51f6 0x51ec 0x51e2 0x51d8 0x51ce 0x51c4 0x51ba 0x51b0 0x51a6 0x50f6 0x50ec 0x50e2 0x50d8 0x50ce 0x50c4 0x50ba 0x50b0 0x50a6 0x4ff6 0x4fec 0x4fe2 0x67a0 0x66a0 0x65a0 0x57a0 0x4fd8 0x53a2 0x51a0 0x4fce 0x50a0 0x4fc8 0x4fc2 0x4fbc 0x4fb6 0x4fb0 0x4faa 0x4fa4 0x4efa 0x4ef4 0x4eee 0x4ee8 0x4ede 0x4ed4 0x4eca 0x4ec0 0x4eb6 

; Code
_entryPoint_                      LDI                               0x40
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                                                    ; Main: INIT

                                  CALLI                             _initSystem                 ; Main: gosub initSystem

                                  CALLI                             _page_0x24a0                ; Main: call drawMaze

_reset                            CALLI                             _resetLevel                 ; Main: gosub resetLevel

_start                            CALLI                             _startLevel                 ; Main: gosub startLevel

_init                             CALLI                             _initVars                   ; Main: call initVars

_repeat_0x0228                    CALLI                             _waitArbitrary              ; Main: call waitArbitrary

                                  LDW                               _gmode
                                  XORI                              1
                                  BNE                               _else_0x023f                ; Main: if gmode &&= SCARED_MODE

                                  CALLI                             _drawGhosts                 ; Main: gosub drawGhosts

                                  CALLI                             _drawPucMon
                                  CALLI                             _endif_0x0245               ; Main: call drawPucMon

_else_0x023f                      CALLI                             _drawPucMon                 ; Main: call drawPucMon

                                  CALLI                             _drawGhosts                 ; Main: gosub drawGhosts

_endif_0x0245                     LD                                _eatTicks
                                  BNE                               _endif_0x025a               ; Main: if eatTicks.lo &&= 0

                                  LD                                _livesDots
                                  BNE                               _endif_0x025a               ; Main: if livesDots.lo &&= 0

                                  CALLI                             _nextLevel                  ; Main: goto nextLevel

_endif_0x025a                     LD                                _flags + 1
                                  XORI                              1
                                  BNE                               _endif_0x028a               ; Main: if flags.hi &&= 1

                                  LDI                               0
                                  ST                                _flags + 1                  ; Main: flags.hi = 0

                                  LD                                _livesDots + 1
                                  SUBI                              1
                                  ST                                _livesDots + 1              ; Main: livesDots.hi = livesDots.hi - 1

                                  CALLI                             _drawDeath                  ; Main: call drawDeath

                                  LDI                               0x00
                                  STW                               0xd8
                                  CALLI                             _drawDots                   ; Main: call drawDots, 0 'refresh

                                  LD                                _livesDots + 1
                                  BNE                               _endif_0x0287               ; Main: if livesDots.hi &&= 0

                                  CALLI                             _reset                      ; Main: goto reset

_endif_0x0287                     CALLI                             _init                       ; Main: goto init

_endif_0x028a                     LDI                               40
                                  STW                               spriteId
                                  LDI                               3
                                  ST                                spriteXY
                                  LDI                               53
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Tunnel, (1+ORIGIN_X),   (51+ORIGIN_Y)

                                  LDI                               40
                                  STW                               spriteId
                                  LDI                               125
                                  ST                                spriteXY
                                  LDI                               53
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Tunnel, (123+ORIGIN_X), (51+ORIGIN_Y)

                                  CALLI                             _drawPills                  ; Main: call drawPills

                                  CALLI                             _setGhostsMode              ; Main: gosub setGhostsMode

                                  CALLI                             _moveGhosts                 ; Main: call moveGhosts

                                  CALLI                             _handleInput                ; Main: gosub handleInput

                                  CALLI                             _movePucMon                 ; Main: gosub movePucMon

                                  INC                               _timeTicks                  ; Main: inc timeTicks.lo

                                  CALLI                             _repeat_0x0228              ; Main: forever

_div5                             PUSH                                                          ; Main: proc div5

                                  LDW                               _ci
                                  STW                               mathShift
                                  ShiftRight6bit                    
                                  STW                               0xea
                                  LDW                               _ci
                                  SUBW                              0xea
                                  STW                               _ci                         ; Main: ci = ci - (ci LSR 6)                             'error term

                                  LDW                               _ci
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               _div5_i
                                  LSLW                              
                                  ADDW                              _div5_i
                                  STW                               0xe8
                                  LDW                               _ci
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xe8
                                  STW                               _ci                         ; Main: i  = ci LSL 4 : ci = (i LSL 1) + i + (ci LSL 2)  'multiply by 52

                                  LD                                _ci + 1
                                  STW                               _ci                         ; Main: ci = ci.hi                                       'divide by 256

                                  LDW                               _cj
                                  STW                               mathShift
                                  ShiftRight6bit                    
                                  STW                               0xea
                                  LDW                               _cj
                                  SUBW                              0xea
                                  STW                               _cj                         ; Main: cj = cj - (cj LSR 6)                             'error term

                                  LDW                               _cj
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               _div5_j
                                  LSLW                              
                                  ADDW                              _div5_j
                                  STW                               0xe8
                                  LDW                               _cj
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xe8
                                  STW                               _cj                         ; Main: j  = cj LSL 4 : cj = (j LSL 1) + j + (cj LSL 2)  'multiply by 52

                                  CALLI                             _page_0x0300
_page_0x0300                      LD                                _cj + 1
                                  STW                               _cj                         ; Main: cj = cj.hi                                       'divide by 256

                                  Return                                                        ; Main: endproc

_mod5                             PUSH                              
                                  LD                                _mx + 1
                                  STW                               0xe8
                                  LD                                _mx
                                  ADDW                              0xe8
                                  STW                               _mx
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               0xec
                                  LDW                               _mx
                                  ANDI                              15
                                  ADDW                              0xec
                                  STW                               _mx                         ; Main: mx = mx.hi + mx.lo : mx = (mx LSR 4) + (mx AND &h000F)

                                  LDW                               _mx
                                  SUBI                              14
                                  BLE                               _elseif_0x036d              ; Main: if mx &&> 14

                                  LDW                               _mx
                                  SUBI                              15
                                  STW                               _mx
                                  CALLI                             _endif_0x0396               ; Main: mx = mx - 15

_elseif_0x036d                    LDW                               _mx
                                  SUBI                              9
                                  BLE                               _elseif_0x0383              ; Main: elseif mx &&> 9

                                  LDW                               _mx
                                  SUBI                              10
                                  STW                               _mx
                                  CALLI                             _endif_0x0396               ; Main: mx = mx - 10

_elseif_0x0383                    LDW                               _mx
                                  SUBI                              4
                                  BLE                               _endif_0x0396               ; Main: elseif mx &&> 4

                                  LDW                               _mx
                                  SUBI                              5
                                  STW                               _mx                         ; Main: mx = mx - 5

_endif_0x0396                     LD                                _my + 1
                                  STW                               0xe8
                                  LD                                _my
                                  ADDW                              0xe8
                                  STW                               _my
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               0xec
                                  LDW                               _my
                                  ANDI                              15
                                  ADDW                              0xec
                                  STW                               _my                         ; Main: my = my.hi + my.lo : my = (my LSR 4) + (my AND &h000F)

                                  LDW                               _my
                                  SUBI                              14
                                  BLE                               _elseif_0x03cf              ; Main: if my &&> 14

                                  LDW                               _my
                                  SUBI                              15
                                  STW                               _my
                                  CALLI                             _endif_0x03f8               ; Main: my = my - 15

_elseif_0x03cf                    LDW                               _my
                                  SUBI                              9
                                  BLE                               _elseif_0x03e5              ; Main: elseif my &&> 9

                                  LDW                               _my
                                  SUBI                              10
                                  STW                               _my
                                  CALLI                             _endif_0x03f8               ; Main: my = my - 10

_elseif_0x03e5                    LDW                               _my
                                  SUBI                              4
                                  BLE                               _endif_0x03f8               ; Main: elseif my &&> 4

                                  LDW                               _my
                                  SUBI                              5
                                  STW                               _my                         ; Main: my = my - 5

_endif_0x03f8                     Return                                                        ; Main: return

_drawPucMon                       PUSH                                                          ; Main: proc drawPucMon

                                  LDW                               _mz
                                  XORI                              240
                                  BNE                               _endif_0x0419               ; Main: if mz &&= WALL

                                  LDI                               26
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucLt + 2, px, py

                                  Return                                                        ; Main: return

_endif_0x0419                     LDW                               _px
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              3
                                  STW                               _drawPucMon_xf              ; Main: xf = (px LSR 1) AND 3

                                  LDW                               _py
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              3
                                  STW                               _drawPucMon_yf              ; Main: yf = (py LSR 1) AND 3

                                  LDW                               _pxd
                                  XORI                              1
                                  BNE                               _elseif_0x0460              ; Main: if pxd &&= 1

                                  LDI                               28
                                  ADDW                              _drawPucMon_xf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  CALLI                             _endif_0x04c5               ; Main: sprite FlipX, PucRt + xf, px, py

_elseif_0x0460                    LDWI                              -1
                                  XORW                              _pxd
                                  JumpEQ                            _elseif_0x0489 14           ; Main: elseif pxd &= -1

                                  LDI                               24
                                  ADDW                              _drawPucMon_xf
                                  STW                               spriteId
                                  LDW                               _px
                                  CALLI                             _page_0x0400
_page_0x0400                      ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  CALLI                             _endif_0x04c5               ; Main: sprite NoFlip, PucLt + xf, px, py

_elseif_0x0489                    LDW                               _pyd
                                  XORI                              1
                                  BNE                               _else_0x04ae                ; Main: elseif pyd &&= 1

                                  LDI                               20
                                  ADDW                              _drawPucMon_yf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteY                       
                                  CALLI                             _endif_0x04c5               ; Main: sprite FlipY, PucDn + yf, px, py

_else_0x04ae                      LDI                               16
                                  ADDW                              _drawPucMon_yf
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucUp + yf, px, py

_endif_0x04c5                     LDW                               _px
                                  ADDW                              _pxd
                                  STW                               _px                         ; Main: px = px + pxd

                                  LDW                               _py
                                  ADDW                              _pyd
                                  STW                               _py                         ; Main: py = py + pyd

                                  Return                                                        ; Main: endproc

_drawGhosts                       PUSH                              
                                  LDI                               0
                                  STW                               _gidx                       ; Main: for gidx=0 &to NUM_GHOSTS-1

_next_0x04dc                      CALLI                             _getGhostVars               ; Main: gosub getGhostVars

                                  LD                                _livesDots
                                  CALLI                             convertEqOp
                                  STW                               0xe8
                                  LD                                _flags + 1
                                  ORW                               0xe8
                                  BEQ                               _endif_0x0509               ; Main: if &((flags.hi) OR (livesDots.lo = 0))

                                  LDI                               43
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, gx, gy

                                  CALLI                             _drawNextGhost              ; Main: goto drawNextGhost

_endif_0x0509                     LD                                _flags
                                  ANDI                              1
                                  BEQ                               _elseif_0x051e              ; Main: if &(flags.lo AND 1)

                                  CALLI                             _drawEyesGhost
                                  CALLI                             _drawNextGhost              ; Main: gosub drawEyesGhost

_elseif_0x051e                    LDW                               _gmode
                                  XORI                              1
                                  BNE                               _else_0x056c                ; Main: elseif gmode &&= SCARED_MODE

                                  LD                                _levelPain + 1
                                  STW                               register15
                                  LDI                               8
                                  SUBW                              register15
                                  STW                               0xe8
                                  LD                                _timeTicks + 1
                                  SUBW                              0xe8
                                  BGE                               _else_0x0548                ; Main: if timeTicks.hi &&< (8-levelPain.hi)

                                  CALLI                             _drawScaredGhost
                                  CALLI                             _endif_0x0569               ; Main: call drawScaredGhost

_else_0x0548                      LD                                _timeTicks
                                  STW                               mathShift
                                  ShiftRight3bit                    
                                  ANDI                              1
                                  BEQ                               _else_0x0566                ; Main: if &((timeTicks.lo LSR 3) AND 1)

                                  CALLI                             _drawNormalGhost
                                  CALLI                             _endif_0x0569               ; Main: call drawNormalGhost

_else_0x0566                      CALLI                             _drawScaredGhost            ; Main: call drawScaredGhost

_endif_0x0569                     CALLI                             _drawNextGhost              ; Main: endif

_else_0x056c                      CALLI                             _drawNormalGhost            ; Main: call drawNormalGhost

_drawNextGhost                    ForNextInc                        _gidx _next_0x04dc 3        ; Main: next gidx

                                  Return                                                        ; Main: return

_drawNormalGhost                  PUSH                                                          ; Main: proc drawNormalGhost

                                  LDW                               _gidx
                                  LSLW                              
                                  LSLW                              
                                  STW                               _drawNormalGhost_i          ; Main: i = gidx LSL 2

                                  LDW                               _gx
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  STW                               _drawNormalGhost_xf         ; Main: xf = (gx LSR 2) AND 1

                                  LDW                               _gy
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  STW                               _drawNormalGhost_yf         ; Main: yf = (gy LSR 2) AND 1

                                  LDW                               _gy
                                  ADDI                              7
                                  STW                               _drawNormalGhost_yskirt     ; Main: yskirt = gy + 7

                                  LDW                               _gxd
                                  JumpFalse                         _else_0x0626 28             ; Main: if (gxd)

                                  LDW                               _gxd
                                  XORI                              1
                                  CALLI                             _page_0x0500
_page_0x0500                      BNE                               _else_0x05e0                ; Main: if gxd &&= 1

                                  LDWI                              21692
                                  ADDW                              _drawNormalGhost_i
                                  PEEK                              
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  CALLI                             _endif_0x05fd               ; Main: sprite FlipX, peek(@gframes + 0 + i), gx, gy

_else_0x05e0                      LDWI                              21693
                                  ADDW                              _drawNormalGhost_i
                                  PEEK                              
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, peek(@gframes + 1 + i), gx, gy

_endif_0x05fd                     LDW                               _drawNormalGhost_xf
                                  BEQ                               _else_0x0623
                                  LDWI                              32160
                                  ADDW                              _gidx
                                  PEEK                              
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _drawNormalGhost_yskirt
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
_else_0x0623                      CALLI                             _endif_0x0696               ; Main: if &(xf) then sprite NoFlip, peek(@gframes1 + gidx), gx, yskirt  'draw skirt

_else_0x0626                      LDW                               _gyd
                                  XORI                              1
                                  BNE                               _else_0x0653                ; Main: if gyd &&= 1

                                  LDWI                              21694
                                  ADDW                              _drawNormalGhost_i
                                  PEEK                              
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, peek(@gframes + 2 + i), gx, gy

                                  INC                               _drawNormalGhost_yskirt
                                  CALLI                             _endif_0x0670               ; Main: inc yskirt

_else_0x0653                      LDWI                              21695
                                  ADDW                              _drawNormalGhost_i
                                  PEEK                              
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, peek(@gframes + 3 + i), gx, gy

_endif_0x0670                     LDW                               _drawNormalGhost_yf
                                  BEQ                               _endif_0x0696
                                  LDWI                              32160
                                  ADDW                              _gidx
                                  PEEK                              
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _drawNormalGhost_yskirt
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if &(yf) then sprite NoFlip, peek(@gframes1 + gidx), gx, yskirt  'draw skirt

_endif_0x0696                     Return                                                        ; Main: endproc

_drawScaredGhost                  PUSH                                                          ; Main: proc drawScaredGhost

                                  LDW                               _gx
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  STW                               _drawScaredGhost_xf         ; Main: xf = (gx LSR 2) AND 1

                                  LDW                               _gy
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  STW                               _drawScaredGhost_yf         ; Main: yf = (gy LSR 2) AND 1

                                  LDW                               _gy
                                  ADDI                              7
                                  STW                               _drawScaredGhost_yskirt     ; Main: yskirt = gy + 7

                                  LDW                               _gxd
                                  JumpFalse                         _else_0x0717 36             ; Main: if (gxd)

                                  LDW                               _gxd
                                  XORI                              1
                                  BNE                               _else_0x06ea                ; Main: if gxd &&= 1

                                  LDI                               35
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  CALLI                             _endif_0x06fb               ; Main: sprite FlipX,  ScaredRt, gx, gy

_else_0x06ea                      LDI                               34
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, ScaredLt, gx, gy

_endif_0x06fb                     LDW                               _drawScaredGhost_xf
                                  JumpFalse                         _else_0x0714 35
                                  LDI                               60
                                  STW                               spriteId
                                  CALLI                             _page_0x0600
_page_0x0600                      LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _drawScaredGhost_yskirt
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
_else_0x0714                      CALLI                             _endif_0x0763               ; Main: if (xf) then sprite NoFlip, Scared_1, gx, yskirt  'draw skirt

_else_0x0717                      LDW                               _gyd
                                  XORI                              1
                                  BNE                               _else_0x0738                ; Main: if gyd &&= 1

                                  LDI                               33
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, ScaredDn, gx, gy

                                  INC                               _drawScaredGhost_yskirt
                                  CALLI                             _endif_0x0749               ; Main: inc yskirt

_else_0x0738                      LDI                               32
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, ScaredUp, gx, gy

_endif_0x0749                     LDW                               _drawScaredGhost_yf
                                  BEQ                               _endif_0x0763
                                  LDI                               60
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _drawScaredGhost_yskirt
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if &(yf) then sprite NoFlip, Scared_1, gx, yskirt  'draw skirt

_endif_0x0763                     Return                                                        ; Main: endproc

_drawEyesGhost                    PUSH                              
                                  LDW                               _gxd
                                  XORI                              1
                                  BNE                               _elseif_0x0791              ; Main: if gxd &&= 1

                                  LDI                               39
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  CALLI                             _endif_0x0808               ; Main: sprite FlipX,  EyesRt, gx+2, gy+3

_elseif_0x0791                    LDWI                              -1
                                  XORW                              _gxd
                                  JumpEQ                            _elseif_0x07c0 42           ; Main: elseif gxd &= -1

                                  LDI                               38
                                  STW                               spriteId
                                  CALLI                             _page_0x0800
_page_0x0800                      LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  CALLI                             _endif_0x0808               ; Main: sprite NoFlip, EyesLt, gx+2, gy+3

_elseif_0x07c0                    LDW                               _gyd
                                  XORI                              1
                                  BNE                               _else_0x07eb                ; Main: elseif gyd &&= 1

                                  LDI                               37
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  CALLI                             _endif_0x0808               ; Main: sprite NoFlip, EyesDn, gx+2, gy+3

_else_0x07eb                      LDI                               36
                                  STW                               spriteId
                                  LDW                               _gx
                                  ADDI                              2
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              11
                                  ST                                spriteXY + 1
                                  DrawSpriteY                                                   ; Main: sprite FlipY,  EyesUp, gx+2, gy+3

_endif_0x0808                     Return                                                        ; Main: return

_drawPills                        PUSH                                                          ; Main: proc drawPills

                                  LD                                _timeTicks
                                  ANDI                              7
                                  STW                               _drawPills_i                ; Main: i = timeTicks.lo AND 7

                                  LDW                               _drawPills_i
                                  BNE                               _endif_0x08d0               ; Main: if i &&= 0

                                  LD                                _timeTicks
                                  STW                               mathShift
                                  ShiftRight3bit                    
                                  ANDI                              1
                                  STW                               _drawPills_i                ; Main: i = (timeTicks.lo LSR 3) AND 1

                                  LDWI                              0x6cae
                                  PEEK                              
                                  XORI                              2
                                  JumpEQ                            _else_0x0858 45
                                  LDI                               41
                                  ADDW                              _drawPills_i
                                  STW                               spriteId
                                  LDI                               5
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_LT) &= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x0858                      LDWI                              0x6cc7
                                  PEEK                              
                                  XORI                              2
                                  BNE                               _else_0x0880
                                  LDI                               41
                                  ADDW                              _drawPills_i
                                  STW                               spriteId
                                  LDI                               130
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_RT) &&= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x0880                      LDWI                              0x5cae
                                  PEEK                              
                                  XORI                              2
                                  BNE                               _else_0x08a8
                                  LDI                               41
                                  ADDW                              _drawPills_i
                                  STW                               spriteId
                                  LDI                               5
                                  ST                                spriteXY
                                  LDI                               89
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_LB) &&= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_else_0x08a8                      LDWI                              0x5cc7
                                  PEEK                              
                                  XORI                              2
                                  BNE                               _endif_0x08d0
                                  LDI                               41
                                  ADDW                              _drawPills_i
                                  STW                               spriteId
                                  LDI                               130
                                  ST                                spriteXY
                                  LDI                               89
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: if peek(PILL_RB) &&= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_endif_0x08d0                     Return                                                        ; Main: endproc

_movePucMon                       PUSH                              
                                  CALLI                             _coordsPucMon               ; Main: gosub coordsPucMon

                                  LDW                               _ci
                                  SUBW                              _pxd
                                  STW                               _puci                       ; Main: puci = ci - pxd

                                  LDW                               _cj
                                  SUBW                              _pyd
                                  STW                               _pucj                       ; Main: pucj = cj - pyd

                                  LDI                               0
                                  ST                                _eatTicks + 1               ; Main: eatTicks.hi = 0

                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(cj, ci)

                                  LDW                               _mz
                                  ANDI                              15
                                  XORI                              1
                                  CALLI                             _page_0x0900
_page_0x0900                      BNE                               _elseif_0x094a              ; Main: if (mz AND &h0F) &&= DOT

                                  LDI                               1
                                  ST                                _eatTicks + 1               ; Main: eatTicks.hi = 1

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               3
                                  STW                               memValue
                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: maze(cj, ci) = (mz AND &hF0) OR RDOT

                                  LDWI                              26022
                                  STW                               bcdDstAddr
                                  LDI                               10
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 10

                                  CALLI                             _drawScore                  ; Main: call drawScore

                                  LD                                _livesDots
                                  SUBI                              1
                                  ST                                _livesDots
                                  CALLI                             _endif_0x09d4               ; Main: livesDots.lo = livesDots.lo - 1

_elseif_0x094a                    LDW                               _mz
                                  XORI                              2
                                  BNE                               _elseif_0x0995              ; Main: elseif mz &&= PILL

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               4
                                  STW                               memValue
                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: maze(cj, ci) = (mz AND &hF0) OR RPILL

                                  LDI                               1
                                  STW                               _gmode                      ; Main: gmode = SCARED_MODE

                                  LDI                               0
                                  STW                               _timeTicks                  ; Main: timeTicks = 0

                                  LDWI                              26022
                                  STW                               bcdDstAddr
                                  LDI                               50
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 50

                                  CALLI                             _drawScore                  ; Main: call drawScore

                                  LD                                _livesDots
                                  SUBI                              1
                                  ST                                _livesDots
                                  CALLI                             _endif_0x09d4               ; Main: livesDots.lo = livesDots.lo - 1

_elseif_0x0995                    LDW                               _mz
                                  SUBI                              224
                                  BLT                               _elseif_0x09c1              ; Main: elseif mz &&>= DOOR

                                  LDW                               _oxd
                                  STW                               _pxd
                                  LDW                               _oyd
                                  STW                               _pyd                        ; Main: pxd = oxd : pyd = oyd

                                  CALLI                             _coordsPucMon               ; Main: gosub coordsPucMon

                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  STW                               _mz
                                  CALLI                             _endif_0x09d4               ; Main: mz = maze(cj, ci)

_elseif_0x09c1                    LDW                               _mz
                                  XORI                              160
                                  BNE                               _endif_0x09d4               ; Main: elseif mz &&= TUNNEL

                                  LDI                               131
                                  SUBW                              _px
                                  STW                               _px                         ; Main: px = (129+ORIGIN_X) - px

_endif_0x09d4                     LD                                _eatTicks + 1
                                  STW                               0xe8
                                  LD                                _eatTicks
                                  ORW                               0xe8
                                  BEQ                               _endif_0x09ea               ; Main: if &((eatTicks.hi) OR (eatTicks.lo))

                                  CALLI                             _eatSound                   ; Main: call eatSound

_endif_0x09ea                     Return                                                        ; Main: return

_moveGhosts                       PUSH                                                          ; Main: proc moveGhosts

                                  LDI                               0
                                  STW                               _gidx                       ; Main: for gidx=0 to NUM_GHOSTS-1

_next_0x09f1                      CALLI                             _getGhostVars               ; Main: gosub getGhostVars

                                  LDI                               0
                                  STW                               _slowed                     ; Main: slowed = 0

                                  LDW                               _gmode
                                  XORI                              1
                                  CALLI                             convertEqOp
                                  STW                               0xe8
                                  LD                                _flags
                                  ANDI                              2
                                  ORW                               0xe8
                                  JumpFalse                         _endif_0x0a4b 57            ; Main: if (gmode = SCARED_MODE) OR (flags.lo AND 2)

                                  LD                                _timeTicks
                                  XORI                              255
                                  ANDI                              1
                                  BEQ                               _endif_0x0a4b               ; Main: if &(timeTicks.lo XOR 255 AND 1)  'if timeTicks.lo AND 1 = 0

                                  LD                                _flags
                                  XORI                              255
                                  ANDI                              1
                                  BEQ                               _endif_0x0a4b               ; Main: if &(flags.lo XOR 255 AND 1) 'if flags.lo     AND 1 = 0

                                  LDI                               1
                                  STW                               _slowed                     ; Main: slowed = 1

                                  LDI                               0
                                  STW                               _gxd
                                  STW                               _gyd                        ; Main: gxd = 0 : gyd = gxd

_endif_0x0a4b                     LDW                               _gx
                                  ADDW                              _gxd
                                  STW                               _gx                         ; Main: gx = gx + gxd

                                  CALLI                             _page_0x0aa0
_page_0x0aa0                      LDW                               _gy
                                  ADDW                              _gyd
                                  STW                               _gy                         ; Main: gy = gy + gyd

                                  LD                                _flags
                                  XORI                              255
                                  ANDI                              1
                                  JumpFalse                         _endif_0x0b0f 62            ; Main: if flags.lo XOR 255 AND 1  'if flags.lo AND 1 = 0

                                  LDW                               _gx
                                  SUBW                              _px
                                  Absolute                          
                                  SUBI                              3
                                  JumpLE                            _endif_0x0b0f 61            ; Main: if abs(gx - px) &<= 3

                                  LDW                               _gy
                                  SUBW                              _py
                                  Absolute                          
                                  SUBI                              3
                                  JumpLE                            _endif_0x0b0f 60            ; Main: if abs(gy - py) &<= 3

                                  LDI                               43
                                  STW                               spriteId
                                  LDW                               _gx
                                  ST                                spriteXY
                                  LDW                               _gy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, gx, gy

                                  LDW                               _gmode
                                  XORI                              1
                                  JumpEQ                            _else_0x0b0b 58             ; Main: if gmode &= SCARED_MODE

                                  LDI                               26
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucLt + 2, px, py

                                  CALLI                             _page_0x0ba0
_page_0x0ba0                      CALLI                             _deadSound                  ; Main: call deadSound

                                  LD                                _flags
                                  ORI                               1
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7ca0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: flags.lo = flags.lo OR 1 : ghostsFlags(gidx) = flags.lo

                                  LDWI                              26022
                                  STW                               bcdDstAddr
                                  LDW                               _bonus
                                  BcdInt                            
                                  LDW                               _bonus
                                  ADDW                              _bonus
                                  STW                               _bonus                      ; Main: bcdint @pointsBCD, bonus : bonus = bonus + bonus

                                  CALLI                             _drawScore
                                  CALLI                             _endif_0x0b0f               ; Main: call drawScore

_else_0x0b0b                      LDI                               1
                                  ST                                _flags + 1                  ; Main: flags.hi = 1

_endif_0x0b0f                     LDW                               _gmode
                                  XORI                              1
                                  BNE                               _endif_0x0b3e               ; Main: if gmode &&= SCARED_MODE

                                  LD                                _timeTicks + 1
                                  BNE                               _endif_0x0b3e               ; Main: if timeTicks.hi &&= 0

                                  LD                                _timeTicks
                                  XORI                              1
                                  BNE                               _endif_0x0b3e               ; Main: if timeTicks.lo &&= 1

                                  LDI                               0
                                  SUBW                              _gxd
                                  STW                               _gxd
                                  LDI                               0
                                  SUBW                              _gyd
                                  STW                               _gyd                        ; Main: gxd = -gxd : gyd = -gyd

_endif_0x0b3e                     LDW                               _gx
                                  STW                               _mx
                                  LDW                               _gy
                                  STW                               _my
                                  CALLI                             _mod5                       ; Main: mx = gx : my = gy : gosub mod5

                                  LDW                               _mx
                                  CALLI                             _page_0x0ca0
_page_0x0ca0                      XORI                              3
                                  BEQ                               _else_0x0b57
                                  CALLI                             _moveNextGhost              ; Main: if mx &&<> 3 then goto moveNextGhost

_else_0x0b57                      LDW                               _my
                                  XORI                              3
                                  BEQ                               _else_0x0b65
                                  CALLI                             _moveNextGhost              ; Main: if my &&<> 3 then goto moveNextGhost

_else_0x0b65                      LDW                               _gx
                                  ADDW                              _gxd
                                  ADDW                              _gxd
                                  ADDW                              _gxd
                                  ADDI                              4
                                  STW                               _ci                         ; Main: ci = gx + gxd + gxd + gxd + -(ORIGIN_X-6)

                                  LDW                               _gy
                                  ADDW                              _gyd
                                  ADDW                              _gyd
                                  ADDW                              _gyd
                                  ADDI                              4
                                  STW                               _cj                         ; Main: cj = gy + gyd + gyd + gyd +  (ORIGIN_Y+2)

                                  CALLI                             _div5                       ; Main: call div5

                                  LDW                               _ci
                                  SUBW                              _gxd
                                  SUBW                              _gxd
                                  STW                               _di                         ; Main: di = ci - gxd - gxd

                                  LDW                               _cj
                                  SUBW                              _gyd
                                  SUBW                              _gyd
                                  STW                               _dj                         ; Main: dj = cj - gyd - gyd

                                  LDW                               _ci
                                  SUBW                              _gxd
                                  STW                               _gi                         ; Main: gi = ci - gxd

                                  LDW                               _cj
                                  SUBW                              _gyd
                                  STW                               _gj                         ; Main: gj = cj - gyd

                                  LDW                               _dj
                                  STW                               memIndex0
                                  LDW                               _di
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(dj, di)

                                  LDW                               _slowed
                                  CALLI                             _page_0x0da0
_page_0x0da0                      BNE                               _else_0x0be7
                                  CALLI                             _replaceDot                 ; Main: if slowed &&= 0 then gosub replaceDot

_else_0x0be7                      LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              192
                                  BNE                               _endif_0x0c2c               ; Main: if maze(gj, gi) &&= EXIT

                                  LD                                _flags
                                  XORI                              255
                                  ANDI                              1
                                  BEQ                               _endif_0x0c2c               ; Main: if &(flags.lo XOR 255 AND 1)

                                  LDW                               _gmode
                                  XORI                              1
                                  BEQ                               _endif_0x0c2c               ; Main: if gmode &&<> SCARED_MODE

                                  LDI                               0
                                  STW                               _gxd
                                  LDWI                              -1
                                  STW                               _gyd                        ; Main: gxd = 0 : gyd = -1

_endif_0x0c2c                     LDW                               _gidx
                                  STW                               register0
                                  ADDW                              register0
                                  STW                               register0
                                  LDWI                              _lut_onAddrs_0x64a5
                                  ADDW                              register0
                                  DEEK                              
                                  CALL                              giga_vAC                    ; Main: on gidx gosub getBlinkyTarget, getPinkyTarget, getInkyTarget, getClydeTarget

                                  LDW                               _gi
                                  XORI                              13
                                  JumpEQ                            _endif_0x0c73 73            ; Main: if gi &= 13

                                  LDW                               _gj
                                  XORI                              10
                                  JumpEQ                            _endif_0x0c73 72            ; Main: if gj &= 10

                                  LD                                _flags
                                  ANDI                              254
                                  CALLI                             _page_0x0ea0
_page_0x0ea0                      ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7ca0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: flags.lo = flags.lo AND &hFE : ghostsFlags(gidx) = flags.lo

_endif_0x0c73                     LD                                _flags
                                  ANDI                              1
                                  BEQ                               _endif_0x0c8a               ; Main: if &(flags.lo AND 1)

                                  LDI                               12
                                  STW                               _ti
                                  LDI                               11
                                  STW                               _tj                         ; Main: ti = 12 : tj = 11

_endif_0x0c8a                     LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(cj, ci)

                                  LDW                               _mz
                                  XORI                              240
                                  JumpEQ                            _elseif_0x0cb8 75           ; Main: if mz &= WALL

                                  CALLI                             _getWallDir                 ; Main: gosub getWallDir

                                  LDW                               _gdir
                                  STW                               0xd8
                                  CALLI                             _getGhostDir
                                  CALLI                             _moveNextGhost              ; Main: call getGhostDir, gdir

_elseif_0x0cb8                    LDW                               _mz
                                  XORI                              160
                                  BNE                               _elseif_0x0cce              ; Main: elseif mz &&= TUNNEL

                                  LDI                               131
                                  SUBW                              _gx
                                  STW                               _gx
                                  CALLI                             _moveNextGhost              ; Main: gx = (129+ORIGIN_X) - gx

_elseif_0x0cce                    LDW                               _mz
                                  XORI                              144
                                  CALLI                             _page_0x0fa0
_page_0x0fa0                      BNE                               _else_0x0cf7                ; Main: elseif mz &&= SLOW

                                  LD                                _flags
                                  ORI                               2
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7ca0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr
                                  CALLI                             _moveNextGhost              ; Main: flags.lo = flags.lo OR 2 : ghostsFlags(gidx) = flags.lo

_else_0x0cf7                      LD                                _flags
                                  ANDI                              2
                                  BEQ                               _endif_0x0d21               ; Main: if &(flags.lo AND 2)

                                  LD                                _flags
                                  ANDI                              253
                                  ST                                _flags
                                  STW                               memValue
                                  LDWI                              0x7ca0
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: flags.lo = flags.lo AND &hFD : ghostsFlags(gidx) = flags.lo

_endif_0x0d21                     LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  ANDI                              240
                                  STW                               _mz                         ; Main: mz = maze(gj, gi) AND &hF0

                                  LDW                               _mz
                                  XORI                              208
                                  CALLI                             convertEqOp
                                  STW                               0xe8
                                  LDW                               _mz
                                  XORI                              224
                                  CALLI                             convertEqOp
                                  STW                               0xea
                                  LDW                               _mz
                                  XORI                              176
                                  CALLI                             _page_0x10a0
_page_0x10a0                      CALLI                             convertEqOp
                                  ORW                               0xea
                                  STW                               0xec
                                  LD                                _flags
                                  ANDI                              1
                                  ANDW                              0xec
                                  ORW                               0xe8
                                  BEQ                               _moveNextGhost              ; Main: if &((mz = JUNC) OR (((mz = DOOR) OR (mz = ENTER)) AND (flags.lo AND 1)))

                                  CALLI                             _getJuncDir                 ; Main: gosub getJuncDir

                                  LDW                               _gdir
                                  STW                               0xd8
                                  CALLI                             _getGhostDir                ; Main: call getGhostDir, gdir

_moveNextGhost                    LDW                               _slowed
                                  BNE                               _endif_0x0d8c               ; Main: if slowed &&= 0

                                  CALLI                             _setGhostVars               ; Main: gosub setGhostVars

_endif_0x0d8c                     ForNextFarInc                     _gidx _next_0x09f1 3        ; Main: next gidx

                                  LDW                               _gmode
                                  XORI                              1
                                  BNE                               _else_0x0da9                ; Main: if gmode &&= SCARED_MODE

                                  CALLI                             _scaredSound
                                  CALLI                             _endif_0x0dac               ; Main: call scaredSound

_else_0x0da9                      CALLI                             _chaseSound                 ; Main: call chaseSound

_endif_0x0dac                     Return                                                        ; Main: endproc

_getGhostVars                     PUSH                              
                                  LDWI                              0x6ba5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  PEEK                              
                                  STW                               _gx
                                  LDWI                              0x6aa5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  PEEK                              
                                  STW                               _gy                         ; Main: gx = ghostsX(gidx).lo : gy = ghostsY(gidx).lo

                                  LDWI                              0x69a5
                                  ADDW                              _gidx
                                  CALLI                             _page_0x11a0
_page_0x11a0                      ADDW                              _gidx
                                  DEEK                              
                                  STW                               _gxd
                                  LDWI                              0x68a5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  DEEK                              
                                  STW                               _gyd                        ; Main: gxd = ghostsXd(gidx)  : gyd = ghostsYd(gidx)

                                  LDWI                              0x7ca0
                                  ADDW                              _gidx
                                  PEEK                              
                                  ST                                _flags                      ; Main: flags.lo = ghostsFlags(gidx)

                                  Return                                                        ; Main: return

_setGhostVars                     PUSH                              
                                  LDWI                              0x6ba5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gx
                                  DOKE                              memAddr
                                  LDWI                              0x6aa5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gy
                                  DOKE                              memAddr                     ; Main: ghostsX(gidx) = gx : ghostsY(gidx) = gy

                                  LDWI                              0x69a5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gxd
                                  DOKE                              memAddr
                                  LDWI                              0x68a5
                                  ADDW                              _gidx
                                  ADDW                              _gidx
                                  STW                               memAddr
                                  LDW                               _gyd
                                  DOKE                              memAddr                     ; Main: ghostsXd(gidx) = gxd : ghostsYd(gidx) = gyd

                                  Return                                                        ; Main: return

_getGhostDir                      PUSH                                                          ; Main: proc getGhostDir, dir

                                  LDW                               _getGhostDir_dir
                                  LSLW                              
                                  LSLW                              
                                  STW                               _getGhostDir_dir            ; Main: dir = dir LSL 2

                                  LDWI                              21708
                                  ADDW                              _getGhostDir_dir
                                  CALLI                             _page_0x12a0
_page_0x12a0                      DEEK                              
                                  STW                               _gxd                        ; Main: gxd = deek(@GHOST_DIRS + dir + 0)

                                  LDWI                              21708
                                  ADDW                              _getGhostDir_dir
                                  ADDI                              2
                                  DEEK                              
                                  STW                               _gyd                        ; Main: gyd = deek(@GHOST_DIRS + dir + 2)

                                  Return                                                        ; Main: endproc

_setGhostsMode                    PUSH                              
                                  LD                                _timeTicks
                                  ANDI                              31
                                  BEQ                               _else_0x0e9b
                                  Return                                                        ; Main: if &(timeTicks.lo AND &h1F) then return

_else_0x0e9b                      INC                               _timeTicks + 1              ; Main: inc timeTicks.hi

                                  LDW                               _gmode
                                  XORI                              1
                                  BNE                               _endif_0x0ecf               ; Main: if gmode &&= SCARED_MODE

                                  LD                                _levelPain + 1
                                  STW                               register15
                                  LDI                               10
                                  SUBW                              register15
                                  STW                               0xe8
                                  LD                                _timeTicks + 1
                                  SUBW                              0xe8
                                  BLE                               _endif_0x0ecd               ; Main: if timeTicks.hi &&> (10 - levelPain.hi)

                                  LDI                               0
                                  ST                                _timeTicks + 1              ; Main: timeTicks.hi = 0

                                  LDI                               200
                                  STW                               _bonus                      ; Main: bonus = 200

                                  LDI                               0
                                  STW                               _gmode                      ; Main: gmode = CHASE_MODE

_endif_0x0ecd                     Return                                                        ; Main: return

_endif_0x0ecf                     LD                                _timeTicks + 1
                                  SUBI                              30
                                  BLE                               _endif_0x0ee4               ; Main: if timeTicks.hi &&> 30

                                  LDI                               0
                                  ST                                _timeTicks + 1              ; Main: timeTicks.hi = 0

                                  LDI                               0
                                  STW                               _gmode                      ; Main: gmode = CHASE_MODE

                                  Return                                                        ; Main: return

_endif_0x0ee4                     LDI                               20
                                  STW                               0xe8
                                  LD                                _levelPain + 1
                                  ADDW                              0xe8
                                  STW                               0xe8
                                  CALLI                             _page_0x13a0
_page_0x13a0                      LD                                _timeTicks + 1
                                  SUBW                              0xe8
                                  BLE                               _endif_0x0efd               ; Main: if timeTicks.hi &&> (20 + levelPain.hi)

                                  LDI                               2
                                  STW                               _gmode                      ; Main: gmode = SCATTER_MODE

_endif_0x0efd                     Return                                                        ; Main: return

_getBlinkyTarget                  PUSH                              
                                  LDW                               _gi
                                  STW                               _bi
                                  LDW                               _gj
                                  STW                               _bj                         ; Main: bi = gi : bj = gj

                                  LDW                               _gmode
                                  BNE                               _endif_0x0f1b               ; Main: if gmode &&= CHASE_MODE

                                  LDW                               _puci
                                  STW                               _ti
                                  LDW                               _pucj
                                  STW                               _tj                         ; Main: ti = puci : tj = pucj

                                  Return                                                        ; Main: return

_endif_0x0f1b                     LDI                               27
                                  STW                               _ti
                                  LDI                               0
                                  STW                               _tj                         ; Main: ti = 27 : tj = 0

                                  Return                                                        ; Main: return

_getPinkyTarget                   PUSH                              
                                  LDW                               _gmode
                                  BNE                               _endif_0x0f65               ; Main: if gmode &&= CHASE_MODE

                                  LDW                               _puci
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  STW                               _ti                         ; Main: ti = puci + pxd + pxd + pxd + pxd

                                  LDW                               _pucj
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  STW                               _tj                         ; Main: tj = pucj + pyd + pyd + pyd + pyd

                                  Return                                                        ; Main: return

_endif_0x0f65                     LDI                               0
                                  STW                               _ti
                                  LDI                               0
                                  STW                               _tj                         ; Main: ti = 0 : tj = 0

                                  Return                                                        ; Main: return

_getInkyTarget                    PUSH                              
                                  LDW                               _gmode
                                  CALLI                             _page_0x14a0
_page_0x14a0                      BNE                               _endif_0x0fb7               ; Main: if gmode &&= CHASE_MODE

                                  LDW                               _puci
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  STW                               _ti                         ; Main: ti = puci + pxd + pxd

                                  LDW                               _pucj
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  STW                               _tj                         ; Main: tj = pucj + pyd + pyd

                                  LDW                               _ti
                                  SUBW                              _bi
                                  STW                               _zi
                                  LDW                               _tj
                                  SUBW                              _bj
                                  STW                               _zj                         ; Main: zi = ti - bi : zj = tj - bj 'vector from Blinky to (Puc + 2)

                                  LDW                               _ti
                                  ADDW                              _zi
                                  STW                               _ti                         ; Main: ti = ti + zi

                                  LDW                               _tj
                                  ADDW                              _zj
                                  STW                               _tj                         ; Main: tj = tj + zj

                                  Return                                                        ; Main: return

_endif_0x0fb7                     LDI                               27
                                  STW                               _ti
                                  LDI                               23
                                  STW                               _tj                         ; Main: ti = 27 : tj = 23

                                  Return                                                        ; Main: return

_getClydeTarget                   PUSH                              
                                  LDW                               _gmode
                                  JumpEQ                            _endif_0x1006 93            ; Main: if gmode &= CHASE_MODE

                                  LDW                               _puci
                                  SUBW                              _gi
                                  Absolute                          
                                  STW                               0xea
                                  LDW                               _pucj
                                  SUBW                              _gj
                                  Absolute                          
                                  ADDW                              0xea
                                  SUBI                              8
                                  JumpGT                            _endif_0x1006 92            ; Main: if abs(puci - gi) + abs(pucj - gj) &> 8 'taxi-cab distance

                                  LDW                               _puci
                                  CALLI                             _page_0x15a0
_page_0x15a0                      STW                               _ti
                                  LDW                               _pucj
                                  STW                               _tj                         ; Main: ti = puci : tj = pucj

                                  Return                                                        ; Main: return

_endif_0x1006                     LDI                               0
                                  STW                               _ti
                                  LDI                               23
                                  STW                               _tj                         ; Main: ti = 0 : tj = 23

                                  Return                                                        ; Main: return

_getJuncDir                       PUSH                              
                                  LDW                               _gxd
                                  JumpFalse                         _else_0x1097 99             ; Main: if (gxd)

                                  LDW                               _tj
                                  SUBW                              _gj
                                  Absolute                          
                                  JumpFalse                         _endif_0x1094 98            ; Main: if (abs(tj - gj))

                                  LDW                               _gj
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  BEQ                               _endif_0x1061               ; Main: if maze(gj - 1, gi) &&<> WALL

                                  LDI                               3
                                  STW                               _gdir
                                  LDW                               _tj
                                  SUBW                              _gj
                                  BGE                               _endif_0x1061
                                  Return                                                        ; Main: gdir = 3 : if tj &&< gj then return

_endif_0x1061                     LDW                               _gj
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  CALLI                             _page_0x16a0
_page_0x16a0                      XORI                              240
                                  BEQ                               _endif_0x1094               ; Main: if maze(gj + 1, gi) &&<> WALL

                                  LDI                               1
                                  STW                               _gdir
                                  LDW                               _tj
                                  SUBW                              _gj
                                  BLE                               _endif_0x1094
                                  Return                                                        ; Main: gdir = 1 : if tj &&> gj then return

_endif_0x1094                     CALLI                             _endif_0x1112               ; Main: endif

_else_0x1097                      LDW                               _ti
                                  SUBW                              _gi
                                  Absolute                          
                                  JumpFalse                         _endif_0x1112 104           ; Main: if (abs(ti - gi))

                                  LDW                               _gi
                                  SUBI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  BEQ                               _endif_0x10df               ; Main: if maze(gj, gi - 1) &&<> WALL

                                  LDI                               2
                                  STW                               _gdir
                                  LDW                               _ti
                                  SUBW                              _gi
                                  BGE                               _endif_0x10df
                                  Return                                                        ; Main: gdir = 2 : if ti &&< gi then return

_endif_0x10df                     LDW                               _gi
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             _page_0x17a0
_page_0x17a0                      CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  BEQ                               _endif_0x1112               ; Main: if maze(gj, gi + 1) &&<> WALL

                                  LDI                               0
                                  STW                               _gdir
                                  LDW                               _ti
                                  SUBW                              _gi
                                  BLE                               _endif_0x1112
                                  Return                                                        ; Main: gdir = 0 : if ti &&> gi then return

_endif_0x1112                     LDW                               _gxd
                                  XORI                              1
                                  BNE                               _elseif_0x1124              ; Main: if gxd &&= 1

                                  LDI                               0
                                  STW                               _gdir
                                  CALLI                             _endif_0x114d               ; Main: gdir = 0

_elseif_0x1124                    LDWI                              -1
                                  XORW                              _gxd
                                  BNE                               _elseif_0x1137              ; Main: elseif gxd &&= -1

                                  LDI                               2
                                  STW                               _gdir
                                  CALLI                             _endif_0x114d               ; Main: gdir = 2

_elseif_0x1137                    LDW                               _gyd
                                  XORI                              1
                                  BNE                               _else_0x1149                ; Main: elseif gyd &&= 1

                                  LDI                               1
                                  STW                               _gdir
                                  CALLI                             _endif_0x114d               ; Main: gdir = 1

_else_0x1149                      LDI                               3
                                  STW                               _gdir                       ; Main: gdir = 3

_endif_0x114d                     Return                                                        ; Main: return

_getWallDir                       PUSH                              
                                  LDW                               _gxd
                                  JumpFalse                         _else_0x11b4 113            ; Main: if (gxd)

                                  LDW                               _gj
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  CALLI                             _page_0x18a0
_page_0x18a0                      LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  BEQ                               _endif_0x118b               ; Main: if maze(gj - 1, gi) &&<> WALL

                                  LDI                               3
                                  STW                               _gdir
                                  LDW                               _tj
                                  SUBW                              _gj
                                  BGE                               _endif_0x118b
                                  Return                                                        ; Main: gdir = 3 : if tj &&< gj then return

_endif_0x118b                     LDW                               _gj
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _gi
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  BEQ                               _else_0x11b1
                                  LDI                               1
                                  STW                               _gdir
_else_0x11b1                      CALLI                             _endif_0x1210               ; Main: if maze(gj + 1, gi) &&<> WALL then gdir = 1

_else_0x11b4                      LDW                               _gi
                                  SUBI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  JumpNE                            _endif_0x11ea 115           ; Main: if maze(gj, gi - 1) &<> WALL

                                  LDI                               2
                                  STW                               _gdir
                                  LDW                               _ti
                                  SUBW                              _gi
                                  CALLI                             _page_0x19a0
_page_0x19a0                      BGE                               _endif_0x11ea
                                  Return                                                        ; Main: gdir = 2 : if ti &&< gi then return

_endif_0x11ea                     LDW                               _gi
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _gj
                                  STW                               memIndex0
                                  LDW                               0xe8
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  XORI                              240
                                  BEQ                               _endif_0x1210
                                  LDI                               0
                                  STW                               _gdir                       ; Main: if maze(gj, gi + 1) &&<> WALL then gdir = 0

_endif_0x1210                     Return                                                        ; Main: return

_replaceDot                       PUSH                              
                                  LDW                               _mz
                                  ANDI                              15
                                  XORI                              1
                                  BNE                               _endif_0x1266               ; Main: if (mz AND &h0F) &&= DOT

                                  LDW                               _di
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _di
                                  ADDI                              2
                                  STW                               _di                         ; Main: di = (di LSL 2) + di + ORIGIN_X   'di = di*5 + 12

                                  LDW                               _dj
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _dj
                                  ADDI                              2
                                  STW                               _dj                         ; Main: dj = (dj LSL 2) + dj + ORIGIN_Y   'dj = dj*5 + 2

                                  LDW                               _dj
                                  ADDI                              8
                                  STW                               0xe8
                                  LD                                0xe8
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              _di
                                  STW                               0xea
                                  LDI                               43
                                  POKE                              0xea                        ; Main: poke ((dj + 8) LSL 8) + di, &h2B  'convert dj, di to vram address

_endif_0x1266                     Return                                                        ; Main: return

_coordsPucMon                     PUSH                              
                                  CALLI                             _page_0x1aa0
_page_0x1aa0                      LDW                               _px
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDW                              _pxd
                                  ADDI                              4
                                  STW                               _ci                         ; Main: ci = px + pxd + pxd + pxd + -(ORIGIN_X-6)

                                  LDW                               _py
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  ADDW                              _pyd
                                  ADDI                              4
                                  STW                               _cj                         ; Main: cj = py + pyd + pyd + pyd +  (ORIGIN_Y+2)

                                  CALLI                             _div5                       ; Main: call div5

                                  Return                                                        ; Main: return

_handleInput                      PUSH                              
                                  LDW                               _pxd
                                  STW                               _oxd
                                  LDW                               _pyd
                                  STW                               _oyd                        ; Main: oxd = pxd : oyd = pyd

                                  LDW                               _px
                                  STW                               _mx
                                  LDW                               _py
                                  STW                               _my
                                  CALLI                             _mod5                       ; Main: mx = px : my = py : gosub mod5

                                  LD                                giga_buttonState
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: gosub get("BUTTON_STATE")

                                  Return                                                        ; Main: return

_253                              PUSH                              
                                  LDW                               _my
                                  XORI                              3
                                  BNE                               _else_0x12df
                                  LDI                               0
                                  STW                               _pyd
                                  SUBI                              1
                                  STW                               _pxd                        ; Main: if my &&= 3 then pyd = 0 : pxd = pyd-1

_else_0x12df                      Return                                                        ; Main: return

_254                              PUSH                              
                                  LDW                               _my
                                  XORI                              3
                                  JumpEQ                            _else_0x12fc 120
                                  CALLI                             _page_0x1ba0
_page_0x1ba0                      LDI                               0
                                  STW                               _pyd
                                  ADDI                              1
                                  STW                               _pxd                        ; Main: if my &= 3  then pyd = 0 : pxd = pyd+1

_else_0x12fc                      Return                                                        ; Main: return

_247                              PUSH                              
                                  LDW                               _mx
                                  XORI                              3
                                  BNE                               _else_0x1316
                                  LDI                               0
                                  STW                               _pxd
                                  SUBI                              1
                                  STW                               _pyd                        ; Main: if mx &&= 3 then pxd = 0 : pyd = pxd-1

_else_0x1316                      Return                                                        ; Main: return

_251                              PUSH                              
                                  LDW                               _mx
                                  XORI                              3
                                  BNE                               _else_0x1330
                                  LDI                               0
                                  STW                               _pxd
                                  ADDI                              1
                                  STW                               _pyd                        ; Main: if mx &&= 3 then pxd = 0 : pyd = pxd+1

_else_0x1330                      Return                                                        ; Main: return

_drawScore                        PUSH                                                          ; Main: proc drawScore

                                  LDWI                              26022
                                  STW                               bcdSrcAddr
                                  LDWI                              26278
                                  STW                               bcdDstAddr
                                  LDI                               7
                                  BcdAdd                                                        ; Main: bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                                  LDI                               114
                                  STW                               _drawScore_char             ; Main: char = SCORE_X+ORIGIN_X

                                  LDI                               0
                                  STW                               _drawScore_i                ; Main: for i=0 to SCORE_LEN-1

_next_0x134a                      LDWI                              26284
                                  SUBW                              _drawScore_i
                                  PEEK                              
                                  ADDI                              46
                                  STW                               spriteId
                                  LDW                               _drawScore_char
                                  ST                                spriteXY
                                  LDI                               67
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  CALLI                             _page_0x1ca0
_page_0x1ca0                      DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), char, SCORE_Y+ORIGIN_Y

                                  LDW                               _drawScore_char
                                  ADDI                              6
                                  STW                               _drawScore_char             ; Main: char = char + 6

                                  ForNextFarInc                     _drawScore_i _next_0x134a 6 ; Main: next i

                                  LDWI                              0x66ac
                                  STW                               bcdSrcAddr
                                  LDWI                              0x67ac
                                  STW                               bcdDstAddr
                                  LDI                               7
                                  BcdCmp                            
                                  XORI                              1
                                  BNE                               _endif_0x13af               ; Main: if bcdcmp(@scoreBCD+(SCORE_LEN-1), @highBCD+(SCORE_LEN-1), SCORE_LEN) &&= 1

                                  LDWI                              26278
                                  STW                               bcdSrcAddr
                                  LDWI                              26534
                                  STW                               bcdDstAddr
                                  LDI                               7
                                  BcdCpy                                                        ; Main: bcdcpy @scoreBCD, @highBCD, SCORE_LEN

                                  CALLI                             _drawHigh                   ; Main: call drawHigh

_endif_0x13af                     Return                                                        ; Main: endproc

_drawHigh                         PUSH                                                          ; Main: proc drawHigh

                                  LDI                               114
                                  STW                               _drawHigh_char              ; Main: char = HIGH_X+ORIGIN_X

                                  LDI                               0
                                  STW                               _drawHigh_i                 ; Main: for i=0 to SCORE_LEN-1

_next_0x13ba                      LDWI                              26540
                                  SUBW                              _drawHigh_i
                                  PEEK                              
                                  ADDI                              46
                                  STW                               spriteId
                                  LDW                               _drawHigh_char
                                  ST                                spriteXY
                                  LDI                               42
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  CALLI                             _page_0x1da0
_page_0x1da0                      DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@highBCD + SCORE_LEN-1 - i), char, HIGH_Y+ORIGIN_Y

                                  LDW                               _drawHigh_char
                                  ADDI                              6
                                  STW                               _drawHigh_char              ; Main: char = char + 6

                                  ForNextFarInc                     _drawHigh_i _next_0x13ba 6  ; Main: next i

                                  Return                                                        ; Main: endproc

_drawLevel                        PUSH                                                          ; Main: proc drawLevel

                                  LDI                               45
                                  STW                               spriteId
                                  LDI                               139
                                  ST                                spriteXY
                                  LDI                               55
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Level, LEVEL_X+ORIGIN_X, LEVEL_Y+ORIGIN_Y

                                  LDI                               145
                                  STW                               _drawLevel_char             ; Main: char = LEVEL_X+ORIGIN_X + 6

                                  LDI                               0
                                  STW                               _drawLevel_i                ; Main: for i=0 &to LEVEL_LEN-4

_next_0x140d                      LDWI                              27553
                                  SUBW                              _drawLevel_i
                                  PEEK                              
                                  ADDI                              46
                                  STW                               spriteId
                                  LDW                               _drawLevel_char
                                  ST                                spriteXY
                                  LDI                               55
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@levelBCD + LEVEL_LEN-4 - i), char, LEVEL_Y+ORIGIN_Y

                                  LDW                               _drawLevel_char
                                  ADDI                              6
                                  STW                               _drawLevel_char             ; Main: char = char + 6

                                  ForNextInc                        _drawLevel_i _next_0x140d 1 ; Main: next i

                                  Return                                                        ; Main: endproc

_drawLives                        PUSH                                                          ; Main: proc drawLives

                                  LDI                               1
                                  CALLI                             _page_0x1ea0
_page_0x1ea0                      STW                               _drawLives_i                ; Main: i = 1

                                  LDI                               139
                                  STW                               _drawLives_puc              ; Main: puc = LIFE_X+ORIGIN_X

_while_0x144c                     LD                                _livesDots + 1
                                  STW                               register15
                                  LDW                               _drawLives_i
                                  SUBW                              register15
                                  BGT                               _while_0x147d               ; Main: while i &&<= livesDots.hi

                                  LDI                               44
                                  STW                               spriteId
                                  LDW                               _drawLives_puc
                                  ST                                spriteXY
                                  LDI                               111
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Life, puc, LIFE_Y+ORIGIN_Y

                                  LDW                               _drawLives_puc
                                  ADDI                              6
                                  STW                               _drawLives_puc              ; Main: puc = puc + 6

                                  INC                               _drawLives_i                ; Main: inc i

                                  CALLI                             _while_0x144c               ; Main: wend

_while_0x147d                     LDW                               _drawLives_i
                                  SUBI                              3
                                  BGT                               _wend_0x14a6                ; Main: while i &&<= MAX_LIVES

                                  LDI                               42
                                  STW                               spriteId
                                  LDW                               _drawLives_puc
                                  ST                                spriteXY
                                  LDI                               111
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase6x6, puc, LIFE_Y+ORIGIN_Y

                                  LDW                               _drawLives_puc
                                  ADDI                              6
                                  STW                               _drawLives_puc              ; Main: puc = puc + 6

                                  INC                               _drawLives_i                ; Main: inc i

                                  CALLI                             _while_0x147d               ; Main: wend

_wend_0x14a6                      Return                                                        ; Main: endproc

_eatSound                         PUSH                                                          ; Main: proc eatSound

                                  LDWI                              27296
                                  STW                               0xe8
                                  LD                                _eatTicks
                                  ADDW                              0xe8
                                  CALLI                             _page_0x1fa0
_page_0x1fa0                      PEEK                              
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _eatSound_n                 ; Main: n = get("MIDI_NOTE", peek(@enotes + eatTicks.lo))

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _eatSound_n
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               1
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, n, 63, 1

                                  INC                               _eatTicks                   ; Main: inc eatTicks.lo

                                  LD                                _eatTicks
                                  SUBI                              4
                                  BLT                               _endif_0x14ef               ; Main: if eatTicks.lo &&>= 4

                                  LDI                               0
                                  ST                                _eatTicks                   ; Main: eatTicks.lo = 0

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 2

_endif_0x14ef                     Return                                                        ; Main: endproc

_scaredSound                      PUSH                                                          ; Main: proc scaredSound

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _scaredTicks
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, scaredTicks, 63, 0

                                  LDWI                              -650
                                  ADDW                              _scaredTicks
                                  STW                               _scaredTicks                ; Main: scaredTicks = scaredTicks - 650

                                  LDWI                              5000
                                  SUBW                              _scaredTicks
                                  BLE                               _else_0x151f
                                  LDWI                              10000
                                  STW                               _scaredTicks                ; Main: if scaredTicks &&<= 5000 then scaredTicks = 10000

_else_0x151f                      LDI                               3
                                  CALLI                             _page_0x20a0
_page_0x20a0                      ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 3

                                  Return                                                        ; Main: endproc

_chaseSound                       PUSH                                                          ; Main: proc chaseSound

                                  LD                                _livesDots
                                  STW                               register15
                                  LDI                               212
                                  SUBW                              register15
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  STW                               _chaseSound_f               ; Main: f = ((212 - livesDots.lo) LSR 4) LSL 8

                                  LD                                _timeTicks
                                  ANDI                              15
                                  STW                               0xe8
                                  LDWI                              21676
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _chaseSound_n               ; Main: n = get("MIDI_NOTE", peek(@gnotes + (timeTicks.lo AND 15)))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _chaseSound_n
                                  ADDW                              _chaseSound_f
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, n + f, 63, 0 '48-v, 0

                                  LDI                               3
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 3

                                  Return                                                        ; Main: endproc

_deadSound                        PUSH                                                          ; Main: proc deadSound

                                  LDWI                              1000
                                  STW                               _deadSound_f                ; Main: f = 1000

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 1

_repeat_0x1592                    LDI                               1
                                  CALLI                             _page_0x21a0
_page_0x21a0                      STW                               _deadSound_v                ; Main: for v=1 &to 62 step 2

_next_0x1596                      LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _deadSound_f
                                  STW                               sndFrequency
                                  LDW                               _deadSound_v
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, f, v, 2

                                  LDI                               1
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 1

                                  ForNextAdd                        _deadSound_v _next_0x1596 62 2                                                                                              ; Main: next v

                                  LDI                               63
                                  STW                               _deadSound_v                ; Main: for v=63 &downto 1 step 2

_next_0x15bc                      LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _deadSound_f
                                  STW                               sndFrequency
                                  LDW                               _deadSound_v
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, f, v, 2

                                  LDI                               1
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 1

                                  ForNextSub                        _deadSound_v _next_0x15bc 1 2                                                                                               ; Main: next v

                                  LDWI                              400
                                  ADDW                              _deadSound_f
                                  STW                               _deadSound_f                ; Main: f = f + 400

                                  LDWI                              10000
                                  SUBW                              _deadSound_f
                                  JumpLT                            _repeat_0x1592 126          ; Main: until f &>= 10000

                                  CALLI                             _page_0x22a0
_page_0x22a0                      LDI                               2
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 2

                                  Return                                                        ; Main: endproc

_drawDeath                        PUSH                                                          ; Main: proc drawDeath

                                  CALLI                             _drawLives                  ; Main: call drawLives

                                  LDI                               0
                                  STW                               _drawDeath_f                ; Main: f = 0

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 1

                                  LDI                               0
                                  STW                               _drawDeath_i                ; Main: for i=0 to 128

_next_0x1612                      LDW                               _drawDeath_i
                                  ANDI                              15
                                  STW                               0xe8
                                  LDWI                              21416
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _drawDeath_n                ; Main: n = get("MIDI_NOTE", peek(@dnotes + (i AND 15)))

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _drawDeath_n
                                  SUBW                              _drawDeath_f
                                  STW                               sndFrequency
                                  LDW                               _drawDeath_i
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  STW                               0xec
                                  LDI                               63
                                  SUBW                              0xec
                                  STW                               sndVolume
                                  LDI                               3
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, n - f, 63 - (i LSR 2), 3

                                  LDI                               1
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 1

                                  LDI                               1
                                  STW                               _drawDeath_j
                                  CALLI                             _page_0x23a0
_page_0x23a0                      ForNextInc                        _drawDeath_j _page_0x23a0 250                                                                                               ; Main: for j=1 &to 250 : next j

                                  LDW                               _drawDeath_i
                                  STW                               mathShift
                                  ShiftRight3bit                    
                                  ANDI                              1
                                  BNE                               _else_0x1694                ; Main: if ((i LSR 3) AND 1) &&= 0

                                  LDI                               43
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  CALLI                             _endif_0x16a5               ; Main: sprite NoFlip, Erase12x9, px, py

_else_0x1694                      LDI                               26
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PucLt + 2, px, py

_endif_0x16a5                     LDW                               _drawDeath_i
                                  ANDI                              7
                                  BNE                               _endif_0x16bc               ; Main: if (i AND 7) &&= 0

                                  LDW                               _drawDeath_f
                                  ADDI                              200
                                  STW                               _drawDeath_f                ; Main: f = f + 200

_endif_0x16bc                     ForNextFarInc                     _drawDeath_i _next_0x1612 128                                                                                               ; Main: next i

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 2

                                  Return                                                        ; Main: endproc

                                  CALLI                             _page_0x24a0
_page_0x24a0                      PUSH                                                          ; Main: proc drawMaze

                                  LDI                               48
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h30

                                  LDI                               0
                                  STW                               _page_0x24a0_i              ; Main: for i=0 &to (NUM_MAZE_PIECES*2 - 2) step 4

_next_0x16da                      LDWI                              21432
                                  ADDW                              _page_0x24a0_i
                                  DEEK                              
                                  STW                               cursorXY
                                  LDWI                              21176
                                  ADDW                              _page_0x24a0_i
                                  DEEK                              
                                  STW                               drawPoly_addr
                                  DrawPolyRel                                                   ; Main: set CURSOR_XY, deek(@MAZE_PIECES + i)     : polyR deek(@MAZE_ADDRS + i)

                                  LDWI                              21432
                                  ADDW                              _page_0x24a0_i
                                  ADDI                              2
                                  DEEK                              
                                  STW                               cursorXY
                                  LDI                               0xB8
                                  ST                                drawPoly_mode
                                  SetPolyRelFlipX                   
                                  LDWI                              21176
                                  ADDW                              _page_0x24a0_i
                                  ADDI                              2
                                  DEEK                              
                                  STW                               drawPoly_addr
                                  DrawPolyRel                                                   ; Main: set CURSOR_XY, deek(@MAZE_PIECES + i + 2) : polyR deek(@MAZE_ADDRS + i + 2), FLIPX

                                  ForNextAdd                        _page_0x24a0_i _next_0x16da 70 4                                                                                            ; Main: next i

                                  LDI                               0
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, 0 '&h2B

                                  Return                                                        ; Main: endproc

_drawDots                         PUSH                                                          ; Main: proc drawDots, redraw

                                  LDI                               43
                                  ST                                fgbgColour + 1              ; Main: set FG_COLOUR, &h2B

                                  LDI                               0
                                  STW                               _cj                         ; Main: for cj=0 to 23

_next_0x174d                      LDI                               0
                                  STW                               _ci                         ; Main: for ci=0 to 27

_next_0x1751                      LDW                               _cj
                                  STW                               memIndex0
                                  CALLI                             _page_0x25a0
_page_0x25a0                      LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  PEEK                              
                                  STW                               _mz                         ; Main: mz = maze(cj, ci)

                                  LDW                               _drawDots_redraw
                                  XORI                              1
                                  BNE                               _endif_0x17c6               ; Main: if redraw &&= 1

                                  LDW                               _mz
                                  ANDI                              15
                                  XORI                              3
                                  BNE                               _elseif_0x1791              ; Main: if (mz AND &h0F) &&= RDOT         'reset dots

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               1
                                  STW                               _mz
                                  CALLI                             _endif_0x17b0               ; Main: mz = (mz AND &hF0) OR DOT

_elseif_0x1791                    LDW                               _mz
                                  ANDI                              15
                                  XORI                              4
                                  BNE                               _endif_0x17b0               ; Main: elseif (mz AND &h0F) &&= RPILL   'reset pills

                                  LDW                               _mz
                                  ANDI                              240
                                  ORI                               2
                                  STW                               _mz                         ; Main: mz = (mz AND &hF0) OR PILL

_endif_0x17b0                     LDW                               _mz
                                  STW                               memValue
                                  LDW                               _cj
                                  STW                               memIndex0
                                  LDW                               _ci
                                  STW                               memIndex1
                                  LDWI                              0x57b4
                                  CALLI                             convert8Arr2d
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: maze(cj, ci) = mz

_endif_0x17c6                     LDW                               _mz
                                  ANDI                              15
                                  XORI                              1
                                  JumpEQ                            _endif_0x180b 133           ; Main: if (mz AND &h0F) &= DOT

                                  CALLI                             _page_0x26a0
_page_0x26a0                      LDW                               _ci
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _ci
                                  ADDI                              2
                                  ST                                drawPixel_xy
                                  LDW                               _cj
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _cj
                                  ADDI                              2
                                  ST                                drawPixel_xy + 1
                                  DrawPixel                                                     ; Main: pset (ci LSL 2) + ci + ORIGIN_X, (cj LSL 2) + cj + ORIGIN_Y

_endif_0x180b                     ForNextFarInc                     _ci _next_0x1751 27         ; Main: next ci

                                  ForNextFarInc                     _cj _next_0x174d 23         ; Main: next cj

                                  Return                                                        ; Main: endproc

_nextLevel                        LD                                _levelPain
                                  XORI                              99
                                  BNE                               _else_0x1839
                                  LDWI                              257
                                  STW                               register0
                                  LDI                               64
                                  POKE                              register0                   ; Main: if levelPain.lo &&= 99 then poke &h0101, &h40  'level100 easter egg, good luck once you get to level 100!

_else_0x1839                      INC                               _levelPain                  ; Main: inc levelPain.lo

                                  INC                               _levelPain + 1              ; Main: inc levelPain.hi

                                  CALLI                             _start                      ; Main: goto start

_initVars                         PUSH                                                          ; Main: proc initVars

                                  LDI                               0x34
                                  STW                               varAddress
                                  ResetVars                                                     ; Main: init vars @timeTicks

                                  LDI                               65
                                  STW                               _px                         ; Main: px = (63+ORIGIN_X)

                                  LDI                               88
                                  STW                               _py                         ; Main: py = (86+ORIGIN_Y)

                                  CALLI                             _page_0x27a0
_page_0x27a0                      LDWI                              -1
                                  STW                               _pxd                        ; Main: pxd = -1

                                  LDI                               200
                                  STW                               _bonus                      ; Main: bonus = 200

                                  LDWI                              10000
                                  STW                               _scaredTicks                ; Main: scaredTicks = 10000

                                  Rand                              
                                  ANDI                              3
                                  STW                               _initVars_corner            ; Main: corner = (rnd(0) AND 3)

                                  LDI                               0
                                  STW                               _gidx                       ; Main: for gidx=0 &to (NUM_GHOSTS - 1)

_next_0x186f                      LDW                               _gidx
                                  BNE                               _else_0x1882                ; Main: if gidx &&= 0

                                  LDW                               _gidx
                                  LSLW                              
                                  STW                               _initVars_i
                                  CALLI                             _endif_0x189b               ; Main: i = gidx LSL 1                          'blinky is always reset to the same position

_else_0x1882                      LDW                               _initVars_corner
                                  ADDW                              _gidx
                                  ANDI                              3
                                  ADDI                              1
                                  LSLW                              
                                  STW                               _initVars_i                 ; Main: i = (((corner + gidx) AND 3) + 1) LSL 1 'pinky, inky and clyde are reset to 1 of 4 random cage corners

_endif_0x189b                     LDWI                              28067
                                  ADDW                              _initVars_i
                                  DEEK                              
                                  STW                               _gx                         ; Main: gx = deek(@ghostsXr + i)

                                  LDWI                              27811
                                  ADDW                              _initVars_i
                                  DEEK                              
                                  STW                               _gy                         ; Main: gy = deek(@ghostsYr + i)

                                  LDWI                              -1
                                  STW                               _gxd                        ; Main: gxd = -1                                    'ghosts initially move left

                                  CALLI                             _setGhostVars               ; Main: gosub setGhostVars

                                  ForNextInc                        _gidx _next_0x186f 3        ; Main: next gidx

                                  Return                                                        ; Main: endproc

_startLevel                       PUSH                              
                                  LDI                               43
                                  STW                               spriteId
                                  LDW                               _px
                                  CALLI                             _page_0x28a0
_page_0x28a0                      ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Erase12x9, px, py

                                  LDI                               212
                                  ST                                _livesDots                  ; Main: livesDots.lo = 212

                                  LDWI                              26022
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 0

                                  LDWI                              27552
                                  STW                               bcdDstAddr
                                  LD                                _levelPain
                                  BcdInt                                                        ; Main: bcdint @levelBCD, levelPain.lo

                                  LD                                _levelPain + 1
                                  SUBI                              7
                                  BLE                               _else_0x1903
                                  LDI                               7
                                  ST                                _levelPain + 1              ; Main: if levelPain.hi &&> 7 then levelPain.hi = 7

_else_0x1903                      LDI                               0x01
                                  STW                               0xd8
                                  CALLI                             _drawDots                   ; Main: call drawDots, 1 'redraw

                                  CALLI                             _drawScore                  ; Main: call drawScore

                                  CALLI                             _drawHigh                   ; Main: call drawHigh

                                  CALLI                             _drawLives                  ; Main: call drawLives

                                  CALLI                             _drawLevel                  ; Main: call drawLevel

                                  LD                                _levelPain
                                  BNE                               _else_0x1931                ; Main: if levelPain.lo &&= 0

                                  LDI                               2
                                  ST                                waveType + 1
                                  LDWI                              12704
                                  PlayMusic                         
                                  CALLI                             _endif_0x1938               ; Main: play music, MUSIC_INTRO, 2

_else_0x1931                      LDI                               120
                                  STW                               waitVBlankNum
                                  CALLI                             _page_0x29a0
_page_0x29a0                      WaitVBlanks                                                   ; Main: wait 120

_endif_0x1938                     Return                                                        ; Main: return

_resetLevel                       PUSH                              
                                  LDI                               0
                                  STW                               _levelPain                  ; Main: levelPain = 0+0*256

                                  LDWI                              768
                                  STW                               _livesDots                  ; Main: livesDots = 3*256

                                  LDWI                              26278
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @scoreBCD, 0

                                  LDWI                              257
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: poke &h0101, 0

                                  Return                                                        ; Main: return

_initSystem                       PUSH                              
                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDI                               65
                                  STW                               _px
                                  LDI                               88
                                  STW                               _py                         ; Main: px = (63+ORIGIN_X) : py = (86+ORIGIN_Y)

                                  LDWI                              256
                                  STW                               register0
                                  LDI                               10
                                  POKE                              register0                   ; Main: poke &h0100, &h0A

                                  LDWI                              258
                                  STW                               register0
                                  LDI                               10
                                  POKE                              register0                   ; Main: poke &h0102, &h0A

                                  LDWI                              492
                                  STW                               register0
                                  LDI                               125
                                  POKE                              register0                   ; Main: poke &h01EC, &h7D

                                  LDWI                              494
                                  STW                               register0
                                  LDI                               125
                                  POKE                              register0                   ; Main: poke &h01EE, &h7D

                                  LDI                               2
                                  STW                               graphicsMode
                                  CALLI                             _page_0x2aa0
_page_0x2aa0                      ScanlineMode                                                  ; Main: mode 2

                                  LDI                               0
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, 0

                                  LDWI                              2560
                                  STW                               clrAddress
                                  LDI                               160
                                  STW                               clrWidth
                                  LDI                               116
                                  STW                               clrLines
                                  ClearRect                                                     ; Main: cls &h0A00, 160, 116

                                  Return                                                        ; Main: return

_waitArbitrary                    PUSH                                                          ; Main: proc waitArbitrary

                                  LDI                               0
                                  STW                               _waitArbitrary_i            ; Main: for i=0 &to 60

_next_0x19b6                      ForNextInc                        _waitArbitrary_i _next_0x19b6 60                                                                                            ; Main: next i

                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x46af
convertEqOp                       EQU     0x43ec
convert8Arr2d                     EQU     0x44f5
resetVars                         EQU     0x45de
absolute                          EQU     0x44eb
rand16bit                         EQU     0x43db
shiftRight1bit                    EQU     0x44e1
shiftRight2bit                    EQU     0x44d7
shiftRight3bit                    EQU     0x44cd
shiftRight4bit                    EQU     0x44c3
shiftRight6bit                    EQU     0x44b9
gosubNumericLabel                 EQU     0x4acd
scanlineMode                      EQU     0x44af
waitVBlank                        EQU     0x43d3
waitVBlanks                       EQU     0x46c6
resetVideoFlags                   EQU     0x45c3
initClearFuncs                    EQU     0x46a0
clearRect                         EQU     0x46de
drawPixel                         EQU     0x45cf
drawLineSlow                      EQU     0x49ce
drawLineSlowExt                   EQU     0x4aa2
drawLineSlowLoop                  EQU     0x49a6
drawLineSlowSwap                  EQU     0x4da0
drawPolyRel                       EQU     0x4cbe
setPolyRelFlipX                   EQU     0x44a5
setPolyRelFlipY                   EQU     0x43f5
drawSprite_                       EQU     0x48b3
drawSprite                        EQU     0x45b8
drawSpriteX                       EQU     0x45ad
drawSpriteY                       EQU     0x45a2
midiGetNote                       EQU     0x47a0
resetMusic                        EQU     0x47b9
playMusic                         EQU     0x4db9
musicPlayNote                     EQU     0x45ee
soundOff                          EQU     0x43e3
soundOnV                          EQU     0x48d7
bcdAdd                            EQU     0x4bca
bcdInt                            EQU     0x4ba1
bcdDigits                         EQU     0x4ca0
bcdCmp                            EQU     0x47db
bcdCmpExt                         EQU     0x48a0
bcdCpy                            EQU     0x4ea1


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram + giga_yres/2*256 + giga_xres/2
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash center pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert8Arr2d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15


resetVars           LDI     0
                    DOKE    varAddress
                    INC     varAddress
                    INC     varAddress
                    LD      varAddress
                    XORI    giga_One                        ; end of user vars
                    BNE     resetVars
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            BGE     abs_exit
                    STW     mathX
                    LDI     0
                    SUBW    mathX
abs_exit            RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight3bit      LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


shiftRight6bit      LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_tmp        EQU     register15
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



                    ; 179 is normally the start of vBlank, but if a vBlank routine is executing there
                    ; is a very good chance by the time the vBlank routine is over giga_videoY will
                    ; have progressed past 179, (by how much is nondeterministic). So instead we wait
                    ; for the scanline before vBlank, i.e. when videoY = 0xEE, (videoTablePtr = 0x01EE)
waitVBlank          LD      giga_videoY
                    XORI    &HEE
                    BNE     waitVBlank
                    RET


waitVBlanks         PUSH

waitVB_loop0        LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       CALLI   waitVBlank

waitVB_loop1        LD      giga_videoY         ; wait until bottom scanline, (0x01EE), is done
                    XORI    &HEE
                    BEQ     waitVB_loop1
                    BRA     waitVB_loop0


resetVideoFlags     LDI     giga_CursorX                    ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value                    
                    POP
                    RET


                    ; clears a rectangle on the viewable screen
clearRect           PUSH
                    CALLI   initClearFuncs
                    LD      clrAddress + 1
                    ST      giga_sysArg3
                    LD      clrLines
                    
clearR_loop         ST      clrLines
                    LD      clrWidth
                    ST      giga_sysArg0
                    LD      clrAddress
                    ST      giga_sysArg2
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clrLines
                    SUBI    1
                    BNE     clearR_loop
                    POP
                    RET


drawPixel           STW     drawPixel_xy
                    LD      drawPixel_xy + 1    ; poke peek(256 + 2*y)*256 + x, fg_colour
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      drawPixel_xy + 1
                    LD      fgbgColour + 1
                    POKE    drawPixel_xy
                    RET




drawLineSlow        PUSH
                    LDI     1
                    STW     drawLine_u
                    LDW     drawLine_x2
                    SUBW    drawLine_x1                     ; dx = x2 - x1
                    BGE     drawLS_dxp
                    LDWI    -1
                    STW     drawLine_u
                    LDW     drawLine_x1
                    SUBW    drawLine_x2                     ; dx = x1 - x2
                    
drawLS_dxp          STW     drawLine_dx
                    LDWI    256
                    STW     drawLine_v
                    LDW     drawLine_y2
                    SUBW    drawLine_y1                     ; dy = y2 - y1
                    BGE     drawLS_dyp
                    LDWI    -256
                    STW     drawLine_v
                    LDW     drawLine_y1
                    SUBW    drawLine_y2                     ; sy = y1 - y2
                    
drawLS_dyp          STW     drawLine_dy
                    CALLI   drawLineSlowExt




drawLineSlowExt     LD      drawLine_x1
                    ST      drawLine_addr
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_addr + 1
                    LDW     drawLine_dx
                    SUBW    drawLine_dy
                    BGE     drawLS_noswap
                    CALLI   drawLineSlowSwap
                    
drawLS_noswap       LDI     0
                    SUBW    drawLine_dx
                    STW     drawLine_ddx
                    STW     drawLine_cnt
                    LDW     drawLine_dx
                    ADDW    drawLine_dx
                    STW     drawLine_dx
                    LDW     drawLine_dy
                    ADDW    drawLine_dy
                    STW     drawLine_dy
                    CALLI   drawLineSlowLoop


drawLineSlowLoop    LD      fgbgColour + 1
                    POKE    drawLine_addr
                    LDW     drawLine_ddx
                    ADDW    drawLine_dy
                    STW     drawLine_ddx
                    BLE     drawLLS_xy
                    SUBW    drawLine_dx
                    STW     drawLine_ddx
                    LDW     drawLine_addr
                    ADDW    drawLine_v
                    STW     drawLine_addr

drawLLS_xy          LDW     drawLine_addr
                    ADDW    drawLine_u
                    STW     drawLine_addr
                    LDW     drawLine_cnt
                    ADDI    1
                    STW     drawLine_cnt
                    BLE     drawLineSlowLoop

                    POP
                    RET


drawLineSlowSwap    LDW     drawLine_dx
                    STW     drawLine_swp
                    LDW     drawLine_dy
                    STW     drawLine_dx
                    LDW     drawLine_swp
                    STW     drawLine_dy
                    LDW     drawLine_u
                    STW     drawLine_swp
                    LDW     drawLine_v
                    STW     drawLine_u
                    LDW     drawLine_swp
                    STW     drawLine_v
                    RET



drawPolyRel         PUSH

drawPR_loop         LD      cursorXY
                    STW     drawLine_x1
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_x2
                    SUBI    255
                    BEQ     drawPR_exit
                    LDW     drawLine_x1
drawPR_x2           ADDW    drawLine_x2                     ;relative X mode
                    STW     drawLine_x2
                    ST      cursorXY
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_y2
                    LDW     drawLine_y1
drawPR_y2           ADDW    drawLine_y2                     ;relative Y mode
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    CALLI   drawLineSlow
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    BRA     drawPR_loop
                    
drawPR_exit         LDI     0x99                            ;ADDW
                    ST      drawPoly_mode
                    CALLI   setPolyRelFlipX
                    CALLI   setPolyRelFlipY                 ;reset X and Y modes
                    POP
                    RET


setPolyRelFlipX     LDWI    drawPR_x2
                    STW     drawPoly_addr
                    LDW     drawPoly_mode
                    POKE    drawPoly_addr
                    RET


setPolyRelFlipY     LDWI    drawPR_y2
                    STW     drawPoly_addr
                    LDW     drawPoly_mode
                    POKE    drawPoly_addr
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite_         LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawS_loop          LDW     spriteAddrs
                    DEEK
                    BEQ     drawS_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
                    BRA     drawS_loop
                    
drawS_exit          RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    CALLI   drawSprite_
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    CALLI   drawSprite_
                    POP
                    RET


drawSpriteY         PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    CALLI   drawSprite_
                    POP
                    RET


midiId              EQU     register0
audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


midiGetNote         LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     musicPtr
                    LD      musicNote
                    LSLW
                    ADDW    musicPtr
                    STW     musicPtr
                    LUP     0x00                            ; get ROM note low byte
                    ;LSLW                                    ; left shift low byte as SOUND command expects
                    ST      musicNote                       ; a non system internal frequency
                    LDW     musicPtr
                    LUP     0x01                            ; get ROM note high byte
                    ST      musicNote + 1
                    LDW     musicNote                       ; this is needed for GET("MIDI_NOTE")
                    RET


resetMusic          LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMu_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMu_loop
                    RET



playMusic           PUSH
                    
playN_process       LDW     musicStream
                    INC     musicStream
                    PEEK                                    ; get music stream byte
                    STW     musicCommand
                    ANDI    0xF0
                    XORI    0x90                            ; check for start note
                    BNE     playN_endnote
                    LDW     musicStream
                    INC     musicStream
                    PEEK                                    ; get music note
                    ST      musicNote
                    CALLI   midiGetNote                     ; get midi note from ROM
                    CALLI   musicPlayNote
                    BRA     playN_process
                    
playN_endnote       XORI    0x10                            ; check for end note
                    BNE     playN_segment
                    LDI     0
                    STW     musicNote
                    CALLI   musicPlayNote         			; end note
                    BRA     playN_process

playN_segment       XORI    0x50                            ; check for new segment
                    BNE     playN_delay
                    LDW     musicStream                     ; music stream
                    DEEK
                    STW     musicStream                     ; 0xD0 new music segment address
                    BNE     playN_process                   ; 0x0000 = stop
                    POP
                    RET

playN_delay         LDW     musicCommand
                    ST      giga_soundTimer                 ; keep pumping soundTimer
                    STW     waitVBlankNum
                    CALLI   waitVBlanks
                    BRA     playN_process


musicPlayNote       LDW     musicCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      musicPtr + 1
                    LDI     0xFC
                    ST      musicPtr                        ; note address 0x01FC <-> 0x04FC
                    LDW     musicNote
                    DOKE    musicPtr                        ; set note
                    RET


soundOff            LDI     0xFC
                    ST      sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel
                    RET


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


bcdAdd              ST      bcdLength
                    LDI     0
                    STW     bcdCarry
                    
bcdA_loop           LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                  ; no handling of values > 9
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKE    bcdDstAddr          ; modifies dst bcd value
                    INC     bcdDstAddr
                    INC     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdA_loop
                    RET



                    ; create a bcd value from a +ve int, (max 42767)
bcdInt              STW     bcdValue
                    PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          ; bcdDstAddr must point to >= 5 digit bcd value
                    LDI     0
                    STW     bcdDigit
                    LDWI    10000
                    CALLI   bcdDigits
                    LDWI    1000
                    CALLI   bcdDigits
                    LDI     100
                    CALLI   bcdDigits
                    LDI     10
                    CALLI   bcdDigits
                    LD      bcdValue
                    POKE    bcdDstAddr
                    POP
                    RET


bcdDigits           STW     bcdMult
                    LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            ; calculate digit
                    BRA     bcdD_index
    
bcdD_cont           LD      bcdDigit
                    POKE    bcdDstAddr                          ; store digit
                    LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDI     0
                    ST      bcdDigit                            ; reset digit
                    
bcdD_exit           RET



bcdCmp              ST      bcdLength

bcdCmp_loop         LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    SUBW    bcdDstData
                    BGT     bcdC_gt
                    BLT     bcdC_lt
                    PUSH
                    CALLI   bcdCmpExt
                    POP
                    BGT     bcdCmp_loop
                    LDI     0
                    RET

bcdC_gt             LDI     1
                    RET
                    
bcdC_lt             LDWI    -1
                    RET                    


bcdCmpExt           LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDW     bcdSrcAddr
                    SUBI    1
                    STW     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    RET


bcdCpy              ST      bcdLength

bcdCpy_loop         LDW     bcdSrcAddr
                    PEEK
                    POKE    bcdDstAddr
                    INC     bcdSrcAddr
                    INC     bcdDstAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdCpy_loop
                    RET

