_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_reset                            EQU                               0x0225
_start                            EQU                               0x022a
_init                             EQU                               0x022f
_playerBullet                     EQU                               0x0367
_psmashBarrier                    EQU                               0x08f4
_checkPlayerBullet                EQU                               0x19e4
_ismashBarrier                    EQU                               0x1aec
_disableShootSound                EQU                               0x29d7
_repeat_0x022f                    EQU                               0x0234
_else_0x0283                      EQU                               0x0284
_else_0x0291                      EQU                               0x028e
_drawPlayerBullet                 EQU                               0x0290
_else_0x029f                      EQU                               0x0298
_else_0x02ac                      EQU                               0x02a1
_endif_0x02eb                     EQU                               0x02d6
_endif_0x02ed                     EQU                               0x02d8
_drawPlayer                       EQU                               0x02e4
_page_0x0300                      EQU                               0x0300
_else_0x0322                      EQU                               0x0318
_endif_0x0335                     EQU                               0x032b
_handleInput                      EQU                               0x032d
_else_0x0358                      EQU                               0x0340
_else_0x036c                      EQU                               0x034c
_endif_0x0391                     EQU                               0x0361
_else_0x03a3                      EQU                               0x036f
_else_0x03de                      EQU                               0x039c
_endif_0x0402                     EQU                               0x03b6
_movePlayer                       EQU                               0x03b8
_endif_0x042c                     EQU                               0x03d4
_else_0x042e                      EQU                               0x03d6
_endif_0x0443                     EQU                               0x03e7
_drawInvaders                     EQU                               0x03e9
_else_0x0451                      EQU                               0x03f1
_page_0x04a0                      EQU                               0x04a0
_else_0x0463                      EQU                               0x04ae
_endif_0x04a2                     EQU                               0x04d7
_page_0x0578                      EQU                               0x0578
_endif_0x04df                     EQU                               0x058f
_else_0x0520                      EQU                               0x05c0
_endif_0x055c                     EQU                               0x05ec
_page_0x0600                      EQU                               0x0600
_endif_0x057f                     EQU                               0x0615
_page_0x08a0                      EQU                               0x08a0
_elseif_0x0599                    EQU                               0x08a9
_endif_0x05b7                     EQU                               0x08bf
_else_0x05d7                      EQU                               0x08d1
_else_0x05f0                      EQU                               0x08e4
_endif_0x05fc                     EQU                               0x08ee
_page_0x09a0                      EQU                               0x09a0
_drawBarriers                     EQU                               0x09c7
_next_0x0638                      EQU                               0x09d4
_page_0x0aa0                      EQU                               0x0aa0
_checkInvaders                    EQU                               0x0ab2
_endif_0x069a                     EQU                               0x0adf
_endif_0x069c                     EQU                               0x0ae1
_else_0x06a9                      EQU                               0x0aea
_page_0x0ba0                      EQU                               0x0ba0
_else_0x06c4                      EQU                               0x0ba7
_else_0x06d9                      EQU                               0x0bb4
_else_0x06f4                      EQU                               0x0bc5
_else_0x0715                      EQU                               0x0bdc
_else_0x0722                      EQU                               0x0be3
_page_0x0ca0                      EQU                               0x0ca0
_else_0x0748                      EQU                               0x0ca9
_else_0x0793                      EQU                               0x0ce4
_page_0x0da0                      EQU                               0x0da0
_else_0x07ef                      EQU                               0x0dd6
_page_0x0ea0                      EQU                               0x0ea0
_else_0x0852                      EQU                               0x0ec8
_endif_0x0865                     EQU                               0x0edb
_page_0x0fa0                      EQU                               0x0fa0
_endif_0x08a3                     EQU                               0x0fbf
_playerExplode                    EQU                               0x0fc3
_next_0x08ac                      EQU                               0x0fc8
_else_0x08ce                      EQU                               0x0fde
_page_0x10a0                      EQU                               0x10a0
_next_0x08f8                      EQU                               0x10a8
_page_0x11a0                      EQU                               0x11a0
_else_0x0970                      EQU                               0x11c0
_page_0x12a0                      EQU                               0x12a0
_drawInvaderBullets               EQU                               0x12a2
_else_0x09c2                      EQU                               0x12ac
_next_0x09c6                      EQU                               0x12b0
_elseif_0x0a15                    EQU                               0x12f5
_page_0x13a0                      EQU                               0x13a0
_endif_0x0a59                     EQU                               0x13cb
_endif_0x0a62                     EQU                               0x13d4
_else_0x0a67                      EQU                               0x13d9
_endif_0x0a70                     EQU                               0x13e2
_page_0x14a0                      EQU                               0x14a0
_checkNextLevel                   EQU                               0x14b2
_endif_0x0add                     EQU                               0x14e6
_endif_0x0ae5                     EQU                               0x14ec
_getNextInvaderShot               EQU                               0x14ee
_page_0x15a0                      EQU                               0x15a0
_else_0x0afa                      EQU                               0x15ac
_endif_0x0b27                     EQU                               0x15c7
_page_0x16a0                      EQU                               0x16a0
_endif_0x0bc1                     EQU                               0x16d8
_elseif_0x0bc6                    EQU                               0x16dd
_page_0x17a0                      EQU                               0x17a0
_endif_0x0c23                     EQU                               0x17ce
_checkInvaderBullets              EQU                               0x17d0
_page_0x18a0                      EQU                               0x18a0
_endif_0x0c70                     EQU                               0x18c3
_endif_0x0c72                     EQU                               0x18c5
_else_0x0c7d                      EQU                               0x18cc
_else_0x0c8a                      EQU                               0x18d5
_next_0x0caa                      EQU                               0x18e9
_page_0x19a0                      EQU                               0x19a0
_endif_0x0cfc                     EQU                               0x19d4
_endif_0x0d0a                     EQU                               0x19e2
_page_0x1aa0                      EQU                               0x1aa0
_elseif_0x0d30                    EQU                               0x1aac
_endif_0x0d48                     EQU                               0x1abc
_eraseInvaderBullet               EQU                               0x1abe
_erasePlayerBullet                EQU                               0x1ad5
_page_0x1ba0                      EQU                               0x1ba0
_eraseInvaderEdge                 EQU                               0x1bc0
_gameOver                         EQU                               0x1be3
_playerDied                       EQU                               0x1bef
_page_0x1ca0                      EQU                               0x1ca0
_else_0x0df2                      EQU                               0x1cb7
_updateScore                      EQU                               0x1cb9
_else_0x0e02                      EQU                               0x1cc3
_updateTime                       EQU                               0x1ce6
_endif_0x0e41                     EQU                               0x1cf6
_page_0x1da0                      EQU                               0x1da0
_updateSaucer                     EQU                               0x1da2
_else_0x0e51                      EQU                               0x1dac
_endif_0x0e9b                     EQU                               0x1dec
_else_0x0eac                      EQU                               0x1df5
_page_0x1ea0                      EQU                               0x1ea0
_endif_0x0eea                     EQU                               0x1ecc
_page_0x1fa0                      EQU                               0x1fa0
_else_0x0f37                      EQU                               0x1fb8
_endif_0x0f4a                     EQU                               0x1fcb
_page_0x20a0                      EQU                               0x20a0
_elseif_0x0f8c                    EQU                               0x20b5
_endif_0x0fae                     EQU                               0x20d3
_else_0x0fbb                      EQU                               0x20dc
_page_0x21a0                      EQU                               0x21a0
_else_0x0fef                      EQU                               0x21ad
_page_0x22a0                      EQU                               0x22a0
_endif_0x106b                     EQU                               0x22ca
_else_0x1070                      EQU                               0x22cf
_page_0x23a0                      EQU                               0x23a0
_endif_0x10ce                     EQU                               0x23d0
_updateAudio                      EQU                               0x23d2
_page_0x24a0                      EQU                               0x24a0
_elseif_0x1134                    EQU                               0x24c8
_endif_0x115d                     EQU                               0x24e9
_page_0x25a0                      EQU                               0x25a0
_else_0x1178                      EQU                               0x25ab
_endif_0x117a                     EQU                               0x25ad
_page_0x26a0                      EQU                               0x26a0
_endif_0x11ea                     EQU                               0x26ba
_page_0x27a0                      EQU                               0x27a0
_else_0x123e                      EQU                               0x27a6
_endif_0x1254                     EQU                               0x27ba
_page_0x28a0                      EQU                               0x28a0
_endif_0x12c9                     EQU                               0x28c8
_page_0x29a0                      EQU                               0x29a0
_else_0x131d                      EQU                               0x29b4
_endif_0x1346                     EQU                               0x29d5
_drawScore                        EQU                               0x29f0
_page_0x2aa0                      EQU                               0x2aa0
_next_0x137d                      EQU                               0x2ab8
_page_0x2ba0                      EQU                               0x2ba0
_endif_0x13f5                     EQU                               0x2bc4
_drawHigh                         EQU                               0x2bc6
_next_0x1400                      EQU                               0x2bcf
_page_0x2ca0                      EQU                               0x2ca0
_drawLevel                        EQU                               0x2cb2
_next_0x1459                      EQU                               0x2cce
_page_0x2da0                      EQU                               0x2da0
_drawSaucerScore                  EQU                               0x2db2
_next_0x149f                      EQU                               0x2dbb
_drawLives                        EQU                               0x2dea
_while_0x14e5                     EQU                               0x2df3
_page_0x2ea0                      EQU                               0x2ea0
_while_0x151f                     EQU                               0x2ece
_page_0x2fa0                      EQU                               0x2fa0
_wend_0x1551                      EQU                               0x2fa4
_initInvaders                     EQU                               0x2fa6
_next_0x1564                      EQU                               0x2fb3
_next_0x1568                      EQU                               0x2fb7
_else_0x1582                      EQU                               0x2fcd
_endif_0x159d                     EQU                               0x2fde
_else_0x15b7                      EQU                               0x2ff4
_page_0x30a0                      EQU                               0x30a0
_endif_0x15d2                     EQU                               0x30af
_page_0x31a0                      EQU                               0x31a0
_page_0x32a0                      EQU                               0x32a0
_page_0x33a0                      EQU                               0x33a0
_next_0x16e4                      EQU                               0x33a2
_initVars                         EQU                               0x33c8
_startLevel                       EQU                               0x33d4
_page_0x34a0                      EQU                               0x34a0
_else_0x1772                      EQU                               0x34ce
_page_0x35a0                      EQU                               0x35a0
_else_0x17b7                      EQU                               0x35b7
_endif_0x17bc                     EQU                               0x35bc
_resetLevel                       EQU                               0x35be
_initSystem                       EQU                               0x35ea
_page_0x36a0                      EQU                               0x36a0
_easterEgg                        EQU                               0x36ad
_next_0x181b                      EQU                               0x36c0
_uneasterEgg                      EQU                               0x36dc
_next_0x184a                      EQU                               0x36ef
_page_0x37a0                      EQU                               0x37a0
_waitScanline                     EQU                               0x37b4
_repeat_0x1863                    EQU                               0x37b5

; Global Variables
_livesLevel                       EQU                               0x0030
_delayLevel                       EQU                               0x0032
_px                               EQU                               0x0034
_py                               EQU                               0x0036
_ixorigin                         EQU                               0x0038
_iyorigin                         EQU                               0x003a
_ii                               EQU                               0x003c
_jj                               EQU                               0x003e
_xflip                            EQU                               0x0040
_iflip                            EQU                               0x0042
_icurrent                         EQU                               0x0044
_ishoot                           EQU                               0x0046
_sevol                            EQU                               0x0048
_timeTicks                        EQU                               0x004a
_pflip                            EQU                               0x004c
_iscore                           EQU                               0x004e
_imarch                           EQU                               0x0050
_endgame                          EQU                               0x0052
_pbxy                             EQU                               0x0054
_pbullet                          EQU                               0x0056
_ipbcount                         EQU                               0x0058
_ibindex                          EQU                               0x005a
_iexplode                         EQU                               0x005c
_itimer                           EQU                               0x005e
_bexplode                         EQU                               0x0060
_btimer                           EQU                               0x0062
_saucerxy                         EQU                               0x0064
_satimer                          EQU                               0x0066
_sefreq                           EQU                               0x0068
_stimer                           EQU                               0x006a
_sexplode                         EQU                               0x006c
_audmarch                         EQU                               0x006e
_audshoot                         EQU                               0x0070
_aviexplode                       EQU                               0x0072
_oldbutton                        EQU                               0x0074

; Local Variables
_handleInput_button               EQU                               0x00d8
_drawInvaders_x                   EQU                               0x00d8
_drawInvaders_y                   EQU                               0x00da
_drawInvaders_invader             EQU                               0x00dc
_drawBarriers_i                   EQU                               0x00d8
_drawBarriers_x                   EQU                               0x00da
_drawBarriers_y                   EQU                               0x00dc
_checkInvaders_i                  EQU                               0x00d8
_checkInvaders_j                  EQU                               0x00da
_checkInvaders_x                  EQU                               0x00dc
_checkInvaders_y                  EQU                               0x00de
_checkInvaders_iaddr              EQU                               0x00e0
_checkInvaders_iprev              EQU                               0x00e2
_checkInvaders_inext              EQU                               0x00e4
_checkInvaders_invader            EQU                               0x00e6
_playerExplode_bxy                EQU                               0x00d8
_playerExplode_t                  EQU                               0x00da
_playerExplode_f                  EQU                               0x00dc
_playerExplode_v                  EQU                               0x00de
_playerExplode_i                  EQU                               0x00e0
_drawInvaderBullets_bxy           EQU                               0x00d8
_getNextInvaderShot_bxy           EQU                               0x00d8
_getNextInvaderShot_i             EQU                               0x00da
_getNextInvaderShot_j             EQU                               0x00dc
_getNextInvaderShot_xy            EQU                               0x00de
_checkInvaderBullets_bxy          EQU                               0x00d8
_eraseInvaderBullet_xy            EQU                               0x00d8
_eraseInvaderEdge_x               EQU                               0x00d8
_eraseInvaderEdge_y               EQU                               0x00da
_updateSaucer_xy                  EQU                               0x00d8
_updateSaucer_odd                 EQU                               0x00da
_updateSaucer_spoints             EQU                               0x00dc
_updateSaucer_i                   EQU                               0x00de
_updateSaucer_sy                  EQU                               0x00e0
_updateAudio_t                    EQU                               0x00d8
_updateAudio_n                    EQU                               0x00da
_updateAudio_v                    EQU                               0x00dc
_updateAudio_i                    EQU                               0x00de
_drawScore_i                      EQU                               0x00d8
_drawScore_char                   EQU                               0x00da
_drawHigh_i                       EQU                               0x00d8
_drawHigh_char                    EQU                               0x00da
_drawLevel_i                      EQU                               0x00d8
_drawLevel_char                   EQU                               0x00da
_drawSaucerScore_xy               EQU                               0x00d8
_drawSaucerScore_i                EQU                               0x00da
_drawSaucerScore_char             EQU                               0x00dc
_drawLives_i                      EQU                               0x00d8
_drawLives_plife                  EQU                               0x00da
_initInvaders_i                   EQU                               0x00d8
_initInvaders_j                   EQU                               0x00da
_initInvaders_index               EQU                               0x00dc
_initInvaders_iprev               EQU                               0x00de
_initInvaders_inext               EQU                               0x00e0
_initInvaders_invader             EQU                               0x00e2
_easterEgg_vtable                 EQU                               0x00d8
_easterEgg_vaddr                  EQU                               0x00da
_uneasterEgg_vtable               EQU                               0x00d8
_uneasterEgg_vaddr                EQU                               0x00da

; Arrays
_highBCD_array                    EQU                               0x7de0
_highBCD_array                    DB                                0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD_array                   EQU                               0x71bd
_scoreBCD_array                   DB                                0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD_array                  EQU                               0x71b7
_pointsBCD_array                  DB                                0x00 0x00 0x00 0x00 0x00 0x00 
_levelBCD_array                   EQU                               0x7ca0
_levelBCD_array                   DB                                0x00 0x00 0x00 0x00 0x00 
_saucerBCD_array                  EQU                               0x7ba0
_saucerBCD_array                  DB                                0x00 0x00 0x00 0x00 0x00 
_invaders_array                   EQU                               0x70a5
_invaders_array                   DW                                0x71a3 0x70af 0x6faf 0x6eaf 0x6daf 
_invaders_0x71a3                  EQU                               0x71a3
_invaders_0x71a3                  DW                                0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0180 
_invaders_0x70af                  EQU                               0x70af
_invaders_0x70af                  DW                                0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 
_invaders_0x6faf                  EQU                               0x6faf
_invaders_0x6faf                  DW                                0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 
_invaders_0x6eaf                  EQU                               0x6eaf
_invaders_0x6eaf                  DW                                0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 
_invaders_0x6daf                  EQU                               0x6daf
_invaders_0x6daf                  DW                                0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 
_saucerx_array                    EQU                               0x7ec8
_saucerx_array                    DB                                0x00 0x8d 
_iypos_array                      EQU                               0x7aa0
_iypos_array                      DB                                0x28 0x1e 0x14 0x0a 0x00 
_ixpos_array                      EQU                               0x6fa5
_ixpos_array                      DB                                0x00 0x0c 0x18 0x24 0x30 0x3c 0x48 0x54 0x60 0x6c 
_istruct_array                    EQU                               0x062c
_istruct_array                    DW                                0x6ea7 0x6da7 0x6cbb 0x6cb3 0x6cab 0x6ca3 0x6bbb 0x6bb3 0x6bab 0x6ba3 0x6abb 0x6ab3 0x6aab 0x6aa3 0x69bb 0x69b3 0x69ab 0x69a3 0x68bb 0x68b3 0x68ab 0x68a3 0x67bb 0x67b3 0x67ab 0x67a3 0x66bb 0x66b3 0x66ab 0x66a3 0x65ae 0x65a6 0x64a8 0x64a0 0x63a8 0x63a0 0x62ae 0x62a6 0x61ae 0x61a6 0x60ae 0x60a6 0x5fae 0x5fa6 0x5eae 0x5ea6 0x5da2 0x5ca2 0x5ba2 0x5aa2 
_istruct_0x6ea7                   EQU                               0x6ea7
_istruct_0x6ea7                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6da7                   EQU                               0x6da7
_istruct_0x6da7                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6cbb                   EQU                               0x6cbb
_istruct_0x6cbb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6cb3                   EQU                               0x6cb3
_istruct_0x6cb3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6cab                   EQU                               0x6cab
_istruct_0x6cab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6ca3                   EQU                               0x6ca3
_istruct_0x6ca3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6bbb                   EQU                               0x6bbb
_istruct_0x6bbb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6bb3                   EQU                               0x6bb3
_istruct_0x6bb3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6bab                   EQU                               0x6bab
_istruct_0x6bab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6ba3                   EQU                               0x6ba3
_istruct_0x6ba3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6abb                   EQU                               0x6abb
_istruct_0x6abb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6ab3                   EQU                               0x6ab3
_istruct_0x6ab3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6aab                   EQU                               0x6aab
_istruct_0x6aab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x6aa3                   EQU                               0x6aa3
_istruct_0x6aa3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x69bb                   EQU                               0x69bb
_istruct_0x69bb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x69b3                   EQU                               0x69b3
_istruct_0x69b3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x69ab                   EQU                               0x69ab
_istruct_0x69ab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x69a3                   EQU                               0x69a3
_istruct_0x69a3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x68bb                   EQU                               0x68bb
_istruct_0x68bb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x68b3                   EQU                               0x68b3
_istruct_0x68b3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x68ab                   EQU                               0x68ab
_istruct_0x68ab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x68a3                   EQU                               0x68a3
_istruct_0x68a3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x67bb                   EQU                               0x67bb
_istruct_0x67bb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x67b3                   EQU                               0x67b3
_istruct_0x67b3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x67ab                   EQU                               0x67ab
_istruct_0x67ab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x67a3                   EQU                               0x67a3
_istruct_0x67a3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x66bb                   EQU                               0x66bb
_istruct_0x66bb                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x66b3                   EQU                               0x66b3
_istruct_0x66b3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x66ab                   EQU                               0x66ab
_istruct_0x66ab                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x66a3                   EQU                               0x66a3
_istruct_0x66a3                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x65ae                   EQU                               0x65ae
_istruct_0x65ae                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x65a6                   EQU                               0x65a6
_istruct_0x65a6                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x64a8                   EQU                               0x64a8
_istruct_0x64a8                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x64a0                   EQU                               0x64a0
_istruct_0x64a0                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x63a8                   EQU                               0x63a8
_istruct_0x63a8                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x63a0                   EQU                               0x63a0
_istruct_0x63a0                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x62ae                   EQU                               0x62ae
_istruct_0x62ae                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x62a6                   EQU                               0x62a6
_istruct_0x62a6                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x61ae                   EQU                               0x61ae
_istruct_0x61ae                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x61a6                   EQU                               0x61a6
_istruct_0x61a6                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x60ae                   EQU                               0x60ae
_istruct_0x60ae                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x60a6                   EQU                               0x60a6
_istruct_0x60a6                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5fae                   EQU                               0x5fae
_istruct_0x5fae                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5fa6                   EQU                               0x5fa6
_istruct_0x5fa6                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5eae                   EQU                               0x5eae
_istruct_0x5eae                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5ea6                   EQU                               0x5ea6
_istruct_0x5ea6                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5da2                   EQU                               0x5da2
_istruct_0x5da2                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5ca2                   EQU                               0x5ca2
_istruct_0x5ca2                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5ba2                   EQU                               0x5ba2
_istruct_0x5ba2                   DW                                0x0000 0x0000 0x0000 0x0000 
_istruct_0x5aa2                   EQU                               0x5aa2
_istruct_0x5aa2                   DW                                0x0000 0x0000 0x0000 0x0000 
_iaddress_array                   EQU                               0x59a3
_iaddress_array                   DW                                0x59c1 0x59ad 0x58ec 0x58d8 0x58c4 
_iaddress_0x59c1                  EQU                               0x59c1
_iaddress_0x59c1                  DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_iaddress_0x59ad                  EQU                               0x59ad
_iaddress_0x59ad                  DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_iaddress_0x58ec                  EQU                               0x58ec
_iaddress_0x58ec                  DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_iaddress_0x58d8                  EQU                               0x58d8
_iaddress_0x58d8                  DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_iaddress_0x58c4                  EQU                               0x58c4
_iaddress_0x58c4                  DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_irsprites_array                  EQU                               0x79a2
_irsprites_array                  DB                                0x0f 0x0b 0x07 
_ilsprites_array                  EQU                               0x78a0
_ilsprites_array                  DB                                0x0d 0x09 0x05 
_iscores_array                    EQU                               0x75a1
_iscores_array                    DB                                0x1e 0x14 0x0a 
_sscores_array                    EQU                               0x58a4
_sscores_array                    DW                                0x0064 0x0032 0x0032 0x0064 0x0096 0x0064 0x0064 0x0032 0x012c 0x0064 0x0064 0x0064 0x0032 0x0096 0x0064 0x0032 
_ibxy_array                       EQU                               0x6ea1
_ibxy_array                       DW                                0x0000 0x0000 0x0000 
_inotes_array                     EQU                               0x74a0
_inotes_array                     DB                                0x28 0x26 0x24 0x22 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x7fe0                  EQU                               0x7fe0
def_bytes_0x7fe0                  DB                                32 32 32 32 32 31 31 30 30 29 27 26 25 23 21 19 17 15 13 11 9 8 6 5 4 3 2 2 1 1 1 0 
def_bytes_0x0400                  EQU                               0x0400
def_bytes_0x0400                  DB                                0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 
def_bytes_0x0500                  EQU                               0x0500
def_bytes_0x0500                  DB                                0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 

; Define Words
def_words_0x7fa0                  EQU                               0x7fa0
def_words_0x7fa0                  DW                                20000 19463 18974 18529 18124 17755 17419 17113 16834 16581 16350 16139 15948 15774 15615 15470 15339 15219 15110 15011 14920 14838 14763 14695 14632 14576 14524 14477 14435 14396 14360 14328 
def_words_0x7ea0                  EQU                               0x7ea0
def_words_0x7ea0                  DW                                3000 3300 3600 3900 4200 4500 3000 3300 3600 3900 4200 4500 
def_words_0x7ec0                  EQU                               0x7ec0
def_words_0x7ec0                  DW                                0 2361 3793 
def_words_0x7da0                  EQU                               0x7da0
def_words_0x7da0                  DW                                28 38 225 75 9 84 84 150 188 113 94 131 206 141 47 188 28 150 141 159 244 272 122 75 56 84 206 0 281 291 253 272 

; Define Images

; Define Loader Image Chunks

; Define Sprites
def_sprites_0x7ca5                EQU                               0x7ca5
def_sprites_0x7ca5                DB                                0 0 0 0 12 12 0 0 0 12 12 12 0 0 12 12 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 255 
def_sprites_0x7ef9                EQU                               0x7ef9
def_sprites_0x7ef9                DB                                12 12 12 12 12 12 255 
def_sprites_0x7ba5                EQU                               0x7ba5
def_sprites_0x7ba5                DB                                12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 0 0 0 0 12 0 0 0 0 0 255 
def_sprites_0x7ef2                EQU                               0x7ef2
def_sprites_0x7ef2                DB                                0 0 0 0 0 0 255 
def_sprites_0x7aa5                EQU                               0x7aa5
def_sprites_0x7aa5                DB                                12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 0 0 0 0 12 12 0 0 0 0 0 12 255 
def_sprites_0x7eeb                EQU                               0x7eeb
def_sprites_0x7eeb                DB                                0 0 0 0 0 0 255 
def_sprites_0x79a5                EQU                               0x79a5
def_sprites_0x79a5                DB                                12 12 0 0 0 0 12 12 12 0 0 0 12 12 12 12 0 0 12 12 12 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 255 
def_sprites_0x7ee4                EQU                               0x7ee4
def_sprites_0x7ee4                DB                                12 12 12 12 12 12 255 
def_sprites_0x78d5                EQU                               0x78d5
def_sprites_0x78d5                DB                                0 0 0 0 0 3 0 0 0 3 3 3 0 0 3 3 3 3 0 3 3 0 3 3 3 3 3 3 3 3 0 0 3 3 3 0 0 0 0 3 0 0 249 
def_sprites_0x78aa                EQU                               0x78aa
def_sprites_0x78aa                DB                                3 3 3 3 3 0 3 3 3 3 3 3 3 3 3 3 3 3 0 3 3 0 3 3 3 3 3 3 3 3 0 3 3 0 0 3 0 0 0 0 0 0 249 
def_sprites_0x77d5                EQU                               0x77d5
def_sprites_0x77d5                DB                                0 0 0 0 0 0 3 0 0 0 0 0 3 3 0 0 0 0 0 3 3 0 0 0 3 3 3 3 0 0 3 3 0 0 0 0 3 0 0 0 0 0 249 
def_sprites_0x77b0                EQU                               0x77b0
def_sprites_0x77b0                DB                                0 0 0 0 0 12 0 0 0 0 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 250 
def_sprites_0x76db                EQU                               0x76db
def_sprites_0x76db                DB                                0 0 0 0 0 0 12 0 0 0 0 0 12 12 12 12 0 0 12 12 12 12 12 0 12 12 12 12 12 0 12 12 12 12 12 0 250 
def_sprites_0x75c3                EQU                               0x75c3
def_sprites_0x75c3                DB                                0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 0 0 63 63 63 0 0 63 63 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x74c3                EQU                               0x74c3
def_sprites_0x74c3                DB                                63 0 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 0 63 63 0 0 63 63 63 63 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x73c3                EQU                               0x73c3
def_sprites_0x73c3                DB                                0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 0 63 63 63 63 0 63 63 0 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x72c3                EQU                               0x72c3
def_sprites_0x72c3                DB                                63 0 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 0 63 63 0 0 63 63 63 63 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x71c3                EQU                               0x71c3
def_sprites_0x71c3                DB                                0 0 63 0 0 0 63 0 0 63 0 0 63 0 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x70c3                EQU                               0x70c3
def_sprites_0x70c3                DB                                0 63 0 0 0 0 63 0 0 63 0 0 63 63 0 63 0 0 0 63 63 63 0 0 63 63 63 63 0 0 63 63 63 0 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6fc3                EQU                               0x6fc3
def_sprites_0x6fc3                DB                                0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 63 63 63 0 63 63 0 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6ec3                EQU                               0x6ec3
def_sprites_0x6ec3                DB                                0 63 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 63 0 0 63 63 0 63 0 0 0 63 0 63 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6dc3                EQU                               0x6dc3
def_sprites_0x6dc3                DB                                0 0 0 0 63 63 0 0 0 63 63 63 0 0 63 63 63 63 0 63 63 0 63 63 0 63 63 63 63 63 0 0 0 63 0 0 0 0 63 0 63 63 0 63 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6cc3                EQU                               0x6cc3
def_sprites_0x6cc3                DB                                0 0 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6bc3                EQU                               0x6bc3
def_sprites_0x6bc3                DB                                0 0 0 0 63 63 0 0 0 63 63 63 0 0 63 63 63 63 0 63 63 0 63 63 0 63 63 63 63 63 0 0 63 0 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6ac3                EQU                               0x6ac3
def_sprites_0x6ac3                DB                                0 0 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x69c3                EQU                               0x69c3
def_sprites_0x69c3                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x68c3                EQU                               0x68c3
def_sprites_0x68c3                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x67c3                EQU                               0x67c3
def_sprites_0x67c3                DB                                0 0 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 63 0 0 63 63 0 0 0 0 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 246 
def_sprites_0x66c3                EQU                               0x66c3
def_sprites_0x66c3                DB                                0 0 63 0 0 0 0 63 0 0 63 0 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 63 63 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x76b6                EQU                               0x76b6
def_sprites_0x76b6                DB                                0 0 0 12 0 0 0 0 0 0 0 12 0 12 0 12 0 0 0 0 0 0 12 12 12 0 12 12 12 12 0 12 12 12 12 12 250 
def_sprites_0x65db                EQU                               0x65db
def_sprites_0x65db                DB                                0 0 0 0 0 0 0 0 12 0 0 0 0 0 0 12 0 0 12 0 12 0 0 0 12 12 12 0 0 0 12 12 12 12 0 12 250 
def_sprites_0x65b6                EQU                               0x65b6
def_sprites_0x65b6                DB                                0 0 12 0 0 12 12 0 0 12 0 0 0 0 12 0 0 12 12 0 0 0 12 0 0 0 12 12 0 12 0 12 0 12 12 0 250 
def_sprites_0x64db                EQU                               0x64db
def_sprites_0x64db                DB                                0 0 12 0 0 0 0 12 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 12 0 0 0 12 12 12 0 12 0 0 250 
def_sprites_0x64b0                EQU                               0x64b0
def_sprites_0x64b0                DB                                63 0 0 0 0 63 0 63 0 0 63 0 0 0 63 63 0 0 63 63 0 0 63 63 0 0 63 63 0 0 0 63 0 0 63 0 63 0 0 0 0 63 249 
def_sprites_0x63d5                EQU                               0x63d5
def_sprites_0x63d5                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_sprites_0x7ed1                EQU                               0x7ed1
def_sprites_0x7ed1                DB                                0 0 12 12 0 0 12 12 12 12 12 12 12 12 12 12 12 12 253 
def_sprites_0x7ded                EQU                               0x7ded
def_sprites_0x7ded                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 
def_sprites_0x63b0                EQU                               0x63b0
def_sprites_0x63b0                DB                                0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_sprites_0x62db                EQU                               0x62db
def_sprites_0x62db                DB                                0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x62b6                EQU                               0x62b6
def_sprites_0x62b6                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x61db                EQU                               0x61db
def_sprites_0x61db                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x61b6                EQU                               0x61b6
def_sprites_0x61b6                DB                                0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_sprites_0x60db                EQU                               0x60db
def_sprites_0x60db                DB                                63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x60b6                EQU                               0x60b6
def_sprites_0x60b6                DB                                0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x5fdb                EQU                               0x5fdb
def_sprites_0x5fdb                DB                                63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_sprites_0x5fb6                EQU                               0x5fb6
def_sprites_0x5fb6                DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x5edb                EQU                               0x5edb
def_sprites_0x5edb                DB                                0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x5eb6                EQU                               0x5eb6
def_sprites_0x5eb6                DB                                63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x5dd5                EQU                               0x5dd5
def_sprites_0x5dd5                DB                                0 0 0 0 0 19 0 19 0 19 19 19 0 0 19 19 0 19 0 19 19 0 19 19 0 19 0 19 0 19 19 0 0 19 19 0 0 0 0 19 0 0 249 
def_sprites_0x5daa                EQU                               0x5daa
def_sprites_0x5daa                DB                                0 19 0 19 0 0 19 19 19 19 0 19 19 0 19 19 19 0 0 19 19 0 19 19 19 19 19 19 19 0 19 0 19 19 0 19 0 0 0 0 0 0 249 
def_sprites_0x5cd5                EQU                               0x5cd5
def_sprites_0x5cd5                DB                                19 0 0 0 0 0 19 0 19 0 0 0 19 19 0 0 0 0 0 19 19 0 0 0 19 19 19 0 0 0 19 0 0 19 0 0 19 0 0 0 0 0 249 
def_sprites_0x5caa                EQU                               0x5caa
def_sprites_0x5caa                DB                                19 0 0 0 19 0 0 19 0 19 19 19 0 0 19 19 0 0 19 19 19 0 19 0 0 19 0 19 0 19 19 0 0 19 19 0 19 0 19 19 0 0 249 
def_sprites_0x5bd5                EQU                               0x5bd5
def_sprites_0x5bd5                DB                                19 19 0 19 0 19 0 19 19 19 19 19 19 0 19 0 0 0 0 19 0 0 0 19 0 0 19 0 0 0 19 19 0 19 0 19 19 0 19 0 19 0 249 
def_sprites_0x5baa                EQU                               0x5baa
def_sprites_0x5baa                DB                                19 19 0 0 19 0 0 0 19 0 0 0 19 19 0 0 0 0 0 19 19 0 19 0 19 19 19 0 0 0 19 0 0 19 0 0 0 19 0 0 19 0 249 
def_sprites_0x5ad5                EQU                               0x5ad5
def_sprites_0x5ad5                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_sprites_0x5aaa                EQU                               0x5aaa
def_sprites_0x5aaa                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_sprites_0x59d5                EQU                               0x59d5
def_sprites_0x59d5                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_sprites_0x75a4                EQU                               0x75a4
def_sprites_0x75a4                DB                                23 23 23 0 0 0 23 0 23 0 0 0 23 0 23 0 0 0 23 0 23 0 0 0 23 23 23 0 0 0 251 
def_sprites_0x74a4                EQU                               0x74a4
def_sprites_0x74a4                DB                                0 23 0 0 0 0 23 23 0 0 0 0 0 23 0 0 0 0 0 23 0 0 0 0 23 23 23 0 0 0 251 
def_sprites_0x73a4                EQU                               0x73a4
def_sprites_0x73a4                DB                                23 23 23 0 0 0 0 0 23 0 0 0 0 23 23 0 0 0 0 0 23 0 0 0 23 23 23 0 0 0 251 
def_sprites_0x72a4                EQU                               0x72a4
def_sprites_0x72a4                DB                                23 23 23 0 0 0 23 0 0 0 0 0 23 23 23 0 0 0 0 0 23 0 0 0 23 23 23 0 0 0 251 
def_sprites_0x7eca                EQU                               0x7eca
def_sprites_0x7eca                DB                                0 3 3 0 3 3 255 
def_sprites_0x7eb9                EQU                               0x7eb9
def_sprites_0x7eb9                DB                                0 3 3 0 3 3 255 
def_sprites_0x7de6                EQU                               0x7de6
def_sprites_0x7de6                DB                                0 3 3 0 0 0 255 
def_sprites_0x78a3                EQU                               0x78a3
def_sprites_0x78a3                DB                                0 0 3 3 0 3 255 
def_sprites_0x77a9                EQU                               0x77a9
def_sprites_0x77a9                DB                                3 0 3 3 0 3 255 
def_sprites_0x77a2                EQU                               0x77a2
def_sprites_0x77a2                DB                                3 0 3 0 0 0 255 
def_sprites_0x76af                EQU                               0x76af
def_sprites_0x76af                DB                                0 3 0 3 3 0 255 
def_sprites_0x76a8                EQU                               0x76a8
def_sprites_0x76a8                DB                                3 3 0 3 3 0 255 
def_sprites_0x76a1                EQU                               0x76a1
def_sprites_0x76a1                DB                                3 3 0 0 0 0 255 

; Define Fonts

; Lookup Tables
_spriteLut_0x57de                 EQU                               0x57de
_spriteLut_0x57de                 DW                                0x7ca5 0x0000 0x7ef9 0x0f00 0x7ba5 0x0006 0x7ef2 0x0f06 0x7aa5 0x000c 0x7eeb 0x0f0c 0x79a5 0x0012 0x7ee4 0x0f12 0x0000
_spriteLut_0x57d0                 EQU                               0x57d0
_spriteLut_0x57d0                 DW                                0x78d5 0x0000 0x78aa 0x0006 0x77d5 0x000c 0x0000
_spriteLut_0x57c2                 EQU                               0x57c2
_spriteLut_0x57c2                 DW                                0x78d5 0x000c 0x78aa 0x0006 0x77d5 0x0000 0x0000
_spriteLut_0x57b8                 EQU                               0x57b8
_spriteLut_0x57b8                 DW                                0x77b0 0x0000 0x76db 0x0006 0x0000
_spriteLut_0x57ae                 EQU                               0x57ae
_spriteLut_0x57ae                 DW                                0x77b0 0x0006 0x76db 0x0000 0x0000
_spriteLut_0x57a4                 EQU                               0x57a4
_spriteLut_0x57a4                 DW                                0x75c3 0x0000 0x74c3 0x0006 0x0000
_spriteLut_0x56f6                 EQU                               0x56f6
_spriteLut_0x56f6                 DW                                0x73c3 0x0000 0x72c3 0x0006 0x0000
_spriteLut_0x56ec                 EQU                               0x56ec
_spriteLut_0x56ec                 DW                                0x75c3 0x0006 0x74c3 0x0000 0x0000
_spriteLut_0x56e2                 EQU                               0x56e2
_spriteLut_0x56e2                 DW                                0x73c3 0x0006 0x72c3 0x0000 0x0000
_spriteLut_0x56d8                 EQU                               0x56d8
_spriteLut_0x56d8                 DW                                0x71c3 0x0000 0x70c3 0x0006 0x0000
_spriteLut_0x56ce                 EQU                               0x56ce
_spriteLut_0x56ce                 DW                                0x6fc3 0x0000 0x6ec3 0x0006 0x0000
_spriteLut_0x56c4                 EQU                               0x56c4
_spriteLut_0x56c4                 DW                                0x71c3 0x0006 0x70c3 0x0000 0x0000
_spriteLut_0x56ba                 EQU                               0x56ba
_spriteLut_0x56ba                 DW                                0x6fc3 0x0006 0x6ec3 0x0000 0x0000
_spriteLut_0x56b0                 EQU                               0x56b0
_spriteLut_0x56b0                 DW                                0x6dc3 0x0000 0x6cc3 0x0006 0x0000
_spriteLut_0x56a6                 EQU                               0x56a6
_spriteLut_0x56a6                 DW                                0x6bc3 0x0000 0x6ac3 0x0006 0x0000
_spriteLut_0x55f6                 EQU                               0x55f6
_spriteLut_0x55f6                 DW                                0x6dc3 0x0006 0x6cc3 0x0000 0x0000
_spriteLut_0x55ec                 EQU                               0x55ec
_spriteLut_0x55ec                 DW                                0x6bc3 0x0006 0x6ac3 0x0000 0x0000
_spriteLut_0x55e2                 EQU                               0x55e2
_spriteLut_0x55e2                 DW                                0x69c3 0x0000 0x68c3 0x0006 0x0000
_spriteLut_0x55d8                 EQU                               0x55d8
_spriteLut_0x55d8                 DW                                0x67c3 0x0000 0x66c3 0x0006 0x0000
_spriteLut_0x55ce                 EQU                               0x55ce
_spriteLut_0x55ce                 DW                                0x67c3 0x0006 0x66c3 0x0000 0x0000
_spriteLut_0x55c4                 EQU                               0x55c4
_spriteLut_0x55c4                 DW                                0x76b6 0x0000 0x65db 0x0006 0x0000
_spriteLut_0x55ba                 EQU                               0x55ba
_spriteLut_0x55ba                 DW                                0x65b6 0x0000 0x64db 0x0006 0x0000
_spriteLut_0x6da1                 EQU                               0x6da1
_spriteLut_0x6da1                 DW                                0x64b0 0x0000 0x0000
_spriteLut_0x65a0                 EQU                               0x65a0
_spriteLut_0x65a0                 DW                                0x63d5 0x0000 0x0000
_spriteLut_0x62a0                 EQU                               0x62a0
_spriteLut_0x62a0                 DW                                0x7ed1 0x0000 0x0000
_spriteLut_0x61a0                 EQU                               0x61a0
_spriteLut_0x61a0                 DW                                0x7ded 0x0000 0x0000
_spriteLut_0x60a0                 EQU                               0x60a0
_spriteLut_0x60a0                 DW                                0x63b0 0x0000 0x0000
_spriteLut_0x5fa0                 EQU                               0x5fa0
_spriteLut_0x5fa0                 DW                                0x62db 0x0000 0x0000
_spriteLut_0x5ea0                 EQU                               0x5ea0
_spriteLut_0x5ea0                 DW                                0x62b6 0x0000 0x0000
_spriteLut_0x56a0                 EQU                               0x56a0
_spriteLut_0x56a0                 DW                                0x61db 0x0000 0x0000
_spriteLut_0x55b4                 EQU                               0x55b4
_spriteLut_0x55b4                 DW                                0x61b6 0x0000 0x0000
_spriteLut_0x55ae                 EQU                               0x55ae
_spriteLut_0x55ae                 DW                                0x60db 0x0000 0x0000
_spriteLut_0x55a8                 EQU                               0x55a8
_spriteLut_0x55a8                 DW                                0x60b6 0x0000 0x0000
_spriteLut_0x55a2                 EQU                               0x55a2
_spriteLut_0x55a2                 DW                                0x5fdb 0x0000 0x0000
_spriteLut_0x54fa                 EQU                               0x54fa
_spriteLut_0x54fa                 DW                                0x5fb6 0x0000 0x0000
_spriteLut_0x54f4                 EQU                               0x54f4
_spriteLut_0x54f4                 DW                                0x5edb 0x0000 0x0000
_spriteLut_0x54ee                 EQU                               0x54ee
_spriteLut_0x54ee                 DW                                0x5eb6 0x0000 0x0000
_spriteLut_0x54e0                 EQU                               0x54e0
_spriteLut_0x54e0                 DW                                0x5dd5 0x0000 0x5daa 0x0006 0x5cd5 0x000c 0x0000
_spriteLut_0x54d2                 EQU                               0x54d2
_spriteLut_0x54d2                 DW                                0x5caa 0x0000 0x5bd5 0x0006 0x5baa 0x000c 0x0000
_spriteLut_0x54c4                 EQU                               0x54c4
_spriteLut_0x54c4                 DW                                0x5ad5 0x0000 0x5aaa 0x0006 0x59d5 0x000c 0x0000
_spriteLut_0x54be                 EQU                               0x54be
_spriteLut_0x54be                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x54b8                 EQU                               0x54b8
_spriteLut_0x54b8                 DW                                0x74a4 0x0000 0x0000
_spriteLut_0x54b2                 EQU                               0x54b2
_spriteLut_0x54b2                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x54ac                 EQU                               0x54ac
_spriteLut_0x54ac                 DW                                0x73a4 0x0000 0x0000
_spriteLut_0x54a6                 EQU                               0x54a6
_spriteLut_0x54a6                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x54a0                 EQU                               0x54a0
_spriteLut_0x54a0                 DW                                0x72a4 0x0000 0x0000
_spriteLut_0x53fa                 EQU                               0x53fa
_spriteLut_0x53fa                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x53f4                 EQU                               0x53f4
_spriteLut_0x53f4                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x53ee                 EQU                               0x53ee
_spriteLut_0x53ee                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x53e8                 EQU                               0x53e8
_spriteLut_0x53e8                 DW                                0x75a4 0x0000 0x0000
_spriteLut_0x53da                 EQU                               0x53da
_spriteLut_0x53da                 DW                                0x7eca 0x0000 0x7eb9 0x0006 0x7de6 0x000c 0x0000
_spriteLut_0x53cc                 EQU                               0x53cc
_spriteLut_0x53cc                 DW                                0x78a3 0x0000 0x77a9 0x0006 0x77a2 0x000c 0x0000
_spriteLut_0x53be                 EQU                               0x53be
_spriteLut_0x53be                 DW                                0x76af 0x0000 0x76a8 0x0006 0x76a1 0x000c 0x0000
_spriteLut_0x53b0                 EQU                               0x53b0
_spriteLut_0x53b0                 DW                                0x7eca 0x000c 0x7eb9 0x0006 0x7de6 0x0000 0x0000
_spriteLut_0x53a2                 EQU                               0x53a2
_spriteLut_0x53a2                 DW                                0x78a3 0x000c 0x77a9 0x0006 0x77a2 0x0000 0x0000
_spriteLut_0x52f2                 EQU                               0x52f2
_spriteLut_0x52f2                 DW                                0x76af 0x000c 0x76a8 0x0006 0x76a1 0x0000 0x0000
_spritesLut_                      EQU                               0x0690
_spritesLut_                      DW                                0x57de 0x57d0 0x57c2 0x57b8 0x57ae 0x57a4 0x56f6 0x56ec 0x56e2 0x56d8 0x56ce 0x56c4 0x56ba 0x56b0 0x56a6 0x55f6 0x55ec 0x55e2 0x55d8 0x55ce 0x55c4 0x55ba 0x6da1 0x65a0 0x62a0 0x61a0 0x60a0 0x5fa0 0x5ea0 0x56a0 0x55b4 0x55ae 0x55a8 0x55a2 0x54fa 0x54f4 0x54ee 0x54e0 0x54d2 0x54c4 0x54be 0x54b8 0x54b2 0x54ac 0x54a6 0x54a0 0x53fa 0x53f4 0x53ee 0x53e8 0x53da 0x53cc 0x53be 0x53b0 0x53a2 0x52f2 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  Init16Array2d                                                 ; Main: INIT

                                  LDWI                              _initSystem
                                  CALL                              giga_vAC                    ; Main: call initSystem

_reset                            LDWI                              _resetLevel
                                  CALL                              giga_vAC                    ; Main: call resetLevel

_start                            LDWI                              _startLevel
                                  CALL                              giga_vAC                    ; Main: call startLevel

_init                             LDWI                              _initVars
                                  CALL                              giga_vAC                    ; Main: call initVars

_repeat_0x022f                    LDWI                              _waitScanline
                                  CALL                              giga_vAC                    ; Main: call waitScanline

                                  LDWI                              _handleInput
                                  CALL                              giga_vAC                    ; Main: call handleInput

                                  LDWI                              _drawPlayerBullet
                                  CALL                              giga_vAC                    ; Main: call drawPlayerBullet

                                  LDWI                              _drawPlayer
                                  CALL                              giga_vAC                    ; Main: call drawPlayer

                                  LDWI                              _movePlayer
                                  CALL                              giga_vAC                    ; Main: call movePlayer

                                  LDWI                              _checkInvaders
                                  CALL                              giga_vAC                    ; Main: call checkInvaders

                                  LDWI                              _checkNextLevel
                                  CALL                              giga_vAC                    ; Main: call checkNextLevel

                                  LDWI                              _drawInvaderBullets
                                  CALL                              giga_vAC                    ; Main: call drawInvaderBullets

                                  LDWI                              _checkInvaderBullets
                                  CALL                              giga_vAC                    ; Main: call checkInvaderBullets

                                  LDWI                              _drawInvaders
                                  CALL                              giga_vAC                    ; Main: call drawInvaders

                                  LDWI                              _updateSaucer
                                  CALL                              giga_vAC                    ; Main: call updateSaucer

                                  LDWI                              _updateScore
                                  CALL                              giga_vAC                    ; Main: call updateScore

                                  LDWI                              _updateAudio
                                  CALL                              giga_vAC                    ; Main: call updateAudio

                                  LDWI                              _updateTime
                                  CALL                              giga_vAC                    ; Main: call updateTime

                                  LD                                _endgame
                                  BEQ                               _else_0x0283
                                  LDWI                              _start
                                  CALL                              giga_vAC                    ; Main: if &(endgame.lo) then goto start

_else_0x0283                      LD                                _endgame + 1
                                  BEQ                               _else_0x0291
                                  LDWI                              _reset
                                  CALL                              giga_vAC                    ; Main: if &(endgame.hi) then goto reset

_else_0x0291                      BRA                               _repeat_0x022f              ; Main: &forever

_drawPlayerBullet                 PUSH                                                          ; Main: proc drawPlayerBullet

                                  LDW                               _iexplode
                                  BEQ                               _else_0x029f
                                  Return                                                        ; Main: if &(iexplode) then return

_else_0x029f                      LD                                _pbullet + 1
                                  XORI                              0
                                  BNE                               _else_0x02ac
                                  Return                                                        ; Main: if pbullet.hi &&= 0 then return

_else_0x02ac                      LDWI                              SYS_VDrawBits_134           ; Main: LDWI    SYS_VDrawBits_134
                                  STW                               giga_sysFn                  ; Main: STW     giga_sysFn

                                  LDWI                              _checkPlayerBullet
                                  CALL                              giga_vAC                    ; Main: gosub checkPlayerBullet

                                  LDWI                              0x3F00                      ; Main: LDWI    0x3F00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0
                                  LDW                               _pbxy                       ; Main: LDW     _pbxy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4

                                  LD                                _pbullet
                                  BEQ                               _endif_0x02ed               ; Main: if &(pbullet.lo)

                                  LDI                               0xF8                        ; Main: LDI     0xF8
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  LD                                _pbxy + 1
                                  SUBI                              2
                                  ST                                _pbxy + 1                   ; Main: pbxy.hi = pbxy.hi - 2

                                  LD                                _pbxy + 1
                                  SUBI                              14
                                  BGE                               _endif_0x02eb               ; Main: if pbxy.hi &&< 14

                                  LDI                               0
                                  STW                               _pbullet                    ; Main: pbullet = 0

                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

_endif_0x02eb                     Return                                                        ; Main: return

_endif_0x02ed                     LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  LDI                               0
                                  STW                               _pbullet                    ; Main: pbullet = 0

                                  Return                                                        ; Main: endproc

_drawPlayer                       PUSH                                                          ; Main: proc drawPlayer

                                  LD                                _pflip
                                  XORI                              1
                                  JumpEQ                            _else_0x0322 6              ; Main: if pflip.lo &= 1

                                  LDI                               4
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  LDWI                              _endif_0x0335
                                  CALL                              giga_vAC                    ; Main: sprite FlipX,  Player + 1, px, py

_else_0x0322                      LDI                               3
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Player + 0, px, py

_endif_0x0335                     Return                                                        ; Main: endproc

_handleInput                      PUSH                                                          ; Main: proc handleInput

                                  LD                                giga_buttonState
                                  XORI                              255
                                  STW                               _handleInput_button         ; Main: button = get("BUTTON_STATE") XOR 255

                                  LDW                               _handleInput_button
                                  ANDI                              1
                                  BEQ                               _else_0x0358
                                  LDWI                              257
                                  STW                               _pflip                      ; Main: if &(button AND &h01) then pflip = &h0101

_else_0x0358                      LDW                               _handleInput_button
                                  ANDI                              2
                                  BEQ                               _else_0x036c
                                  LDWI                              256
                                  STW                               _pflip                      ; Main: if &(button AND &h02) then pflip = &h0100

_else_0x036c                      LDW                               _oldbutton
                                  ANDI                              128
                                  XORI                              0
                                  BNE                               _endif_0x0391               ; Main: if (oldbutton AND &h80) &&= 0

                                  LDW                               _handleInput_button
                                  ANDI                              128
                                  BEQ                               _endif_0x0391               ; Main: if &(button AND &h80)

                                  LDWI                              _playerBullet
                                  CALL                              giga_vAC                    ; Main: gosub playerBullet

_endif_0x0391                     LDW                               _handleInput_button
                                  STW                               _oldbutton                  ; Main: oldbutton = button

                                  Return                                                        ; Main: endproc

_playerBullet                     PUSH                              
                                  LD                                _pbullet + 1
                                  BEQ                               _else_0x03a3
                                  Return                                                        ; Main: if &(pbullet.hi) then return

_else_0x03a3                      INC                               _ipbcount                   ; Main: inc ipbcount.lo

                                  LDWI                              256
                                  STW                               _audshoot                   ; Main: audshoot = &h0100

                                  LDWI                              257
                                  STW                               _pbullet                    ; Main: pbullet = &h0101

                                  LD                                _pflip
                                  BEQ                               _else_0x03de                ; Main: if &(pflip.lo)

                                  LDW                               _px
                                  ADDI                              6
                                  STW                               0xe8
                                  LDW                               _py
                                  SUBI                              5
                                  ADDI                              8
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               _pbxy
                                  BRA                               _endif_0x0402               ; Main: pbxy = (px + 6) + ((py - 5 + 8) LSL 8)

_else_0x03de                      LDW                               _px
                                  ADDI                              5
                                  STW                               0xe8
                                  LDW                               _py
                                  SUBI                              5
                                  ADDI                              8
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               _pbxy                       ; Main: pbxy = (px + 5) + ((py - 5 + 8) LSL 8)

_endif_0x0402                     Return                                                        ; Main: return

_movePlayer                       PUSH                                                          ; Main: proc movePlayer

                                  LD                                _pflip + 1
                                  BEQ                               _endif_0x0443               ; Main: if &(pflip.hi)

                                  LDI                               0
                                  ST                                _pflip + 1                  ; Main: pflip.hi = 0

                                  LD                                _pflip
                                  BEQ                               _else_0x042e                ; Main: if &(pflip.lo)

                                  INC                               _px                         ; Main: inc px

                                  LDW                               _px
                                  SUBI                              147
                                  BLE                               _endif_0x042c               ; Main: if px &&> PLAYER_XEND

                                  LDI                               147
                                  STW                               _px                         ; Main: px = PLAYER_XEND

_endif_0x042c                     BRA                               _endif_0x0443               ; Main: endif

_else_0x042e                      LDW                               _px
                                  SUBI                              1
                                  STW                               _px                         ; Main: dec px

                                  LDW                               _px
                                  SUBI                              1
                                  BGE                               _endif_0x0443               ; Main: if px &&< PLAYER_X

                                  LDI                               1
                                  STW                               _px                         ; Main: px = PLAYER_X

_endif_0x0443                     Return                                                        ; Main: endproc

_drawInvaders                     PUSH                                                          ; Main: proc drawInvaders

                                  LDW                               _iexplode
                                  BEQ                               _else_0x0451
                                  Return                                                        ; Main: if &(iexplode) then return

_else_0x0451                      LDW                               _icurrent
                                  STLW                              0xFE
                                  LDWI                              _page_0x04a0
                                  CALL                              giga_vAC
_page_0x04a0                      LDLW                              0xFE
                                  XORI                              0
                                  JumpEQ                            _else_0x0463 21
                                  Return                                                        ; Main: if icurrent &= 0 then return

_else_0x0463                      LDW                               _icurrent
                                  DEEK                              
                                  STW                               _drawInvaders_invader       ; Main: invader = deek(icurrent)

                                  LDW                               _icurrent
                                  ADDI                              2
                                  PEEK                              
                                  ADDW                              _ixorigin
                                  STW                               _drawInvaders_x             ; Main: x = ixorigin + peek(icurrent + 2)

                                  LDW                               _icurrent
                                  ADDI                              3
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               _iyorigin
                                  SUBW                              0xea
                                  STW                               _drawInvaders_y             ; Main: y = iyorigin - peek(icurrent + 3)

                                  LDW                               _drawInvaders_y
                                  SUBI                              107
                                  BLT                               _endif_0x04a2               ; Main: if y &&>= PLAYER_Y - 7

                                  LDWI                              _gameOver
                                  CALL                              giga_vAC                    ; Main: call gameOver

                                  Return                                                        ; Main: return

_endif_0x04a2                     LDW                               _xflip
                                  JumpGT                            _else_0x0520 25             ; Main: if xflip &> 0

                                  LDW                               _xflip
                                  XORI                              3
                                  JumpEQ                            _endif_0x04df 24            ; Main: if xflip &= 3

                                  LDW                               _drawInvaders_x
                                  STLW                              0xFE
                                  LDWI                              _page_0x0578
                                  CALL                              giga_vAC
_page_0x0578                      LDLW                              0xFE
                                  JumpGT                            _endif_0x04df 23            ; Main: if x &> 0

                                  LDW                               _drawInvaders_x
                                  STW                               0xd8
                                  LDW                               _drawInvaders_y
                                  STW                               0xda
                                  LDWI                              _eraseInvaderEdge
                                  CALL                              giga_vAC                    ; Main: call eraseInvaderEdge, x, y

_endif_0x04df                     LD                                _drawInvaders_invader + 1
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDWI                              0x79a2
                                  ADDW                              memIndex0
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               _drawInvaders_x
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              1
                                  ADDW                              0xea
                                  STW                               spriteId
                                  LDW                               _drawInvaders_x
                                  ST                                spriteXY
                                  LDW                               _drawInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  LDWI                              _endif_0x055c
                                  CALL                              giga_vAC                    ; Main: sprite FlipX, irsprites(invader.hi - 1) + ((x LSR 1) AND 1), x, y

_else_0x0520                      LD                                _drawInvaders_invader + 1
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDWI                              0x78a0
                                  ADDW                              memIndex0
                                  PEEK                              
                                  STW                               0xea
                                  LDW                               _drawInvaders_x
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              1
                                  ADDW                              0xea
                                  STW                               spriteId
                                  LDW                               _drawInvaders_x
                                  ST                                spriteXY
                                  LDW                               _drawInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, ilsprites(invader.hi - 1) + ((x LSR 1) AND 1), x, y

_endif_0x055c                     LDW                               _imarch
                                  JumpFalse                         _endif_0x057f 27            ; Main: if (imarch)

                                  LDI                               17
                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  STW                               spriteId
                                  LDW                               _drawInvaders_x
                                  ST                                spriteXY
                                  LDW                               _drawInvaders_y
                                  SUBI                              10
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, InvBlk, x, y - INVADERS_Y

_endif_0x057f                     LDW                               _drawInvaders_x
                                  SUBI                              147
                                  JumpGE                            _elseif_0x0599 28           ; Main: if x &>= PLAYER_XEND

                                  LDWI                              -2
                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  STW                               _iflip
                                  LDWI                              _endif_0x05b7
                                  CALL                              giga_vAC                    ; Main: iflip = -2

_elseif_0x0599                    LDW                               _drawInvaders_x
                                  SUBI                              1
                                  BGT                               _endif_0x05b7               ; Main: elseif x &&<= 1

                                  LDI                               2
                                  STW                               _iflip                      ; Main: iflip = 2

                                  LD                                _ipbcount + 1
                                  XORI                              49
                                  BNE                               _endif_0x05b7               ; Main: if ipbcount.hi &&= (INVADERS_J * INVADERS_I) - 1

                                  LDI                               3
                                  STW                               _iflip                      ; Main: iflip = 3

_endif_0x05b7                     LDW                               _icurrent
                                  ADDI                              6
                                  DEEK                              
                                  STW                               _icurrent                   ; Main: icurrent = deek(icurrent + 6)

                                  LD                                _drawInvaders_invader
                                  ANDI                              128
                                  XORI                              0
                                  BNE                               _else_0x05d7
                                  Return                                                        ; Main: if (invader.lo AND ILIST_END) &&= 0 then return

_else_0x05d7                      LDW                               _iflip
                                  XORW                              _xflip
                                  BEQ                               _else_0x05f0                ; Main: if iflip &&<> xflip

                                  LDI                               1
                                  STW                               _imarch                     ; Main: imarch = 1

                                  LDW                               _iyorigin
                                  ADDI                              8
                                  STW                               _iyorigin
                                  BRA                               _endif_0x05fc               ; Main: iyorigin = iyorigin + INVADERS_H

_else_0x05f0                      LDI                               0
                                  STW                               _imarch                     ; Main: imarch = 0

                                  LDW                               _ixorigin
                                  ADDW                              _iflip
                                  STW                               _ixorigin                   ; Main: ixorigin = ixorigin + iflip

_endif_0x05fc                     LDW                               _iflip
                                  STW                               _xflip                      ; Main: xflip = iflip

                                  Return                                                        ; Main: endproc

_psmashBarrier                    PUSH                                                          ; Main: asm

                                  LDWI                              0x0C00                      ; Main: LDWI    0x0C00
                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0        'FGBG colour
                                  LDWI                              0xFEFF                      ; Main: LDWI    0xFEFF
                                  ADDW                              _pbxy                       ; Main: ADDW    _pbxy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4        'offset
                                  LD                                giga_rand0                  ; Main: LD      giga_rand0
                                  ANDI                              0xC0                        ; Main: ANDI    0xC0
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'left damage
                                  INC                               giga_sysArg4                ; Main: INC     giga_sysArg4
                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'center damage
                                  INC                               giga_sysArg4                ; Main: INC     giga_sysArg4
                                  LD                                giga_rand2                  ; Main: LD      giga_rand2
                                  ANDI                              0xC0                        ; Main: ANDI    0xC0
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'right damage

                                  Return                                                        ; Main: return

_drawBarriers                     PUSH                                                          ; Main: proc drawBarriers

                                  LDI                               20
                                  STW                               _drawBarriers_x
                                  LDI                               90
                                  STW                               _drawBarriers_y             ; Main: x = BARRIER_X : y = BARRIER_Y

                                  LDI                               0
                                  STW                               _drawBarriers_i             ; Main: for i=0 to NUM_BARRIERS - 1

_next_0x0638                      LDI                               0
                                  STW                               spriteId
                                  LDW                               _drawBarriers_x
                                  ST                                spriteXY
                                  LDW                               _drawBarriers_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Barrier, x, y

                                  LDW                               _drawBarriers_x
                                  ADDI                              48
                                  STW                               _drawBarriers_x             ; Main: x = x + BARRIER_OFFSET

                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
                                  ForNextFarInc                     _drawBarriers_i _next_0x0638 2                                                                                              ; Main: next i

                                  Return                                                        ; Main: endproc

_checkInvaders                    PUSH                                                          ; Main: proc checkInvaders

                                  LDW                               _iexplode
                                  BEQ                               _endif_0x069c               ; Main: if &(iexplode)

                                  INC                               _itimer                     ; Main: inc itimer.lo

                                  LD                                _itimer
                                  XORI                              10
                                  JumpEQ                            _endif_0x069a 34            ; Main: if itimer.lo &= IEXPLODE_DELAY

                                  LDI                               17
                                  STW                               spriteId
                                  LD                                _iexplode
                                  ST                                spriteXY
                                  LD                                _iexplode + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, InvBlk, iexplode.lo, iexplode.hi

                                  LDI                               0
                                  ST                                _itimer
                                  STW                               _iexplode                   ; Main: itimer.lo = 0 : iexplode = itimer.lo

_endif_0x069a                     Return                                                        ; Main: return

_endif_0x069c                     LD                                _pbullet + 1
                                  XORI                              0
                                  BNE                               _else_0x06a9
                                  Return                                                        ; Main: if pbullet.hi &&= 0 then return

_else_0x06a9                      LD                                _pbxy + 1
                                  SUBI                              11
                                  STW                               0xe8
                                  LDW                               _iyorigin
                                  SUBW                              0xe8
                                  STW                               _checkInvaders_y            ; Main: y = iyorigin - (pbxy.hi - (8 + 3))

                                  LDW                               _checkInvaders_y
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
                                  BGE                               _else_0x06c4
                                  Return                                                        ; Main: if y &&< 0 then return

_else_0x06c4                      LD                                _pbxy
                                  SUBW                              _ixorigin
                                  STW                               _checkInvaders_x            ; Main: x = pbxy.lo - ixorigin

                                  LDW                               _checkInvaders_x
                                  BGE                               _else_0x06d9
                                  Return                                                        ; Main: if x &&< 0 then return

_else_0x06d9                      LDWI                              1024
                                  ADDW                              _checkInvaders_x
                                  PEEK                              
                                  STW                               _checkInvaders_i            ; Main: i = peek(DIVX + x)

                                  LDW                               _checkInvaders_i
                                  SUBI                              10
                                  BLT                               _else_0x06f4
                                  Return                                                        ; Main: if i &&>= INVADERS_I then return

_else_0x06f4                      LDWI                              1280
                                  ADDW                              _checkInvaders_y
                                  PEEK                              
                                  STW                               0xea
                                  LDI                               4
                                  SUBW                              0xea
                                  STW                               _checkInvaders_j            ; Main: j = (INVADERS_J - 1) - peek(DIVY + y)

                                  LDW                               _checkInvaders_j
                                  SUBI                              5
                                  BLT                               _else_0x0715
                                  Return                                                        ; Main: if j &&>= INVADERS_J then return

_else_0x0715                      LDW                               _checkInvaders_j
                                  BGE                               _else_0x0722
                                  Return                                                        ; Main: if j &&< 0 then return

_else_0x0722                      LDW                               _checkInvaders_j
                                  STW                               memIndex0
                                  LDW                               _checkInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x59a3
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  STW                               _checkInvaders_iaddr
                                  DEEK                              
                                  STW                               _checkInvaders_invader      ; Main: iaddr = iaddress(j, i) : invader = deek(iaddr)

                                  LD                                _checkInvaders_invader + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  XORI                              0
                                  BNE                               _else_0x0748
                                  Return                                                        ; Main: if invader.hi &&= 0 then return

_else_0x0748                      LDW                               _checkInvaders_iaddr
                                  ADDI                              1
                                  STW                               0xe8
                                  LDI                               0
                                  POKE                              0xe8                        ; Main: poke iaddr + 1, 0

                                  LDI                               0
                                  ST                                _pbullet                    ; Main: pbullet.lo = 0

                                  LDW                               _checkInvaders_iaddr
                                  ADDI                              4
                                  DEEK                              
                                  STW                               _checkInvaders_iprev        ; Main: iprev = deek(iaddr + 4)

                                  LDW                               _checkInvaders_iaddr
                                  ADDI                              6
                                  DEEK                              
                                  STW                               _checkInvaders_inext        ; Main: inext = deek(iaddr + 6)

                                  LDW                               _checkInvaders_iprev
                                  ADDI                              6
                                  STW                               0xe8
                                  LDW                               _checkInvaders_inext
                                  DOKE                              0xe8                        ; Main: doke iprev + 6, inext

                                  LDW                               _checkInvaders_inext
                                  ADDI                              4
                                  STW                               0xe8
                                  LDW                               _checkInvaders_iprev
                                  DOKE                              0xe8                        ; Main: doke inext + 4, iprev

                                  LDW                               _icurrent
                                  XORW                              _checkInvaders_iaddr
                                  BNE                               _else_0x0793
                                  LDW                               _checkInvaders_inext
                                  STW                               _icurrent                   ; Main: if icurrent &&= iaddr then icurrent = inext

_else_0x0793                      LDW                               _checkInvaders_j
                                  STW                               memIndex0
                                  LDW                               _checkInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  ADDI                              1
                                  PEEK                              
                                  STW                               _iscore                     ; Main: iscore = invaders(j, i).hi

                                  LDW                               _checkInvaders_j
                                  STLW                              0xFE
                                  LDWI                              _page_0x0da0
                                  CALL                              giga_vAC
_page_0x0da0                      LDLW                              0xFE
                                  STW                               memIndex0
                                  LDW                               _checkInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x8000
                                  ORW                               0xe8
                                  STW                               memValue
                                  LDW                               _checkInvaders_j
                                  STW                               memIndex0
                                  LDW                               _checkInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: invaders(j, i) = invaders(j, i) OR INVADER_DEAD

                                  LD                                _checkInvaders_invader
                                  ANDI                              128
                                  BEQ                               _else_0x07ef
                                  LDW                               _checkInvaders_iprev
                                  PEEK                              
                                  ORI                               128
                                  POKE                              _checkInvaders_iprev        ; Main: if &(invader.lo AND ILIST_END) then poke iprev, peek(iprev) OR ILIST_END

_else_0x07ef                      LDWI                              _erasePlayerBullet
                                  CALL                              giga_vAC                    ; Main: call erasePlayerBullet

                                  LDW                               _checkInvaders_i
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               0xea
                                  LDW                               _checkInvaders_i
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xea
                                  ADDW                              _ixorigin
                                  STW                               _checkInvaders_x            ; Main: x = ixorigin + ((i LSL 3) + (i LSL 2))  'x = ixorigin + i*INVADERS_X

                                  LDI                               4
                                  SUBW                              _checkInvaders_j
                                  STW                               _checkInvaders_j            ; Main: j = (INVADERS_J - 1) - j

                                  LDW                               _checkInvaders_j
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ea0
                                  CALL                              giga_vAC
_page_0x0ea0                      LDLW                              0xFE
                                  ADDW                              _checkInvaders_j
                                  ADDW                              _checkInvaders_j
                                  STW                               0xea
                                  LDW                               _iyorigin
                                  SUBW                              0xea
                                  STW                               _checkInvaders_y            ; Main: y = iyorigin - ((j LSL 3) + j + j)      'y = iyorigin - j*INVADERS_Y;

                                  LDW                               _xflip
                                  BLE                               _else_0x0852                ; Main: if xflip &&> 0

                                  LDI                               18
                                  STW                               spriteId
                                  LDW                               _checkInvaders_x
                                  ST                                spriteXY
                                  LDW                               _checkInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  BRA                               _endif_0x0865               ; Main: sprite NoFlip, IExplode, x, y

_else_0x0852                      LDI                               19
                                  STW                               spriteId
                                  LDW                               _checkInvaders_x
                                  ST                                spriteXY
                                  LDW                               _checkInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite FlipX, IExplode + 1, x, y

_endif_0x0865                     LDI                               0
                                  STW                               _itimer
                                  LD                                _checkInvaders_y
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              _checkInvaders_x
                                  STW                               _iexplode                   ; Main: itimer = 0 : iexplode = x + (y LSL 8)

                                  LDWI                              _disableShootSound
                                  CALL                              giga_vAC                    ; Main: gosub disableShootSound

                                  LDW                               _imarch
                                  STLW                              0xFE
                                  LDWI                              _page_0x0fa0
                                  CALL                              giga_vAC
_page_0x0fa0                      LDLW                              0xFE
                                  JumpFalse                         _endif_0x08a3 47            ; Main: if (imarch)

                                  LDI                               17
                                  STW                               spriteId
                                  LDW                               _checkInvaders_x
                                  ST                                spriteXY
                                  LDW                               _checkInvaders_y
                                  SUBI                              10
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, InvBlk, x, y - INVADERS_Y

_endif_0x08a3                     INC                               _ipbcount + 1               ; Main: inc ipbcount.hi

                                  Return                                                        ; Main: endproc

_playerExplode                    PUSH                                                          ; Main: proc playerExplode

                                  LDI                               0
                                  STW                               _ibindex                    ; Main: for ibindex=0 &to NUM_IBULLETS - 1

_next_0x08ac                      LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  DEEK                              
                                  STW                               _playerExplode_bxy          ; Main: bxy = ibxy(ibindex)

                                  LDW                               _playerExplode_bxy
                                  BEQ                               _else_0x08ce
                                  STW                               0xd8
                                  LDWI                              _eraseInvaderBullet
                                  CALL                              giga_vAC                    ; Main: if &(bxy) then call eraseInvaderBullet, bxy

_else_0x08ce                      LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr                     ; Main: ibxy(ibindex) = 0

                                  ForNextInc                        _ibindex _next_0x08ac 2     ; Main: next ibindex

                                  LDI                               0
                                  STW                               _playerExplode_t
                                  STLW                              0xFE
                                  LDWI                              _page_0x10a0
                                  CALL                              giga_vAC
_page_0x10a0                      LDLW                              0xFE
                                  STW                               _playerExplode_f            ; Main: t = 0 : f = t

                                  LDI                               63
                                  STW                               _playerExplode_v            ; Main: for v=63 downto 0

_next_0x08f8                      LDW                               _playerExplode_t
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              32160
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _playerExplode_f            ; Main: f = deek(PEF_LUT + (t LSL 1))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _playerExplode_f
                                  STW                               sndFrequency
                                  LDW                               _playerExplode_v
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 1, f, v, 0

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _playerExplode_f
                                  STW                               sndFrequency
                                  LDW                               _playerExplode_v
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, f, v, 0

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  LDW                               _playerExplode_f
                                  STW                               sndFrequency
                                  LDW                               _playerExplode_v
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 3, f, v, 0

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x11a0
                                  CALL                              giga_vAC
_page_0x11a0                      LDLW                              0xFE
                                  LDW                               _playerExplode_f
                                  STW                               sndFrequency
                                  LDW                               _playerExplode_v
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 4, f, v, 0

                                  INC                               _playerExplode_t            ; Main: inc t

                                  LDW                               _playerExplode_t
                                  XORI                              32
                                  BNE                               _else_0x0970
                                  LDI                               0
                                  STW                               _playerExplode_t            ; Main: if t &&= PEF_SIZ then t = 0

_else_0x0970                      LDW                               _playerExplode_v
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  ADDI                              20
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PExplode + ((v LSR 2) AND 1), px, py

                                  WaitVBlank                                                    ; Main: wait

                                  ForNextFarDecZero                 _playerExplode_v _next_0x08f8                                                                                               ; Main: next v

                                  SoundAllOff                                                   ; Main: sound off

                                  Return                                                        ; Main: endproc

                                  STLW                              0xFE
                                  LDWI                              _page_0x12a0
                                  CALL                              giga_vAC
_page_0x12a0                      LDLW                              0xFE
_drawInvaderBullets               PUSH                                                          ; Main: proc drawInvaderBullets

                                  LD                                _timeTicks + 1
                                  SUBI                              3
                                  BGE                               _else_0x09c2
                                  Return                                                        ; Main: if timeTicks.hi &&< 3 then return

_else_0x09c2                      LDI                               0
                                  STW                               _ibindex                    ; Main: for ibindex=0 to NUM_IBULLETS - 1

_next_0x09c6                      LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  DEEK                              
                                  STW                               _drawInvaderBullets_bxy     ; Main: bxy = ibxy(ibindex)

                                  LDW                               _drawInvaderBullets_bxy
                                  JumpFalse                         _else_0x0a67 54             ; Main: if (bxy)

                                  LDWI                              SYS_VDrawBits_134           ; Main: LDWI    SYS_VDrawBits_134
                                  STW                               giga_sysFn                  ; Main: STW     giga_sysFn
                                  LDWI                              0x3F00                      ; Main: LDWI    0x3F00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0

                                  LDW                               _drawInvaderBullets_bxy     ; Main: LDW     _drawInvaderBullets_bxy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4
                                  LDI                               0x1F                        ; Main: LDI     0x1F
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  INC                               _drawInvaderBullets_bxy + 1 ; Main: inc bxy.hi

                                  LD                                _drawInvaderBullets_bxy + 1
                                  SUBI                              121
                                  JumpGE                            _elseif_0x0a15 51           ; Main: if bxy.hi &>= 121

                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  LDI                               0
                                  STW                               _drawInvaderBullets_bxy
                                  LDWI                              _endif_0x0a62
                                  CALL                              giga_vAC                    ; Main: bxy = 0

_elseif_0x0a15                    LDWI                              1792
                                  STLW                              0xFE
                                  LDWI                              _page_0x13a0
                                  CALL                              giga_vAC
_page_0x13a0                      LDLW                              0xFE
                                  ADDW                              _drawInvaderBullets_bxy
                                  PEEK                              
                                  XORI                              12
                                  BNE                               _endif_0x0a62               ; Main: elseif peek(bxy + &h0700) &&= &h0C

                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  LD                                _drawInvaderBullets_bxy + 1
                                  SUBI                              114
                                  BLE                               _endif_0x0a59               ; Main: if bxy.hi &&> PLAYER_Y

                                  LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr                     ; Main: ibxy(ibindex) = 0

                                  LDWI                              _playerDied
                                  CALL                              giga_vAC                    ; Main: call playerDied

                                  Return                                                        ; Main: return

_endif_0x0a59                     LDWI                              _ismashBarrier
                                  CALL                              giga_vAC                    ; Main: gosub ismashBarrier

                                  LDI                               0
                                  STW                               _drawInvaderBullets_bxy     ; Main: bxy = 0

_endif_0x0a62                     LDWI                              _endif_0x0a70
                                  CALL                              giga_vAC                    ; Main: endif

_else_0x0a67                      LDW                               _drawInvaderBullets_bxy
                                  STW                               0xd8
                                  LDWI                              _getNextInvaderShot
                                  CALL                              giga_vAC                    ; Main: call getNextInvaderShot, bxy

_endif_0x0a70                     LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  STW                               memAddr
                                  LDW                               _drawInvaderBullets_bxy
                                  DOKE                              memAddr                     ; Main: ibxy(ibindex) = bxy

                                  STLW                              0xFE
                                  LDWI                              _page_0x14a0
                                  CALL                              giga_vAC
_page_0x14a0                      LDLW                              0xFE
                                  ForNextFarInc                     _ibindex _next_0x09c6 2     ; Main: next ibindex

                                  Return                                                        ; Main: endproc

_checkNextLevel                   PUSH                                                          ; Main: proc checkNextLevel

                                  LD                                _ipbcount + 1
                                  XORI                              50
                                  BNE                               _endif_0x0ae5               ; Main: if ipbcount.hi &&= (INVADERS_J * INVADERS_I)

                                  LDI                               0
                                  STW                               _icurrent
                                  STW                               _ishoot                     ; Main: icurrent = 0 : ishoot = icurrent

                                  LDW                               _iexplode
                                  XORI                              0
                                  BNE                               _endif_0x0ae5               ; Main: if iexplode &&= 0

                                  LDW                               _aviexplode
                                  XORI                              0
                                  BNE                               _endif_0x0ae5               ; Main: if aviexplode &&= 0

                                  LDI                               1
                                  ST                                _endgame                    ; Main: endgame.lo = 1

                                  INC                               _delayLevel                 ; Main: inc delayLevel.lo

                                  LD                                _delayLevel + 1
                                  SUBI                              1
                                  BLE                               _endif_0x0add               ; Main: if delayLevel.hi &&> 1

                                  LD                                _delayLevel + 1
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ST                                _delayLevel + 1             ; Main: delayLevel.hi = delayLevel.hi LSR 1

_endif_0x0add                     LD                                _livesLevel
                                  ADDI                              4
                                  ST                                _livesLevel                 ; Main: livesLevel.lo = livesLevel.lo + (INVADERS_H/2)

_endif_0x0ae5                     Return                                                        ; Main: endproc

_getNextInvaderShot               PUSH                                                          ; Main: proc getNextInvaderShot, bxy

                                  LDW                               _ishoot
                                  XORI                              0
                                  STLW                              0xFE
                                  LDWI                              _page_0x15a0
                                  CALL                              giga_vAC
_page_0x15a0                      LDLW                              0xFE
                                  JumpEQ                            _else_0x0afa 60
                                  Return                                                        ; Main: if ishoot &= 0 then return

_else_0x0afa                      LDW                               _ishoot
                                  ADDI                              6
                                  DEEK                              
                                  STW                               _ishoot                     ; Main: ishoot = deek(ishoot + 6)

                                  Rand                              
                                  STW                               0xe8
                                  LD                                _delayLevel + 1
                                  ANDW                              0xe8
                                  BEQ                               _endif_0x0b27               ; Main: if &(rnd(0) AND delayLevel.hi)

                                  LDI                               0
                                  STW                               _getNextInvaderShot_bxy     ; Main: bxy = 0

                                  Return                                                        ; Main: return

_endif_0x0b27                     LDW                               _ishoot
                                  PEEK                              
                                  ANDI                              15
                                  STW                               _getNextInvaderShot_i       ; Main: i = peek(ishoot) AND &h0F

                                  LDW                               _ishoot
                                  PEEK                              
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  ANDI                              7
                                  STW                               _getNextInvaderShot_j       ; Main: j = (peek(ishoot) LSR 4) AND &h07

                                  LDW                               _ishoot
                                  ADDI                              2
                                  DEEK                              
                                  STW                               _getNextInvaderShot_xy      ; Main: xy = deek(ishoot + 2)

                                  LDW                               _getNextInvaderShot_j
                                  XORI                              4
                                  JumpEQ                            _elseif_0x0bc6 63           ; Main: if j &= 4

                                  LDW                               _getNextInvaderShot_j
                                  STW                               memIndex0
                                  LDW                               _getNextInvaderShot_i
                                  STW                               memIndex1
                                  STLW                              0xFE
                                  LDWI                              _page_0x16a0
                                  CALL                              giga_vAC
_page_0x16a0                      LDLW                              0xFE
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x8000
                                  ANDW                              0xe8
                                  XORI                              0
                                  BNE                               _endif_0x0bc1               ; Main: if (invaders(j, i) AND INVADER_DEAD) &&= 0

                                  LDW                               _ixorigin
                                  STW                               0xe8
                                  LD                                _getNextInvaderShot_xy
                                  ADDW                              0xe8
                                  ADDI                              5
                                  STW                               0xe8
                                  LD                                _getNextInvaderShot_xy + 1
                                  STW                               register15
                                  LDW                               _iyorigin
                                  SUBW                              register15
                                  ADDI                              14
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               _getNextInvaderShot_bxy     ; Main: bxy = ixorigin + xy.lo + 5 + ((iyorigin - xy.hi + 14) LSL 8)

_endif_0x0bc1                     LDWI                              _endif_0x0c23
                                  CALL                              giga_vAC                    ; Main: endif

_elseif_0x0bc6                    LDW                               _getNextInvaderShot_j
                                  ADDI                              1
                                  STW                               memIndex0
                                  LDW                               _getNextInvaderShot_i
                                  STW                               memIndex1
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  STW                               0xea
                                  LDWI                              0x8000
                                  ANDW                              0xea
                                  STLW                              0xFE
                                  LDWI                              _page_0x17a0
                                  CALL                              giga_vAC
_page_0x17a0                      LDLW                              0xFE
                                  JumpFalse                         _endif_0x0c23 64            ; Main: elseif (invaders(j+1, i) AND INVADER_DEAD)

                                  LDW                               _ixorigin
                                  STW                               0xe8
                                  LD                                _getNextInvaderShot_xy
                                  ADDW                              0xe8
                                  ADDI                              5
                                  STW                               0xe8
                                  LD                                _getNextInvaderShot_xy + 1
                                  STW                               register15
                                  LDW                               _iyorigin
                                  SUBW                              register15
                                  ADDI                              14
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               _getNextInvaderShot_bxy     ; Main: bxy = ixorigin + xy.lo + 5 + ((iyorigin - xy.hi + 14) LSL 8)

_endif_0x0c23                     Return                                                        ; Main: endproc

_checkInvaderBullets              PUSH                                                          ; Main: proc checkInvaderBullets

                                  LDW                               _bexplode
                                  JumpFalse                         _endif_0x0c72 66            ; Main: if (bexplode)

                                  LDI                               22
                                  STW                               spriteId
                                  LD                                _bexplode
                                  ST                                spriteXY
                                  LD                                _bexplode + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, BExplode, bexplode.lo, bexplode.hi

                                  INC                               _btimer                     ; Main: inc btimer

                                  LDW                               _btimer
                                  XORI                              8
                                  STLW                              0xFE
                                  LDWI                              _page_0x18a0
                                  CALL                              giga_vAC
_page_0x18a0                      LDLW                              0xFE
                                  JumpEQ                            _endif_0x0c70 65            ; Main: if btimer &= BEXPLODE_DELAY

                                  LDI                               23
                                  STW                               spriteId
                                  LD                                _bexplode
                                  ST                                spriteXY
                                  LD                                _bexplode + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, BulBlk, bexplode.lo, bexplode.hi

                                  LDI                               0
                                  STW                               _btimer
                                  STW                               _bexplode                   ; Main: btimer = 0 : bexplode = btimer

_endif_0x0c70                     Return                                                        ; Main: return

_endif_0x0c72                     LDW                               _iexplode
                                  BEQ                               _else_0x0c7d
                                  Return                                                        ; Main: if &(iexplode) then return

_else_0x0c7d                      LD                                _pbullet + 1
                                  XORI                              0
                                  BNE                               _else_0x0c8a
                                  Return                                                        ; Main: if pbullet.hi &&= 0 then return

_else_0x0c8a                      LDWI                              -256
                                  ADDW                              _pbxy
                                  PEEK                              
                                  XORI                              63
                                  JumpEQ                            _endif_0x0d0a 71            ; Main: if peek(pbxy - &h0100) &= &h3F

                                  LDI                               0
                                  STW                               _ibindex                    ; Main: for ibindex=0 to NUM_IBULLETS - 1

_next_0x0caa                      LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  DEEK                              
                                  STW                               _checkInvaderBullets_bxy    ; Main: bxy = ibxy(ibindex)

                                  LDW                               _checkInvaderBullets_bxy
                                  STLW                              0xFE
                                  LDWI                              _page_0x19a0
                                  CALL                              giga_vAC
_page_0x19a0                      LDLW                              0xFE
                                  JumpFalse                         _endif_0x0cfc 70            ; Main: if (bxy)

                                  LD                                _checkInvaderBullets_bxy
                                  STW                               0xe8
                                  LD                                _pbxy
                                  XORW                              0xe8
                                  BNE                               _endif_0x0cfc               ; Main: if bxy.lo &&= pbxy.lo

                                  LDW                               _checkInvaderBullets_bxy
                                  STW                               0xd8
                                  LDWI                              _eraseInvaderBullet
                                  CALL                              giga_vAC                    ; Main: call eraseInvaderBullet, bxy

                                  LDWI                              0x6ea1
                                  ADDW                              _ibindex
                                  ADDW                              _ibindex
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr                     ; Main: ibxy(ibindex) = 0

                                  LDWI                              -2819
                                  ADDW                              _pbxy
                                  STW                               _bexplode                   ; Main: bexplode = pbxy - (3 + 11*256)

                                  Return                                                        ; Main: return

_endif_0x0cfc                     ForNextFarInc                     _ibindex _next_0x0caa 2     ; Main: next ibindex

_endif_0x0d0a                     Return                                                        ; Main: endproc

_checkPlayerBullet                PUSH                              
                                  LDW                               _pbxy
                                  PEEK                              
                                  XORI                              12
                                  JumpEQ                            _elseif_0x0d30 72           ; Main: if peek(pbxy) &= &h0C

                                  LDI                               0
                                  ST                                _pbullet                    ; Main: pbullet.lo = 0

                                  STLW                              0xFE
                                  LDWI                              _page_0x1aa0
                                  CALL                              giga_vAC
_page_0x1aa0                      LDLW                              0xFE
                                  LDWI                              _psmashBarrier
                                  CALL                              giga_vAC
                                  LDWI                              _endif_0x0d48
                                  CALL                              giga_vAC                    ; Main: gosub psmashBarrier

_elseif_0x0d30                    LDW                               _pbxy
                                  PEEK                              
                                  XORI                              3
                                  BNE                               _endif_0x0d48               ; Main: elseif peek(pbxy) &&= &h03

                                  LDI                               0
                                  ST                                _pbullet                    ; Main: pbullet.lo = 0

                                  LDI                               1
                                  STW                               _sexplode                   ; Main: sexplode = 1

_endif_0x0d48                     Return                                                        ; Main: return

_eraseInvaderBullet               PUSH                                                          ; Main: proc eraseInvaderBullet, xy

                                  LDWI                              SYS_VDrawBits_134           ; Main: LDWI    SYS_VDrawBits_134
                                  STW                               giga_sysFn                  ; Main: STW     giga_sysFn
                                  LDWI                              0x3F00                      ; Main: LDWI    0x3F00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0
                                  LDW                               _eraseInvaderBullet_xy      ; Main: LDW     _eraseInvaderBullet_xy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4
                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  Return                                                        ; Main: endproc

_erasePlayerBullet                PUSH                                                          ; Main: proc erasePlayerBullet

                                  LDWI                              SYS_VDrawBits_134           ; Main: LDWI    SYS_VDrawBits_134
                                  STW                               giga_sysFn                  ; Main: STW     giga_sysFn
                                  LDWI                              0x3F00                      ; Main: LDWI    0x3F00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0
                                  LDW                               _pbxy                       ; Main: LDW     _pbxy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4
                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  Return                                                        ; Main: endproc

_ismashBarrier                    PUSH                                                          ; Main: asm

                                  LDWI                              0x0C00                      ; Main: LDWI    0x0C00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0        'FGBG colour
                                  LDWI                              0x02FF                      ; Main: LDWI    0x02FF
                                  ADDW                              _drawInvaderBullets_bxy     ; Main: ADDW    _drawInvaderBullets_bxy
                                  STLW                              0xFE
                                  LDWI                              _page_0x1ba0
                                  CALL                              giga_vAC
_page_0x1ba0                      LDLW                              0xFE
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4        'offset
                                  LD                                giga_rand0                  ; Main: LD      giga_rand0
                                  ANDI                              0x03                        ; Main: ANDI    0x03
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'left damage
                                  INC                               giga_sysArg4                ; Main: INC     giga_sysArg4
                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'center damage
                                  INC                               giga_sysArg4                ; Main: INC     giga_sysArg4
                                  LD                                giga_rand2                  ; Main: LD      giga_rand2
                                  ANDI                              0x03                        ; Main: ANDI    0x03
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'right damage

                                  Return                                                        ; Main: return

_eraseInvaderEdge                 PUSH                                                          ; Main: proc eraseInvaderEdge, x, y

                                  LDWI                              SYS_VDrawBits_134           ; Main: LDWI    SYS_VDrawBits_134
                                  STW                               giga_sysFn                  ; Main: STW     giga_sysFn              'setup SYS function
                                  LDWI                              0x0000                      ; Main: LDWI    0x0000
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0            'FGBG colour
                                  LD                                _eraseInvaderEdge_x         ; Main: LD      _eraseInvaderEdge_x
                                  SUBI                              1                           ; Main: SUBI    1                       'x - 1 to account for extra pixel when marching by 3
                                  ST                                register0                   ; Main: ST      register0
                                  LD                                _eraseInvaderEdge_y         ; Main: LD      _eraseInvaderEdge_y
                                  ADDI                              8                           ; Main: ADDI    8
                                  ST                                register0+1                 ; Main: ST      register0 + 1
                                  LDW                               register0                   ; Main: LDW     register0
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4            'addr = x + ((y + 8) LSL 8)
                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  Return                                                        ; Main: endproc

_gameOver                         PUSH                                                          ; Main: proc gameOver

                                  LDI                               1
                                  ST                                _endgame + 1                ; Main: endgame.hi = 1

                                  LDWI                              _playerExplode
                                  CALL                              giga_vAC                    ; Main: call playerExplode

                                  Return                                                        ; Main: endproc

_playerDied                       PUSH                                                          ; Main: proc playerDied

                                  LD                                _livesLevel + 1
                                  SUBI                              1
                                  ST                                _livesLevel + 1             ; Main: livesLevel.hi = livesLevel.hi - 1

                                  STLW                              0xFE
                                  LDWI                              _page_0x1ca0
                                  CALL                              giga_vAC
_page_0x1ca0                      LDLW                              0xFE
                                  LDWI                              _drawLives
                                  CALL                              giga_vAC                    ; Main: call drawLives

                                  LDWI                              _playerExplode
                                  CALL                              giga_vAC                    ; Main: call playerExplode

                                  LD                                _livesLevel + 1
                                  XORI                              0
                                  BNE                               _else_0x0df2
                                  LDI                               1
                                  ST                                _endgame + 1                ; Main: if livesLevel.hi &&= 0 then endgame.hi = 1

_else_0x0df2                      Return                                                        ; Main: endproc

_updateScore                      PUSH                                                          ; Main: proc updateScore

                                  LDW                               _iscore
                                  XORI                              0
                                  BNE                               _else_0x0e02
                                  Return                                                        ; Main: if iscore &&= 0 then return

_else_0x0e02                      LDWI                              29111
                                  STW                               bcdDstAddr
                                  LDW                               _iscore
                                  SUBI                              1
                                  STW                               0xe8
                                  LDWI                              30113
                                  ADDW                              0xe8
                                  PEEK                              
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, peek(@iscores + (iscore - 1))

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC                    ; Main: call drawScore

                                  LDI                               0
                                  STW                               _iscore                     ; Main: iscore = 0

                                  Return                                                        ; Main: endproc

_updateTime                       PUSH                                                          ; Main: proc updateTime

                                  INC                               _timeTicks                  ; Main: inc timeTicks.lo

                                  LD                                _timeTicks
                                  XORI                              60
                                  BNE                               _endif_0x0e41               ; Main: if timeTicks.lo &&= 60

                                  LDI                               0
                                  ST                                _timeTicks                  ; Main: timeTicks.lo = 0

                                  INC                               _timeTicks + 1              ; Main: inc timeTicks.hi

_endif_0x0e41                     Return                                                        ; Main: endproc

                                  STLW                              0xFE
                                  LDWI                              _page_0x1da0
                                  CALL                              giga_vAC
_page_0x1da0                      LDLW                              0xFE
_updateSaucer                     PUSH                                                          ; Main: proc updateSaucer

                                  LDW                               _iyorigin
                                  XORI                              56
                                  BNE                               _else_0x0e51
                                  Return                                                        ; Main: if iyorigin &&= IORIGIN_Y then return

_else_0x0e51                      LDW                               _sexplode
                                  BEQ                               _endif_0x0e9b               ; Main: if &(sexplode)

                                  LDI                               0
                                  ST                                _pbullet                    ; Main: pbullet.lo = 0

                                  LD                                _saucerxy
                                  ST                                _stimer                     ; Main: stimer.lo = saucerxy.lo

                                  LD                                _ipbcount
                                  ANDI                              15
                                  STW                               memIndex0
                                  LDWI                              0x58a4
                                  ADDW                              memIndex0
                                  ADDW                              memIndex0
                                  DEEK                              
                                  STW                               _updateSaucer_spoints       ; Main: spoints = sscores(ipbcount.lo AND (NUM_SSCORES - 1))

                                  LDWI                              29111
                                  STW                               bcdDstAddr
                                  LDW                               _updateSaucer_spoints
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, spoints

                                  LDWI                              31648
                                  STW                               bcdDstAddr
                                  LDW                               _updateSaucer_spoints
                                  BcdInt                                                        ; Main: bcdint @saucerBCD, spoints

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC                    ; Main: call drawScore

                                  Return                                                        ; Main: return

_endif_0x0e9b                     LD                                _timeTicks
                                  ANDI                              1
                                  BEQ                               _else_0x0eac
                                  Return                                                        ; Main: if &(timeTicks.lo AND 1) then return

_else_0x0eac                      LD                                _timeTicks + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x1ea0
                                  CALL                              giga_vAC
_page_0x1ea0                      LDLW                              0xFE
                                  SUBI                              28
                                  BLT                               _endif_0x0eea               ; Main: if timeTicks.hi &&>= SAUCER_DELAY

                                  LDI                               3
                                  ST                                _timeTicks + 1              ; Main: timeTicks.hi = 3 'set seconds counter so that bullets are updated

                                  LD                                _ipbcount
                                  ANDI                              1
                                  STW                               _updateSaucer_odd           ; Main: odd = ipbcount.lo AND 1

                                  LDWI                              0x7ec8
                                  ADDW                              _updateSaucer_odd
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              2304
                                  ADDW                              0xe8
                                  STW                               _saucerxy                   ; Main: saucerxy = (SAUCER_YPOS*256) + saucerx(odd)

                                  LDW                               _updateSaucer_odd
                                  BEQ                               _endif_0x0eea
                                  LDWI                              0x8000
                                  ORW                               _saucerxy
                                  STW                               _saucerxy                   ; Main: if &(odd) then saucerxy = saucerxy OR &h8000

_endif_0x0eea                     LDW                               _stimer
                                  JumpFalse                         _endif_0x0fae 87            ; Main: if (stimer)

                                  LD                                _stimer + 1
                                  SUBI                              15
                                  JumpLT                            _endif_0x0f4a 84            ; Main: if stimer.hi &< SEXPLODE_DELAY

                                  LD                                _timeTicks
                                  STW                               mathShift
                                  ShiftRight2bit                    
                                  ANDI                              1
                                  JumpFalse                         _else_0x0f37 82             ; Main: if ((timeTicks.lo LSR 2) AND 1)

                                  LDI                               37
                                  STLW                              0xFE
                                  LDWI                              _page_0x1fa0
                                  CALL                              giga_vAC
_page_0x1fa0                      LDLW                              0xFE
                                  STW                               spriteId
                                  LD                                _stimer
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                        
                                  LDWI                              _endif_0x0f4a
                                  CALL                              giga_vAC                    ; Main: sprite NoFlip, SExplode + 0, stimer.lo, SAUCER_YPOS

_else_0x0f37                      LDI                               38
                                  STW                               spriteId
                                  LD                                _stimer
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, SExplode + 1, stimer.lo, SAUCER_YPOS

_endif_0x0f4a                     INC                               _stimer + 1                 ; Main: inc stimer.hi

                                  LD                                _stimer + 1
                                  XORI                              15
                                  JumpEQ                            _elseif_0x0f8c 85           ; Main: if stimer.hi &= SEXPLODE_DELAY

                                  LD                                _stimer
                                  ADDI                              3
                                  STW                               0xe8
                                  LDWI                              2560
                                  ADDW                              0xe8
                                  STW                               _updateSaucer_xy            ; Main: xy = stimer.lo + 3 + (256*(SAUCER_YPOS + 1))

                                  LDI                               39
                                  STW                               spriteId
                                  LD                                _stimer
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x20a0
                                  CALL                              giga_vAC
_page_0x20a0                      LDLW                              0xFE
                                  DrawSprite                                                    ; Main: sprite NoFlip, SauBlk, stimer.lo, SAUCER_YPOS

                                  LDW                               _updateSaucer_xy
                                  STW                               0xd8
                                  LDWI                              _drawSaucerScore
                                  CALL                              giga_vAC
                                  LDWI                              _endif_0x0fae
                                  CALL                              giga_vAC                    ; Main: call drawSaucerScore, xy

_elseif_0x0f8c                    LD                                _stimer + 1
                                  XORI                              45
                                  BNE                               _endif_0x0fae               ; Main: elseif stimer.hi &&= (SEXPLODE_DELAY + SEXPLODE_DELAY + SEXPLODE_DELAY)

                                  LDI                               39
                                  STW                               spriteId
                                  LD                                _stimer
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, SauBlk, stimer.lo, SAUCER_YPOS

                                  LDI                               0
                                  STW                               _stimer                     ; Main: stimer = 0

_endif_0x0fae                     LDW                               _saucerxy
                                  XORI                              0
                                  BNE                               _else_0x0fbb
                                  Return                                                        ; Main: if saucerxy &&= 0 then return

_else_0x0fbb                      LDWI                              0x7fff
                                  ANDW                              _saucerxy
                                  STW                               _updateSaucer_xy            ; Main: xy = saucerxy AND &h7FFF

                                  LDWI                              0x8000
                                  ANDW                              _saucerxy
                                  STW                               _updateSaucer_odd           ; Main: odd = saucerxy AND &h8000

                                  LD                                _saucerxy
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              3
                                  STW                               _updateSaucer_i             ; Main: i = (saucerxy.lo LSR 1) AND 3

                                  STLW                              0xFE
                                  LDWI                              _page_0x21a0
                                  CALL                              giga_vAC
_page_0x21a0                      LDLW                              0xFE
                                  LDW                               _updateSaucer_i
                                  XORI                              3
                                  BNE                               _else_0x0fef
                                  LDI                               0
                                  STW                               _updateSaucer_i             ; Main: if i &&= 3 then i = 0

_else_0x0fef                      LD                                _updateSaucer_xy + 1
                                  ADDI                              3
                                  STW                               _updateSaucer_sy            ; Main: sy = xy.hi + 3

                                  LDW                               _updateSaucer_odd
                                  JumpFalse                         _else_0x1070 91             ; Main: if (odd)

                                  LDI                               1
                                  STW                               spriteId
                                  LD                                _updateSaucer_xy
                                  ST                                spriteXY
                                  LD                                _updateSaucer_xy + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Saucer + 0, xy.lo, xy.hi

                                  LDI                               2
                                  SUBW                              _updateSaucer_i
                                  ADDI                              50
                                  STW                               spriteId
                                  LD                                _updateSaucer_xy
                                  ST                                spriteXY
                                  LDW                               _updateSaucer_sy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, SaucerStripLt + (2 - i), xy.lo, sy

                                  LD                                _saucerxy
                                  SUBI                              1
                                  ST                                _saucerxy                   ; Main: saucerxy.lo = saucerxy.lo - 1

                                  LD                                _saucerxy
                                  XORI                              0
                                  STLW                              0xFE
                                  LDWI                              _page_0x22a0
                                  CALL                              giga_vAC
_page_0x22a0                      LDLW                              0xFE
                                  JumpEQ                            _endif_0x106b 90            ; Main: if saucerxy.lo &= SAUCER_XSTART

                                  LDI                               0
                                  STW                               _saucerxy                   ; Main: saucerxy = 0

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 4

                                  LDI                               39
                                  STW                               spriteId
                                  LDI                               0
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, SauBlk, SAUCER_XSTART, SAUCER_YPOS

_endif_0x106b                     LDWI                              _endif_0x10ce
                                  CALL                              giga_vAC                    ; Main: endif

_else_0x1070                      LDI                               2
                                  STW                               spriteId
                                  LD                                _updateSaucer_xy
                                  ST                                spriteXY
                                  LD                                _updateSaucer_xy + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite FlipX, Saucer + 1, xy.lo, xy.hi

                                  LDI                               53
                                  ADDW                              _updateSaucer_i
                                  STW                               spriteId
                                  LD                                _updateSaucer_xy
                                  ST                                spriteXY
                                  LDW                               _updateSaucer_sy
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite FlipX, SaucerStripRt + i, xy.lo, sy

                                  STLW                              0xFE
                                  LDWI                              _page_0x23a0
                                  CALL                              giga_vAC
_page_0x23a0                      LDLW                              0xFE
                                  INC                               _saucerxy                   ; Main: inc saucerxy.lo

                                  LD                                _saucerxy
                                  SUBI                              141
                                  JumpGT                            _endif_0x10ce 92            ; Main: if saucerxy.lo &> SAUCER_XEND

                                  LDI                               0
                                  STW                               _saucerxy                   ; Main: saucerxy = 0

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 4

                                  LDI                               39
                                  STW                               spriteId
                                  LDI                               141
                                  ST                                spriteXY
                                  LDI                               9
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, SauBlk, SAUCER_XEND, SAUCER_YPOS

_endif_0x10ce                     Return                                                        ; Main: endproc

_updateAudio                      PUSH                                                          ; Main: proc updateAudio

                                  LDI                               255
                                  ST                                giga_soundTimer             ; Main: set SOUND_TIMER, 255

                                  LD                                _ipbcount + 1
                                  STW                               register15
                                  LDI                               49
                                  SUBW                              register15
                                  ADDI                              3
                                  STW                               _updateAudio_i              ; Main: i = (INVADERS_J * INVADERS_I - 1) - ipbcount.hi + 3

                                  LD                                _audmarch
                                  XORI                              0
                                  JumpEQ                            _elseif_0x1134 94           ; Main: if audmarch.lo &= 0

                                  LD                                _audmarch + 1
                                  ANDI                              3
                                  STW                               0xe8
                                  LDWI                              29856
                                  STLW                              0xFE
                                  LDWI                              _page_0x24a0
                                  CALL                              giga_vAC
_page_0x24a0                      LDLW                              0xFE
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               musicNote
                                  GetMidiNote                       
                                  STW                               _updateAudio_n              ; Main: n = get("MIDI_NOTE", peek(@inotes + (audmarch.hi AND 3)))

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  LDW                               _updateAudio_n
                                  STW                               sndFrequency
                                  LDI                               63
                                  STW                               sndVolume
                                  LDI                               3
                                  STW                               sndWaveType
                                  SoundOnV                          
                                  LDWI                              _endif_0x115d
                                  CALL                              giga_vAC                    ; Main: sound on, 1, n, 63, 3

_elseif_0x1134                    LDW                               _updateAudio_i
                                  SUBI                              1
                                  STW                               intSrcA
                                  LDI                               4
                                  IntMin                            
                                  STW                               0xea
                                  LD                                _audmarch
                                  XORW                              0xea
                                  BNE                               _endif_0x115d               ; Main: elseif audmarch.lo &&= min(i - 1, 4)

                                  LDI                               1
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 1

_endif_0x115d                     LD                                _audmarch
                                  SUBW                              _updateAudio_i
                                  JumpGE                            _else_0x1178 96             ; Main: if audmarch.lo &>= i

                                  LDI                               0
                                  STLW                              0xFE
                                  LDWI                              _page_0x25a0
                                  CALL                              giga_vAC
_page_0x25a0                      LDLW                              0xFE
                                  ST                                _audmarch                   ; Main: audmarch.lo = 0

                                  INC                               _audmarch + 1
                                  LDWI                              _endif_0x117a
                                  CALL                              giga_vAC                    ; Main: inc audmarch.hi

_else_0x1178                      INC                               _audmarch                   ; Main: inc audmarch.lo

_endif_0x117a                     LD                                _audshoot + 1
                                  JumpFalse                         _endif_0x11ea 99            ; Main: if (audshoot.hi)

                                  LD                                _audshoot
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              32672
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               _updateAudio_n              ; Main: n = deek(PBF_LUT + (audshoot.lo LSL 1))

                                  LDWI                              32736
                                  STW                               0xe8
                                  LD                                _audshoot
                                  ADDW                              0xe8
                                  PEEK                              
                                  STW                               _updateAudio_v              ; Main: v = peek(PBV_LUT + audshoot.lo)

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LDW                               _updateAudio_n
                                  STW                               sndFrequency
                                  LDW                               _updateAudio_v
                                  STW                               sndVolume
                                  LDI                               3
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, n, v, 3

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  LDW                               _updateAudio_n
                                  STW                               sndFrequency
                                  LDW                               _updateAudio_v
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  STLW                              0xFE
                                  LDWI                              _page_0x26a0
                                  CALL                              giga_vAC
_page_0x26a0                      LDLW                              0xFE
                                  SoundOnV                                                      ; Main: sound on, 3, n, v, 0

                                  INC                               _audshoot                   ; Main: inc audshoot.lo

                                  LD                                _audshoot
                                  XORI                              32
                                  JumpEQ                            _endif_0x11ea 98            ; Main: if audshoot.lo &= PBL_SIZ

                                  LDWI                              _disableShootSound
                                  CALL                              giga_vAC                    ; Main: gosub disableShootSound

_endif_0x11ea                     LDW                               _saucerxy
                                  ORW                               _sefreq
                                  JumpFalse                         _endif_0x12c9 105           ; Main: if (saucerxy OR sefreq)

                                  LDW                               _satimer
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              32416
                                  ADDW                              0xea
                                  DEEK                              
                                  SUBW                              _sefreq
                                  STW                               _updateAudio_n              ; Main: n = deek(SCF_LUT + (satimer LSL 1)) - sefreq

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  LDW                               _updateAudio_n
                                  STW                               sndFrequency
                                  LDI                               32
                                  STW                               sndVolume
                                  LDI                               2
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 4, n, 32, 2

                                  INC                               _satimer                    ; Main: inc satimer

                                  LDW                               _satimer
                                  XORI                              12
                                  JumpEQ                            _else_0x123e 100
                                  STLW                              0xFE
                                  LDWI                              _page_0x27a0
                                  CALL                              giga_vAC
_page_0x27a0                      LDLW                              0xFE
                                  LDI                               0
                                  STW                               _satimer                    ; Main: if satimer &= SCF_SIZ then satimer = 0

_else_0x123e                      LDW                               _sexplode
                                  JumpFalse                         _endif_0x1254 101           ; Main: if (sexplode)

                                  LDI                               1
                                  STW                               _sefreq                     ; Main: sefreq = 1

                                  LDI                               0
                                  STW                               _sexplode
                                  STW                               _saucerxy                   ; Main: sexplode = 0 : saucerxy = sexplode

_endif_0x1254                     LDW                               _sefreq
                                  JumpFalse                         _endif_0x12c9 104           ; Main: if (sefreq)

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  LDW                               _updateAudio_n
                                  STW                               mathShift
                                  ShiftRight4bit                    
                                  STW                               sndFrequency
                                  LDW                               _sevol
                                  STW                               sndVolume
                                  LDI                               0
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 3, n LSR 4, sevol, 0

                                  LDW                               _satimer
                                  XORI                              0
                                  JumpEQ                            _endif_0x12c9 103           ; Main: if satimer &= 0

                                  LDWI                              600
                                  ADDW                              _sefreq
                                  STW                               _sefreq                     ; Main: sefreq = sefreq + 600

                                  LDW                               _sevol
                                  SUBI                              15
                                  STLW                              0xFE
                                  LDWI                              _page_0x28a0
                                  CALL                              giga_vAC
_page_0x28a0                      LDLW                              0xFE
                                  STW                               _sevol                      ; Main: sevol = sevol - 15

                                  LDW                               _sevol
                                  JumpLE                            _endif_0x12c9 102           ; Main: if sevol &<= 0

                                  LDI                               60
                                  STW                               _sevol                      ; Main: sevol = 60

                                  LDI                               0
                                  STW                               _sefreq                     ; Main: sefreq = 0

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 3

                                  LDI                               4
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 4

_endif_0x12c9                     LDW                               _iexplode
                                  ORW                               _aviexplode
                                  JumpFalse                         _endif_0x1346 108           ; Main: if (iexplode OR aviexplode)

                                  LDI                               63
                                  SUBW                              _aviexplode
                                  STW                               _updateAudio_v              ; Main: v = 63 - aviexplode

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  LD                                _itimer + 1
                                  LSLW                              
                                  STW                               0xea
                                  LDWI                              32448
                                  ADDW                              0xea
                                  DEEK                              
                                  STW                               sndFrequency
                                  LDW                               _updateAudio_v
                                  STW                               sndVolume
                                  LDI                               3
                                  STW                               sndWaveType
                                  SoundOnV                                                      ; Main: sound on, 2, deek(IEF_LUT + (itimer.hi LSL 1)), v, 3

                                  STLW                              0xFE
                                  LDWI                              _page_0x29a0
                                  CALL                              giga_vAC
_page_0x29a0                      LDLW                              0xFE
                                  INC                               _itimer + 1                 ; Main: inc itimer.hi

                                  LD                                _itimer + 1
                                  XORI                              3
                                  JumpEQ                            _else_0x131d 106
                                  LDI                               0
                                  ST                                _itimer + 1                 ; Main: if itimer.hi &= IEF_SIZ then itimer.hi = 0

_else_0x131d                      LDW                               _aviexplode
                                  ADDI                              2
                                  STW                               _aviexplode                 ; Main: aviexplode = aviexplode + 2

                                  LDW                               _aviexplode
                                  SUBI                              64
                                  JumpGE                            _endif_0x1346 107           ; Main: if aviexplode &>= 64

                                  LDI                               0
                                  ST                                _itimer + 1
                                  STW                               _aviexplode                 ; Main: itimer.hi = 0 : aviexplode = itimer.hi

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 2

_endif_0x1346                     Return                                                        ; Main: endproc

_disableShootSound                PUSH                              
                                  LDI                               0
                                  STW                               _audshoot                   ; Main: audshoot = 0

                                  LDI                               2
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 2

                                  LDI                               3
                                  ST                                sndChannel + 1
                                  SoundOff                                                      ; Main: sound off, 3

                                  Return                                                        ; Main: return

_drawScore                        PUSH                                                          ; Main: proc drawScore

                                  LDWI                              29111
                                  STW                               bcdSrcAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x2aa0
                                  CALL                              giga_vAC
_page_0x2aa0                      LDLW                              0xFE
                                  LDWI                              29117
                                  STW                               bcdDstAddr
                                  LDI                               6
                                  BcdAdd                                                        ; Main: bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                                  LDI                               31
                                  STW                               _drawScore_char             ; Main: char = SCORE_X

                                  LDI                               0
                                  STW                               _drawScore_i                ; Main: for i=0 to SCORE_LEN-1

_next_0x137d                      LDWI                              29122
                                  SUBW                              _drawScore_i
                                  PEEK                              
                                  ADDI                              26
                                  STW                               spriteId
                                  LDW                               _drawScore_char
                                  ST                                spriteXY
                                  LDI                               1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), char, SCORE_Y

                                  LDW                               _drawScore_char
                                  ADDI                              6
                                  STW                               _drawScore_char             ; Main: char = char + 6

                                  ForNextFarInc                     _drawScore_i _next_0x137d 5 ; Main: next i

                                  LDWI                              0x71c2
                                  STW                               bcdSrcAddr
                                  LDWI                              0x7de5
                                  STW                               bcdDstAddr
                                  LDI                               6
                                  BcdCmp                            
                                  STLW                              0xFE
                                  LDWI                              _page_0x2ba0
                                  CALL                              giga_vAC
_page_0x2ba0                      LDLW                              0xFE
                                  XORI                              1
                                  JumpEQ                            _endif_0x13f5 109           ; Main: if bcdcmp(@scoreBCD+(SCORE_LEN-1), @highBCD+(SCORE_LEN-1), SCORE_LEN) &= 1

                                  LDWI                              29117
                                  STW                               bcdSrcAddr
                                  LDWI                              32224
                                  STW                               bcdDstAddr
                                  LDI                               6
                                  BcdCpy                                                        ; Main: bcdcpy @scoreBCD, @highBCD, SCORE_LEN

                                  LDWI                              _drawHigh
                                  CALL                              giga_vAC                    ; Main: call drawHigh

_endif_0x13f5                     Return                                                        ; Main: endproc

_drawHigh                         PUSH                                                          ; Main: proc drawHigh

                                  LDI                               97
                                  STW                               _drawHigh_char              ; Main: char = HIGH_X

                                  LDI                               0
                                  STW                               _drawHigh_i                 ; Main: for i=0 to SCORE_LEN-1

_next_0x1400                      LDWI                              32229
                                  SUBW                              _drawHigh_i
                                  PEEK                              
                                  ADDI                              26
                                  STW                               spriteId
                                  LDW                               _drawHigh_char
                                  ST                                spriteXY
                                  LDI                               1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@highBCD + SCORE_LEN-1 - i), char, HIGH_Y

                                  LDW                               _drawHigh_char
                                  ADDI                              6
                                  STW                               _drawHigh_char              ; Main: char = char + 6

                                  STLW                              0xFE
                                  LDWI                              _page_0x2ca0
                                  CALL                              giga_vAC
_page_0x2ca0                      LDLW                              0xFE
                                  ForNextFarInc                     _drawHigh_i _next_0x1400 5  ; Main: next i

                                  Return                                                        ; Main: endproc

_drawLevel                        PUSH                                                          ; Main: proc drawLevel

                                  LDI                               36
                                  STW                               spriteId
                                  LDI                               2
                                  ST                                spriteXY
                                  LDI                               1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Level, LEVEL_X, LEVEL_Y

                                  LDI                               8
                                  STW                               _drawLevel_char             ; Main: char = LEVEL_X + 6

                                  LDI                               0
                                  STW                               _drawLevel_i                ; Main: for i=0 to LEVEL_LEN-4

_next_0x1459                      LDWI                              31905
                                  SUBW                              _drawLevel_i
                                  PEEK                              
                                  ADDI                              26
                                  STW                               spriteId
                                  LDW                               _drawLevel_char
                                  ST                                spriteXY
                                  LDI                               1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Digit + peek(@levelBCD + LEVEL_LEN-4 - i), char, LEVEL_Y

                                  LDW                               _drawLevel_char
                                  ADDI                              6
                                  STW                               _drawLevel_char             ; Main: char = char + 6

                                  STLW                              0xFE
                                  LDWI                              _page_0x2da0
                                  CALL                              giga_vAC
_page_0x2da0                      LDLW                              0xFE
                                  ForNextFarInc                     _drawLevel_i _next_0x1459 1 ; Main: next i

                                  Return                                                        ; Main: endproc

_drawSaucerScore                  PUSH                                                          ; Main: proc drawSaucerScore, xy

                                  LDW                               _drawSaucerScore_xy
                                  STW                               _drawSaucerScore_char       ; Main: char = xy

                                  LDI                               0
                                  STW                               _drawSaucerScore_i          ; Main: for i=0 to SAUCER_LEN-3

_next_0x149f                      LDWI                              31650
                                  SUBW                              _drawSaucerScore_i
                                  PEEK                              
                                  ADDI                              40
                                  STW                               spriteId
                                  LD                                _drawSaucerScore_char
                                  ST                                spriteXY
                                  LD                                _drawSaucerScore_char + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, DigitS + peek(@saucerBCD + SAUCER_LEN-3 - i), char.lo, char.hi

                                  LD                                _drawSaucerScore_char
                                  ADDI                              4
                                  ST                                _drawSaucerScore_char       ; Main: char.lo = char.lo + 4

                                  ForNextFarInc                     _drawSaucerScore_i _next_0x149f 2                                                                                           ; Main: next i

                                  Return                                                        ; Main: endproc

_drawLives                        PUSH                                                          ; Main: proc drawLives

                                  LDI                               1
                                  STW                               _drawLives_i                ; Main: i = 1

                                  LDI                               136
                                  STW                               _drawLives_plife            ; Main: plife = LIFE_X

_while_0x14e5                     LD                                _livesLevel + 1
                                  STW                               register15
                                  STLW                              0xFE
                                  LDWI                              _page_0x2ea0
                                  CALL                              giga_vAC
_page_0x2ea0                      LDLW                              0xFE
                                  LDW                               _drawLives_i
                                  SUBW                              register15
                                  JumpLE                            _while_0x151f 110           ; Main: while i &<= livesLevel.hi

                                  LDI                               24
                                  STW                               spriteId
                                  LDW                               _drawLives_plife
                                  ST                                spriteXY
                                  LDI                               4
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PLife, plife, LIFE_Y

                                  LDW                               _drawLives_plife
                                  ADDI                              8
                                  STW                               _drawLives_plife            ; Main: plife = plife + 8

                                  INC                               _drawLives_i                ; Main: inc i

                                  LDWI                              _while_0x14e5
                                  CALL                              giga_vAC                    ; Main: wend

_while_0x151f                     LDW                               _drawLives_i
                                  SUBI                              3
                                  JumpLE                            _wend_0x1551 111            ; Main: while i &<= MAX_LIVES

                                  LDI                               25
                                  STW                               spriteId
                                  LDW                               _drawLives_plife
                                  ST                                spriteXY
                                  LDI                               4
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, PBlk, plife, LIFE_Y

                                  LDW                               _drawLives_plife
                                  ADDI                              8
                                  STW                               _drawLives_plife            ; Main: plife = plife + 8

                                  INC                               _drawLives_i                ; Main: inc i

                                  LDWI                              _while_0x151f
                                  STLW                              0xFE
                                  LDWI                              _page_0x2fa0
                                  CALL                              giga_vAC
_page_0x2fa0                      LDLW                              0xFE
                                  CALL                              giga_vAC                    ; Main: wend

_wend_0x1551                      Return                                                        ; Main: endproc

_initInvaders                     PUSH                                                          ; Main: proc initInvaders

                                  LDI                               0
                                  STW                               _initInvaders_index
                                  STW                               _initInvaders_iprev
                                  STW                               _initInvaders_inext         ; Main: index = 0 : iprev = index : inext = iprev

                                  LDI                               4
                                  STW                               _initInvaders_j             ; Main: for j=INVADERS_J - 1 downto 0

_next_0x1564                      LDI                               0
                                  STW                               _initInvaders_i             ; Main: for i=0 to INVADERS_I - 1

_next_0x1568                      LDW                               _initInvaders_index
                                  XORI                              0
                                  JumpEQ                            _else_0x1582 112            ; Main: if index &= 0

                                  LDWI                              23202
                                  STW                               _initInvaders_iprev
                                  LDWI                              _endif_0x159d
                                  CALL                              giga_vAC                    ; Main: iprev = @istruct(INVADERS_J * INVADERS_I - 1, 0)

_else_0x1582                      LDW                               _initInvaders_index
                                  SUBI                              1
                                  STW                               memIndex0
                                  LDI                               0
                                  STW                               memIndex1
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  STW                               _initInvaders_iprev         ; Main: iprev = addr(istruct(index - 1, 0))

_endif_0x159d                     LDW                               _initInvaders_index
                                  XORI                              49
                                  JumpEQ                            _else_0x15b7 114            ; Main: if index &= (INVADERS_J * INVADERS_I) - 1

                                  LDWI                              28327
                                  STW                               _initInvaders_inext
                                  LDWI                              _endif_0x15d2
                                  CALL                              giga_vAC                    ; Main: inext = @istruct(0, 0)

_else_0x15b7                      LDW                               _initInvaders_index
                                  ADDI                              1
                                  STLW                              0xFE
                                  LDWI                              _page_0x30a0
                                  CALL                              giga_vAC
_page_0x30a0                      LDLW                              0xFE
                                  STW                               memIndex0
                                  LDI                               0
                                  STW                               memIndex1
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  STW                               _initInvaders_inext         ; Main: inext = addr(istruct(index + 1, 0))

_endif_0x15d2                     LDW                               _initInvaders_index
                                  STW                               memIndex0
                                  LDI                               0
                                  STW                               memIndex1
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  STW                               memValue
                                  LDW                               _initInvaders_j
                                  STW                               memIndex0
                                  LDW                               _initInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x59a3
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: iaddress(j, i) = addr(istruct(index, 0))

                                  LDW                               _initInvaders_j
                                  STW                               memIndex0
                                  LDW                               _initInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7fff
                                  ANDW                              0xe8
                                  STW                               _initInvaders_invader       ; Main: invader = invaders(j, i) AND &h7FFF

                                  LDW                               _initInvaders_invader
                                  STW                               memValue
                                  LDW                               _initInvaders_j
                                  STW                               memIndex0
                                  LDW                               _initInvaders_i
                                  STW                               memIndex1
                                  LDWI                              0x70a5
                                  CALL                              convert16Arr2dAddr
                                  STLW                              0xFE
                                  LDWI                              _page_0x31a0
                                  CALL                              giga_vAC
_page_0x31a0                      LDLW                              0xFE
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: invaders(j, i) = invader

                                  LDW                               _initInvaders_j
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  ANDI                              112
                                  STW                               0xea
                                  LD                                _initInvaders_invader
                                  ORW                               0xea
                                  STW                               0xe8
                                  LDW                               _initInvaders_i
                                  ANDI                              15
                                  ORW                               0xe8
                                  ST                                _initInvaders_invader       ; Main: invader.lo = invader.lo OR ((j LSL 4) AND &h70) OR (i AND &h0F)

                                  LDW                               _initInvaders_invader
                                  STW                               memValue
                                  LDW                               _initInvaders_index
                                  STW                               memIndex0
                                  LDI                               0
                                  STW                               memIndex1
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: istruct(index, 0) = invader

                                  LDWI                              0x6fa5
                                  ADDW                              _initInvaders_i
                                  PEEK                              
                                  STW                               0xe8
                                  LDWI                              0x7aa0
                                  ADDW                              _initInvaders_j
                                  PEEK                              
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               memValue
                                  LDW                               _initInvaders_index
                                  STW                               memIndex0
                                  LDI                               1
                                  STW                               memIndex1
                                  STLW                              0xFE
                                  LDWI                              _page_0x32a0
                                  CALL                              giga_vAC
_page_0x32a0                      LDLW                              0xFE
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: istruct(index, 1) = ixpos(i) + (iypos(j) LSL 8)

                                  LDW                               _initInvaders_iprev
                                  STW                               memValue
                                  LDW                               _initInvaders_index
                                  STW                               memIndex0
                                  LDI                               2
                                  STW                               memIndex1
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: istruct(index, 2) = iprev

                                  LDW                               _initInvaders_inext
                                  STW                               memValue
                                  LDW                               _initInvaders_index
                                  STW                               memIndex0
                                  LDI                               3
                                  STW                               memIndex1
                                  LDWI                              0x062c
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: istruct(index, 3) = inext

                                  INC                               _initInvaders_index         ; Main: inc index

                                  ForNextFarInc                     _initInvaders_i _next_0x1568 9                                                                                              ; Main: next i

                                  ForNextFarDecZero                 _initInvaders_j _next_0x1564                                                                                                ; Main: next j

                                  LDI                               0
                                  STW                               _initInvaders_i             ; Main: for i=0 to NUM_IBULLETS - 1

                                  STLW                              0xFE
                                  LDWI                              _page_0x33a0
                                  CALL                              giga_vAC
_page_0x33a0                      LDLW                              0xFE
_next_0x16e4                      LDWI                              0x6ea1
                                  ADDW                              _initInvaders_i
                                  ADDW                              _initInvaders_i
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr                     ; Main: ibxy(i) = 0

                                  ForNextFarInc                     _initInvaders_i _next_0x16e4 2                                                                                              ; Main: next i

                                  LDWI                              28327
                                  STW                               _icurrent                   ; Main: icurrent = @istruct(0, 0)

                                  LDW                               _icurrent
                                  STW                               _ishoot                     ; Main: ishoot = icurrent

                                  Return                                                        ; Main: endproc

_initVars                         PUSH                                                          ; Main: proc initVars

                                  LDI                               0x4a
                                  STW                               varAddress
                                  ResetVars                                                     ; Main: init vars @timeTicks

                                  Return                                                        ; Main: endproc

_startLevel                       PUSH                                                          ; Main: proc startLevel

                                  SoundAllOff                                                   ; Main: sound off

                                  LDWI                              29111
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 0

                                  LDWI                              31648
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @saucerBCD, 0

                                  STLW                              0xFE
                                  LDWI                              _page_0x34a0
                                  CALL                              giga_vAC
_page_0x34a0                      LDLW                              0xFE
                                  LDWI                              31904
                                  STW                               bcdDstAddr
                                  LD                                _delayLevel
                                  BcdInt                                                        ; Main: bcdint @levelBCD, delayLevel.lo

                                  LDI                               0
                                  STW                               _ii
                                  LDI                               4
                                  STW                               _jj                         ; Main: ii = 0 : jj = INVADERS_J - 1

                                  LDI                               2
                                  STW                               _iflip
                                  STW                               _xflip                      ; Main: iflip = 2 : xflip = iflip

                                  LD                                _livesLevel
                                  SUBI                              24
                                  JumpGT                            _else_0x1772 116
                                  LDI                               0
                                  ST                                _livesLevel                 ; Main: if livesLevel.lo &> LEVEL_X6 then livesLevel.lo = 0

_else_0x1772                      LDI                               1
                                  STW                               _ixorigin
                                  LDI                               56
                                  STW                               0xe8
                                  LD                                _livesLevel
                                  ADDW                              0xe8
                                  STW                               _iyorigin                   ; Main: ixorigin = IORIGIN_X : iyorigin = IORIGIN_Y + livesLevel.lo

                                  ClearVertBlinds                                               ; Main: cls

                                  LDWI                              _drawScore
                                  CALL                              giga_vAC                    ; Main: call drawScore

                                  LDWI                              _drawHigh
                                  CALL                              giga_vAC                    ; Main: call drawHigh

                                  LDWI                              _drawLives
                                  CALL                              giga_vAC                    ; Main: call drawLives

                                  LDWI                              _drawLevel
                                  CALL                              giga_vAC                    ; Main: call drawLevel

                                  LDWI                              _drawBarriers
                                  STLW                              0xFE
                                  LDWI                              _page_0x35a0
                                  CALL                              giga_vAC
_page_0x35a0                      LDLW                              0xFE
                                  CALL                              giga_vAC                    ; Main: call drawBarriers

                                  LDWI                              _initInvaders
                                  CALL                              giga_vAC                    ; Main: call initInvaders

                                  LD                                _delayLevel
                                  SUBI                              100
                                  BLT                               _else_0x17b7                ; Main: if delayLevel.lo &&>= 100

                                  LDWI                              _easterEgg
                                  CALL                              giga_vAC
                                  BRA                               _endif_0x17bc               ; Main: call easterEgg

_else_0x17b7                      LDWI                              _uneasterEgg
                                  CALL                              giga_vAC                    ; Main: call uneasterEgg

_endif_0x17bc                     Return                                                        ; Main: endproc

_resetLevel                       PUSH                                                          ; Main: proc resetLevel

                                  LDWI                              768
                                  STW                               _livesLevel                 ; Main: livesLevel = 3*256 + 0

                                  LDWI                              7936
                                  STW                               _delayLevel                 ; Main: delayLevel = 31*256 + 0

                                  LDWI                              29117
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @scoreBCD, 0

                                  LDI                               60
                                  STW                               _sevol                      ; Main: sevol = 60

                                  LDI                               1
                                  STW                               _px
                                  LDI                               114
                                  STW                               _py                         ; Main: px = PLAYER_X : py = PLAYER_Y

                                  LDWI                              _uneasterEgg
                                  CALL                              giga_vAC                    ; Main: call uneasterEgg

                                  Return                                                        ; Main: endproc

_initSystem                       PUSH                                                          ; Main: proc initSystem

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDI                               2
                                  STW                               graphicsMode
                                  STLW                              0xFE
                                  LDWI                              _page_0x36a0
                                  CALL                              giga_vAC
_page_0x36a0                      LDLW                              0xFE
                                  ScanlineMode                                                  ; Main: mode 2

                                  LDI                               0
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, 0

                                  Return                                                        ; Main: endproc

_easterEgg                        PUSH                                                          ; Main: proc easterEgg

                                  LDI                               127
                                  STW                               _easterEgg_vaddr            ; Main: vaddr = &h7F

                                  LDWI                              256
                                  STW                               _easterEgg_vtable
                                  LDWI                              494
                                  STW                               0xb0
                                  LDI                               2
                                  STW                               0xb2                        ; Main: for vtable=&h0100 to &h01EE step 2

_next_0x181b                      LDW                               _easterEgg_vaddr
                                  POKE                              _easterEgg_vtable           ; Main: poke vtable, vaddr

                                  LDW                               _easterEgg_vaddr
                                  SUBI                              1
                                  STW                               _easterEgg_vaddr            ; Main: dec vaddr

                                  ForNextFarVarAdd                  _easterEgg_vtable _next_0x181b 0xb0 0xb2                                                                                    ; Main: next vtable

                                  Return                                                        ; Main: endproc

_uneasterEgg                      PUSH                                                          ; Main: proc uneasterEgg

                                  LDI                               8
                                  STW                               _uneasterEgg_vaddr          ; Main: vaddr = &h08

                                  LDWI                              256
                                  STW                               _uneasterEgg_vtable
                                  LDWI                              494
                                  STW                               0xb0
                                  LDI                               2
                                  STW                               0xb2                        ; Main: for vtable=&h0100 to &h01EE step 2

_next_0x184a                      LDW                               _uneasterEgg_vaddr
                                  POKE                              _uneasterEgg_vtable         ; Main: poke vtable, vaddr

                                  INC                               _uneasterEgg_vaddr          ; Main: inc vaddr

                                  STLW                              0xFE
                                  LDWI                              _page_0x37a0
                                  CALL                              giga_vAC
_page_0x37a0                      LDLW                              0xFE
                                  ForNextFarVarAdd                  _uneasterEgg_vtable _next_0x184a 0xb0 0xb2                                                                                  ; Main: next vtable

                                  Return                                                        ; Main: endproc

_waitScanline                     PUSH                                                          ; Main: proc waitScanline

_repeat_0x1863                    LD                                giga_videoY
                                  ANDI                              1
                                  BEQ                               _repeat_0x1863              ; Main: until &(get("VIDEO_Y") AND 1)

                                  Return                                                        ; Main: endproc

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x4fa8
convert16Arr2d                    EQU     0x4dcc
resetVars                         EQU     0x4ea2
integerMin                        EQU     0x4df2
rand16bit                         EQU     0x4fa0
shiftRight1bit                    EQU     0x4daa
shiftRight2bit                    EQU     0x4da0
shiftRight4bit                    EQU     0x4cf5
scanlineMode                      EQU     0x4ceb
waitVBlank                        EQU     0x4dc0
resetVideoFlags                   EQU     0x4db4
initClearFuncs                    EQU     0x4eb2
clearVertBlinds                   EQU     0x51c9
drawSprite_                       EQU     0x51a1
drawSprite                        EQU     0x4de5
drawSpriteX                       EQU     0x4dd8
midiGetNote                       EQU     0x52a2
soundAllOff                       EQU     0x4ee9
soundOff                          EQU     0x4ce2
soundOnV                          EQU     0x50a4
bcdAdd                            EQU     0x50cc
bcdInt                            EQU     0x52bb
bcdDigits                         EQU     0x4fbf
bcdCmp                            EQU     0x4fdb
bcdCmpExt                         EQU     0x4ed6
bcdCpy                            EQU     0x4ec3
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert16Arr2d      ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVars           LDI     0
                    DOKE    varAddress
                    INC     varAddress
                    INC     varAddress
                    LD      varAddress
                    XORI    giga_One                        ; end of user vars
                    BNE     resetVars
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


integerMin          LDW     intSrcA
                    SUBW    intSrcB
                    BLE     integerMi_A
                    LDW     intSrcB
                    RET

integerMi_A         LDW     intSrcA
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite_         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawS_loop          LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     drawS_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    BRA     drawS_loop
                    
drawS_exit          POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


midiGetNote         LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     musicPtr
                    LD      musicNote
                    LSLW
                    ADDW    musicPtr
                    STW     musicPtr
                    LUP     0x00                            ; get ROM note low byte
                    ;LSLW                                    ; left shift low byte as SOUND command expects
                    ST      musicNote                       ; a non system internal frequency
                    LDW     musicPtr
                    LUP     0x01                            ; get ROM note high byte
                    ST      musicNote + 1
                    LDW     musicNote                       ; this is needed for GET("MIDI_NOTE")
                    RET


soundAllOff         LDWI    0x01FC
                    STW     sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel 0
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 1
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 2
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 3
                    RET


soundOff            LDI     0xFC
                    ST      sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel
                    RET


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET


bcdAdd              LDI     0
                    STW     bcdCarry
                    
bcdA_loop           LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                  ; no handling of values > 9
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKE    bcdDstAddr          ; modifies dst bcd value
                    INC     bcdDstAddr
                    INC     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdA_loop
                    RET



                    ; create a bcd value from a +ve int, (max 42767)
bcdInt              PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          ; bcdDstAddr must point to >= 5 digit bcd value
                    LDI     0
                    STW     bcdDigit
                    LDWI    10000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDWI    1000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     100
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     10
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LD      bcdValue
                    POKE    bcdDstAddr
                    POP
                    RET


bcdDigits           LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            ; calculate digit
                    BRA     bcdD_index
    
bcdD_cont           LD      bcdDigit
                    POKE    bcdDstAddr                          ; store digit
                    LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDI     0
                    ST      bcdDigit                            ; reset digit
                    
bcdD_exit           RET



bcdCmp              LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    SUBW    bcdDstData
                    BGT     bcdC_gt
                    BLT     bcdC_lt
                    PUSH
                    LDWI    bcdCmpExt
                    CALL    giga_vAC
                    POP
                    BGT     bcdCmp
                    LDI     0
                    RET

bcdC_gt             LDI     1
                    RET
                    
bcdC_lt             LDWI    -1
                    RET                    


bcdCmpExt           LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDW     bcdSrcAddr
                    SUBI    1
                    STW     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    RET


bcdCpy              LDW     bcdSrcAddr
                    PEEK
                    POKE    bcdDstAddr
                    INC     bcdSrcAddr
                    INC     bcdDstAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdCpy
                    RET

