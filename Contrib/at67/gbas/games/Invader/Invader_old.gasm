_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_reset                            EQU                               0x022a
_start                            EQU                               0x022f
_init                             EQU                               0x0234
_playerBullet                     EQU                               0x035d
_smashBarrier                     EQU                               0x05e1
_repeat_0x022f                    EQU                               0x0239
_else_0x0251                      EQU                               0x0257
_endif_0x0273                     EQU                               0x0275
_drawPlayerBullet                 EQU                               0x0277
_else_0x0281                      EQU                               0x027f
_else_0x0294                      EQU                               0x028a
_endif_0x02b2                     EQU                               0x02a0
_endif_0x02e7                     EQU                               0x02cb
_endif_0x02e9                     EQU                               0x02cd
_drawPlayer                       EQU                               0x02d9
_page_0x0300                      EQU                               0x0300
_else_0x0318                      EQU                               0x030c
_endif_0x032b                     EQU                               0x031f
_handleInput                      EQU                               0x0321
_else_0x034e                      EQU                               0x0334
_else_0x0362                      EQU                               0x0340
_endif_0x038d                     EQU                               0x0357
_else_0x039f                      EQU                               0x0365
_else_0x03d3                      EQU                               0x038b
_endif_0x03f7                     EQU                               0x03a5
_movePlayer                       EQU                               0x03a7
_endif_0x0421                     EQU                               0x03c3
_else_0x0423                      EQU                               0x03c5
_endif_0x0438                     EQU                               0x03d6
_initVars                         EQU                               0x03d8
_startLevel                       EQU                               0x03e4
_page_0x0400                      EQU                               0x0400
_drawInvaders                     EQU                               0x0404
_repeat_0x0463                    EQU                               0x040c
_endif_0x04cf                     EQU                               0x044e
_else_0x0512                      EQU                               0x0481
_endif_0x0548                     EQU                               0x04ab
_endif_0x056a                     EQU                               0x04c5
_elseif_0x057c                    EQU                               0x04d3
_endif_0x058b                     EQU                               0x04de
_page_0x05a0                      EQU                               0x05a0
_else_0x05bf                      EQU                               0x05b4
_else_0x05dc                      EQU                               0x05cb
_endif_0x05e4                     EQU                               0x05d1
_endif_0x05e8                     EQU                               0x05d5
_page_0x0678                      EQU                               0x0678
_drawBarriers                     EQU                               0x068c
_next_0x062a                      EQU                               0x0699
_checkInvaders                    EQU                               0x06bd
_endif_0x0682                     EQU                               0x06e5
_endif_0x0684                     EQU                               0x06e7
_else_0x0697                      EQU                               0x06f2
_page_0x08a0                      EQU                               0x08a0
_else_0x06b2                      EQU                               0x08af
_else_0x06c7                      EQU                               0x08bc
_else_0x06e2                      EQU                               0x08cd
_else_0x0703                      EQU                               0x08e4
_else_0x0710                      EQU                               0x08eb
_page_0x09a0                      EQU                               0x09a0
_else_0x0744                      EQU                               0x09ae
_page_0x0aa0                      EQU                               0x0aa0
_else_0x07b2                      EQU                               0x0aac
_endif_0x07c5                     EQU                               0x0abf
_endif_0x07fd                     EQU                               0x0ae9
_endif_0x080e                     EQU                               0x0af6
_page_0x0ba0                      EQU                               0x0ba0
_resetLevel                       EQU                               0x0ba2
_next_0x0815                      EQU                               0x0ba7
_next_0x0819                      EQU                               0x0bab
_page_0x0ca0                      EQU                               0x0ca0
_initSystem                       EQU                               0x0cc3

; Global Variables
_livesLevel                       EQU                               0x0030
_px                               EQU                               0x0032
_py                               EQU                               0x0034
_ixorigin                         EQU                               0x0036
_iyorigin                         EQU                               0x0038
_ii                               EQU                               0x003a
_jj                               EQU                               0x003c
_xflip                            EQU                               0x003e
_iflip                            EQU                               0x0040
_timeTicks                        EQU                               0x0042
_pflip                            EQU                               0x0044
_imarch                           EQU                               0x0046
_gameOver                         EQU                               0x0048
_pbxy                             EQU                               0x004a
_pbullet                          EQU                               0x004c
_icount                           EQU                               0x004e
_iexplode                         EQU                               0x0050
_itimer                           EQU                               0x0052
_buttonPrev                       EQU                               0x0054

; Local Variables
_handleInput_button               EQU                               0x00d8
_drawInvaders_x                   EQU                               0x00d8
_drawInvaders_y                   EQU                               0x00da
_drawInvaders_invader             EQU                               0x00dc
_drawBarriers_i                   EQU                               0x00d8
_drawBarriers_x                   EQU                               0x00da
_drawBarriers_y                   EQU                               0x00dc
_checkInvaders_i                  EQU                               0x00d8
_checkInvaders_j                  EQU                               0x00da
_checkInvaders_x                  EQU                               0x00dc
_checkInvaders_y                  EQU                               0x00de
_checkInvaders_iaddr              EQU                               0x00e0
_resetLevel_i                     EQU                               0x00d8
_resetLevel_j                     EQU                               0x00da

; Arrays
_highBCD_array                    EQU                               0x7eb2
_highBCD_array                    DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD_array                   EQU                               0x7eab
_scoreBCD_array                   DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD_array                  EQU                               0x7ea4
_pointsBCD_array                  DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_invaders_array                   EQU                               0x7aa0
_invaders_array                   DW                                0x79a2 0x78af 0x77af 0x76af 0x75af 
_invaders_0x79a2                  EQU                               0x79a2
_invaders_0x79a2                  DW                                0x0001 0x0001 0x0001 0x0001 0x0001 0x0001 0x0001 0x0001 0x0001 0x0001 
_invaders_0x78af                  EQU                               0x78af
_invaders_0x78af                  DW                                0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 
_invaders_0x77af                  EQU                               0x77af
_invaders_0x77af                  DW                                0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 0x0101 
_invaders_0x76af                  EQU                               0x76af
_invaders_0x76af                  DW                                0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 
_invaders_0x75af                  EQU                               0x75af
_invaders_0x75af                  DW                                0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 0x0201 
_iaddress_array                   EQU                               0x78a5
_iaddress_array                   DW                                0x79a2 0x78af 0x77af 0x76af 0x75af 
_iypos_array                      EQU                               0x7fa0
_iypos_array                      DB                                0x28 0x1e 0x14 0x0a 0x00 
_ixpos_array                      EQU                               0x77a5
_ixpos_array                      DB                                0x00 0x0c 0x18 0x24 0x30 0x3c 0x48 0x54 0x60 0x6c 
_irsprites_array                  EQU                               0x7ea1
_irsprites_array                  DB                                0x0f 0x0b 0x07 
_ilsprites_array                  EQU                               0x7da2
_ilsprites_array                  DB                                0x0d 0x09 0x05 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x0500                  EQU                               0x0500
def_bytes_0x0500                  DB                                0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 
def_bytes_0x0600                  EQU                               0x0600
def_bytes_0x0600                  DB                                0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites
def_sprites_0x7fa5                EQU                               0x7fa5
def_sprites_0x7fa5                DB                                0 0 0 0 12 12 0 0 0 12 12 12 0 0 12 12 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 255 
def_sprites_0x7ef9                EQU                               0x7ef9
def_sprites_0x7ef9                DB                                12 12 12 12 12 12 255 
def_sprites_0x7da5                EQU                               0x7da5
def_sprites_0x7da5                DB                                12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 0 0 0 0 12 0 0 0 0 0 255 
def_sprites_0x7ef2                EQU                               0x7ef2
def_sprites_0x7ef2                DB                                0 0 0 0 0 0 255 
def_sprites_0x7ca5                EQU                               0x7ca5
def_sprites_0x7ca5                DB                                12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 0 0 0 0 12 12 0 0 0 0 0 12 255 
def_sprites_0x7eeb                EQU                               0x7eeb
def_sprites_0x7eeb                DB                                0 0 0 0 0 0 255 
def_sprites_0x7ba5                EQU                               0x7ba5
def_sprites_0x7ba5                DB                                12 12 0 0 0 0 12 12 12 0 0 0 12 12 12 12 0 0 12 12 12 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 255 
def_sprites_0x7ee4                EQU                               0x7ee4
def_sprites_0x7ee4                DB                                12 12 12 12 12 12 255 
def_sprites_0x7eb9                EQU                               0x7eb9
def_sprites_0x7eb9                DB                                0 0 0 0 0 3 0 0 0 3 3 3 0 0 3 3 3 3 0 3 3 0 3 3 3 3 3 3 3 3 0 0 3 3 3 0 0 0 0 3 0 0 249 
def_sprites_0x7ad5                EQU                               0x7ad5
def_sprites_0x7ad5                DB                                3 3 3 3 3 0 3 3 3 3 3 3 3 3 3 3 3 3 0 3 3 0 3 3 3 3 3 3 3 3 0 3 3 0 0 3 0 0 0 0 0 0 249 
def_sprites_0x7aaa                EQU                               0x7aaa
def_sprites_0x7aaa                DB                                0 0 0 0 0 0 3 0 0 0 0 0 3 3 0 0 0 0 0 3 3 0 0 0 3 3 3 3 0 0 3 3 0 0 0 0 3 0 0 0 0 0 249 
def_sprites_0x79db                EQU                               0x79db
def_sprites_0x79db                DB                                0 0 0 0 0 12 0 0 0 0 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 250 
def_sprites_0x79b6                EQU                               0x79b6
def_sprites_0x79b6                DB                                0 0 0 0 0 0 12 0 0 0 0 0 12 12 12 12 0 0 12 12 12 12 12 0 12 12 12 12 12 0 12 12 12 12 12 0 250 
def_sprites_0x78c3                EQU                               0x78c3
def_sprites_0x78c3                DB                                0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 0 0 63 63 63 0 0 63 63 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x77c3                EQU                               0x77c3
def_sprites_0x77c3                DB                                63 0 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 0 63 63 0 0 63 63 63 63 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x76c3                EQU                               0x76c3
def_sprites_0x76c3                DB                                0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 0 63 63 63 63 0 63 63 0 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x75c3                EQU                               0x75c3
def_sprites_0x75c3                DB                                63 0 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 0 63 63 0 0 63 63 63 63 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x74c3                EQU                               0x74c3
def_sprites_0x74c3                DB                                0 0 63 0 0 0 63 0 0 63 0 0 63 0 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x73c3                EQU                               0x73c3
def_sprites_0x73c3                DB                                0 63 0 0 0 0 63 0 0 63 0 0 63 63 0 63 0 0 0 63 63 63 0 0 63 63 63 63 0 0 63 63 63 0 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x72c3                EQU                               0x72c3
def_sprites_0x72c3                DB                                0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 63 63 63 0 63 63 0 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x71c3                EQU                               0x71c3
def_sprites_0x71c3                DB                                0 63 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 63 0 0 63 63 0 63 0 0 0 63 0 63 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x70c3                EQU                               0x70c3
def_sprites_0x70c3                DB                                0 0 0 0 63 63 0 0 0 63 63 63 0 0 63 63 63 63 0 63 63 0 63 63 0 63 63 63 63 63 0 0 0 63 0 0 0 0 63 0 63 63 0 63 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6fc3                EQU                               0x6fc3
def_sprites_0x6fc3                DB                                0 0 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6ec3                EQU                               0x6ec3
def_sprites_0x6ec3                DB                                0 0 0 0 63 63 0 0 0 63 63 63 0 0 63 63 63 63 0 63 63 0 63 63 0 63 63 63 63 63 0 0 63 0 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6dc3                EQU                               0x6dc3
def_sprites_0x6dc3                DB                                0 0 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6cc3                EQU                               0x6cc3
def_sprites_0x6cc3                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6bc3                EQU                               0x6bc3
def_sprites_0x6bc3                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_sprites_0x6ac3                EQU                               0x6ac3
def_sprites_0x6ac3                DB                                0 0 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 63 0 0 63 63 0 0 0 0 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 246 
def_sprites_0x69c3                EQU                               0x69c3
def_sprites_0x69c3                DB                                0 0 63 0 0 0 0 63 0 0 63 0 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 63 63 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 0 0 0 246 

; Define Fonts

; Lookup Tables
_spriteLut_0x74a1                 EQU                               0x74a1
_spriteLut_0x74a1                 DW                                0x7fa5 0x0000 0x7ef9 0x0f00 0x7da5 0x0006 0x7ef2 0x0f06 0x7ca5 0x000c 0x7eeb 0x0f0c 0x7ba5 0x0012 0x7ee4 0x0f12 0x0000
_spriteLut_0x76a1                 EQU                               0x76a1
_spriteLut_0x76a1                 DW                                0x7eb9 0x0000 0x7ad5 0x0006 0x7aaa 0x000c 0x0000
_spriteLut_0x75a1                 EQU                               0x75a1
_spriteLut_0x75a1                 DW                                0x7eb9 0x000c 0x7ad5 0x0006 0x7aaa 0x0000 0x0000
_spriteLut_0x73b9                 EQU                               0x73b9
_spriteLut_0x73b9                 DW                                0x79db 0x0000 0x79b6 0x0006 0x0000
_spriteLut_0x73af                 EQU                               0x73af
_spriteLut_0x73af                 DW                                0x79db 0x0006 0x79b6 0x0000 0x0000
_spriteLut_0x73a5                 EQU                               0x73a5
_spriteLut_0x73a5                 DW                                0x78c3 0x0000 0x77c3 0x0006 0x0000
_spriteLut_0x72b9                 EQU                               0x72b9
_spriteLut_0x72b9                 DW                                0x76c3 0x0000 0x75c3 0x0006 0x0000
_spriteLut_0x72af                 EQU                               0x72af
_spriteLut_0x72af                 DW                                0x78c3 0x0006 0x77c3 0x0000 0x0000
_spriteLut_0x72a5                 EQU                               0x72a5
_spriteLut_0x72a5                 DW                                0x76c3 0x0006 0x75c3 0x0000 0x0000
_spriteLut_0x71b9                 EQU                               0x71b9
_spriteLut_0x71b9                 DW                                0x74c3 0x0000 0x73c3 0x0006 0x0000
_spriteLut_0x71af                 EQU                               0x71af
_spriteLut_0x71af                 DW                                0x72c3 0x0000 0x71c3 0x0006 0x0000
_spriteLut_0x71a5                 EQU                               0x71a5
_spriteLut_0x71a5                 DW                                0x74c3 0x0006 0x73c3 0x0000 0x0000
_spriteLut_0x70b9                 EQU                               0x70b9
_spriteLut_0x70b9                 DW                                0x72c3 0x0006 0x71c3 0x0000 0x0000
_spriteLut_0x70af                 EQU                               0x70af
_spriteLut_0x70af                 DW                                0x70c3 0x0000 0x6fc3 0x0006 0x0000
_spriteLut_0x70a5                 EQU                               0x70a5
_spriteLut_0x70a5                 DW                                0x6ec3 0x0000 0x6dc3 0x0006 0x0000
_spriteLut_0x6fb9                 EQU                               0x6fb9
_spriteLut_0x6fb9                 DW                                0x70c3 0x0006 0x6fc3 0x0000 0x0000
_spriteLut_0x6faf                 EQU                               0x6faf
_spriteLut_0x6faf                 DW                                0x6ec3 0x0006 0x6dc3 0x0000 0x0000
_spriteLut_0x6fa5                 EQU                               0x6fa5
_spriteLut_0x6fa5                 DW                                0x6cc3 0x0000 0x6bc3 0x0006 0x0000
_spriteLut_0x6eb9                 EQU                               0x6eb9
_spriteLut_0x6eb9                 DW                                0x6ac3 0x0000 0x69c3 0x0006 0x0000
_spriteLut_0x6eaf                 EQU                               0x6eaf
_spriteLut_0x6eaf                 DW                                0x6ac3 0x0006 0x69c3 0x0000 0x0000
_spritesLut_                      EQU                               0x68d8
_spritesLut_                      DW                                0x74a1 0x76a1 0x75a1 0x73b9 0x73af 0x73a5 0x72b9 0x72af 0x72a5 0x71b9 0x71af 0x71a5 0x70b9 0x70af 0x70a5 0x6fb9 0x6faf 0x6fa5 0x6eb9 0x6eaf 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                        
                                  InitEqOp                        
                                  Init16Array2d                                                 ; Main: INIT

                                  LDWI                              _initSystem
                                  CALL                              giga_vAC                    ; Main: call initSystem

_reset                            LDWI                              _resetLevel
                                  CALL                              giga_vAC                    ; Main: call resetLevel

_start                            LDWI                              _startLevel
                                  CALL                              giga_vAC                    ; Main: call startLevel

_init                             LDWI                              _initVars
                                  CALL                              giga_vAC                    ; Main: call initVars

_repeat_0x022f                    WaitVBlank                                                    ; Main: wait

                                  LDWI                              _checkInvaders
                                  CALL                              giga_vAC                    ; Main: call checkInvaders

                                  LDWI                              _drawPlayerBullet
                                  CALL                              giga_vAC                    ; Main: call drawPlayerBullet

                                  LDWI                              _drawInvaders
                                  CALL                              giga_vAC                    ; Main: call drawInvaders

                                  LDW                               _gameOver
                                  BEQ                               _else_0x0251
                                  LDWI                              _reset
                                  CALL                              giga_vAC                    ; Main: if &(gameOver) then goto reset

_else_0x0251                      LDWI                              _handleInput
                                  CALL                              giga_vAC                    ; Main: call handleInput

                                  LDWI                              _drawPlayer
                                  CALL                              giga_vAC                    ; Main: call drawPlayer

                                  LDWI                              _movePlayer
                                  CALL                              giga_vAC                    ; Main: call movePlayer

                                  INC                               _timeTicks                  ; Main: inc timeTicks.lo

                                  LD                                _timeTicks
                                  XORI                              60
                                  BNE                               _endif_0x0273               ; Main: if timeTicks.lo &&= 60

                                  LDI                               0
                                  ST                                _timeTicks                  ; Main: timeTicks.lo = 0

                                  INC                               _timeTicks + 1              ; Main: inc timeTicks.hi

_endif_0x0273                     BRA                               _repeat_0x022f              ; Main: &forever

_drawPlayerBullet                 PUSH                                                          ; Main: proc drawPlayerBullet

                                  LDW                               _iexplode
                                  BEQ                               _else_0x0281
                                  Return                                                        ; Main: if &(iexplode) then return

_else_0x0281                      LD                                _pbullet + 1
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  BEQ                               _else_0x0294
                                  Return                                                        ; Main: if &(pbullet.hi = 0) then return

_else_0x0294                      LDWI                              SYS_VDrawBits_134           ; Main: LDWI    SYS_VDrawBits_134
                                  STW                               giga_sysFn                  ; Main: STW     giga_sysFn

                                  LDW                               _pbxy
                                  PEEK                              
                                  XORI                              12
                                  BNE                               _endif_0x02b2               ; Main: if peek(pbxy) &&= &h0C

                                  LDI                               0
                                  ST                                _pbullet                    ; Main: pbullet.lo = 0

                                  LDWI                              _smashBarrier
                                  CALL                              giga_vAC                    ; Main: gosub smashBarrier

_endif_0x02b2                     LDWI                              0x3F00                      ; Main: LDWI    0x3F00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0
                                  LDW                               _pbxy                       ; Main: LDW     _pbxy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4

                                  LD                                _pbullet
                                  BEQ                               _endif_0x02e9               ; Main: if &(pbullet.lo)

                                  LDI                               0xF8                        ; Main: LDI     0xF8
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  LD                                _pbxy + 1
                                  SUBI                              2
                                  ST                                _pbxy + 1                   ; Main: pbxy.hi = pbxy.hi - 2

                                  LD                                _pbxy + 1
                                  SUBI                              8
                                  BGE                               _endif_0x02e7               ; Main: if pbxy.hi &&< 8

                                  LDI                               0
                                  STW                               _pbullet                    ; Main: pbullet = 0

                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

_endif_0x02e7                     Return                                                        ; Main: return

_endif_0x02e9                     LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134

                                  LDI                               0
                                  STW                               _pbullet                    ; Main: pbullet = 0

                                  Return                                                        ; Main: endproc

_drawPlayer                       PUSH                                                          ; Main: proc drawPlayer

                                  LD                                _pflip
                                  JumpFalse                         _else_0x0318 7              ; Main: if (pflip.lo)

                                  LDI                               4
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  DrawSpriteX                       
                                  LDWI                              _endif_0x032b
                                  CALL                              giga_vAC                    ; Main: sprite FlipX,  Player + 1, px, py

_else_0x0318                      LDI                               3
                                  STW                               spriteId
                                  LDW                               _px
                                  ST                                spriteXY
                                  LDW                               _py
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Player + 0, px, py

_endif_0x032b                     Return                                                        ; Main: endproc

_handleInput                      PUSH                                                          ; Main: proc handleInput

                                  LD                                giga_buttonState
                                  XORI                              255
                                  STW                               _handleInput_button         ; Main: button = get("BUTTON_STATE") XOR 255

                                  LDW                               _handleInput_button
                                  ANDI                              1
                                  BEQ                               _else_0x034e
                                  LDWI                              257
                                  STW                               _pflip                      ; Main: if &(button AND &h01) then pflip = &h0101

_else_0x034e                      LDW                               _handleInput_button
                                  ANDI                              2
                                  BEQ                               _else_0x0362
                                  LDWI                              256
                                  STW                               _pflip                      ; Main: if &(button AND &h02) then pflip = &h0100

_else_0x0362                      LDW                               _buttonPrev
                                  ANDI                              128
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  BEQ                               _endif_0x038d               ; Main: if &((buttonPrev AND &h80) = 0)

                                  LDW                               _handleInput_button
                                  ANDI                              128
                                  BEQ                               _endif_0x038d               ; Main: if &(button AND &h80)

                                  LDWI                              _playerBullet
                                  CALL                              giga_vAC                    ; Main: gosub playerBullet

_endif_0x038d                     LDW                               _handleInput_button
                                  STW                               _buttonPrev                 ; Main: buttonPrev = button

                                  Return                                                        ; Main: endproc

_playerBullet                     PUSH                              
                                  LD                                _pbullet + 1
                                  BEQ                               _else_0x039f
                                  Return                                                        ; Main: if &(pbullet.hi) then return

_else_0x039f                      LDWI                              257
                                  STW                               _pbullet                    ; Main: pbullet = &h0101

                                  LD                                _pflip
                                  BEQ                               _else_0x03d3                ; Main: if &(pflip.lo)

                                  LDW                               _px
                                  ADDI                              6
                                  STW                               0xe8
                                  LDW                               _py
                                  SUBI                              5
                                  ADDI                              8
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               _pbxy
                                  BRA                               _endif_0x03f7               ; Main: pbxy = (px + 6) + ((py - 5 + 8) LSL 8)

_else_0x03d3                      LDW                               _px
                                  ADDI                              5
                                  STW                               0xe8
                                  LDW                               _py
                                  SUBI                              5
                                  ADDI                              8
                                  STW                               0xea
                                  LD                                0xea
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              0xe8
                                  STW                               _pbxy                       ; Main: pbxy = (px + 5) + ((py - 5 + 8) LSL 8)

_endif_0x03f7                     Return                                                        ; Main: return

_movePlayer                       PUSH                                                          ; Main: proc movePlayer

                                  LD                                _pflip + 1
                                  BEQ                               _endif_0x0438               ; Main: if &(pflip.hi)

                                  LDI                               0
                                  ST                                _pflip + 1                  ; Main: pflip.hi = 0

                                  LD                                _pflip
                                  BEQ                               _else_0x0423                ; Main: if &(pflip.lo)

                                  INC                               _px                         ; Main: inc px

                                  LDW                               _px
                                  SUBI                              147
                                  BLE                               _endif_0x0421               ; Main: if px &&> PLAYER_XEND

                                  LDI                               147
                                  STW                               _px                         ; Main: px = PLAYER_XEND

_endif_0x0421                     BRA                               _endif_0x0438               ; Main: endif

_else_0x0423                      LDW                               _px
                                  SUBI                              1
                                  STW                               _px                         ; Main: dec px

                                  LDW                               _px
                                  SUBI                              1
                                  BGE                               _endif_0x0438               ; Main: if px &&< PLAYER_X

                                  LDI                               1
                                  STW                               _px                         ; Main: px = PLAYER_X

_endif_0x0438                     Return                                                        ; Main: endproc

_initVars                         PUSH                                                          ; Main: proc initVars

                                  LDI                               0x42
                                  STW                               varAddress
                                  ResetVars                                                     ; Main: init vars @timeTicks

                                  Return                                                        ; Main: endproc

_startLevel                       PUSH                                                          ; Main: proc startLevel

                                  LDWI                              32420
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @pointsBCD, 0

                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  Return                                                        ; Main: endproc

_drawInvaders                     PUSH                                                          ; Main: proc drawInvaders

                                  LDW                               _iexplode
                                  BEQ                               _repeat_0x0463
                                  Return                                                        ; Main: if &(iexplode) then return

_repeat_0x0463                    LDWI                              0x78a5
                                  ADDW                              _jj
                                  ADDW                              _jj
                                  DEEK                              
                                  ADDW                              _ii
                                  ADDW                              _ii
                                  DEEK                              
                                  STW                               _drawInvaders_invader       ; Main: invader = deek(iaddress(jj) + ii + ii)

                                  LD                                _drawInvaders_invader
                                  BEQ                               _endif_0x058b               ; Main: if &(invader.lo)

                                  LDWI                              0x77a5
                                  ADDW                              _ii
                                  PEEK                              
                                  ADDW                              _ixorigin
                                  STW                               _drawInvaders_x             ; Main: x = ixorigin + ixpos(ii)

                                  LDWI                              0x7fa0
                                  ADDW                              _jj
                                  PEEK                              
                                  STW                               0xe8
                                  LDW                               _iyorigin
                                  SUBW                              0xe8
                                  STW                               _drawInvaders_y             ; Main: y = iyorigin - iypos(jj)

                                  LDW                               _drawInvaders_y
                                  SUBI                              108
                                  BLT                               _endif_0x04cf               ; Main: if y &&>= PLAYER_Y - 6

                                  LDI                               120
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait 120

                                  LDI                               1
                                  STW                               _gameOver                   ; Main: gameOver = 1

                                  Return                                                        ; Main: return

_endif_0x04cf                     LDW                               _xflip
                                  XORI                              2
                                  BNE                               _else_0x0512                ; Main: if xflip &&= 2

                                  LD                                _drawInvaders_invader + 1
                                  STW                               memIndex0
                                  LDWI                              0x7ea1
                                  ADDW                              memIndex0
                                  PEEK                              
                                  STW                               0xe8
                                  LDW                               _drawInvaders_x
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              1
                                  ADDW                              0xe8
                                  STW                               spriteId
                                  LDW                               _drawInvaders_x
                                  ST                                spriteXY
                                  LDW                               _drawInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                       
                                  BRA                               _endif_0x0548               ; Main: sprite FlipX, irsprites(invader.hi) + ((x LSR 1) AND 1), x, y

_else_0x0512                      LD                                _drawInvaders_invader + 1
                                  STW                               memIndex0
                                  LDWI                              0x7da2
                                  ADDW                              memIndex0
                                  PEEK                              
                                  STW                               0xe8
                                  LDW                               _drawInvaders_x
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  ANDI                              1
                                  ADDW                              0xe8
                                  STW                               spriteId
                                  LDW                               _drawInvaders_x
                                  ST                                spriteXY
                                  LDW                               _drawInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, ilsprites(invader.hi) + ((x LSR 1) AND 1), x, y

_endif_0x0548                     LD                                _imarch
                                  BEQ                               _endif_0x056a               ; Main: if &(imarch.lo)

                                  LDI                               17
                                  STW                               spriteId
                                  LDW                               _drawInvaders_x
                                  ST                                spriteXY
                                  LDW                               _drawInvaders_y
                                  SUBI                              10
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, InvBlk, x, y - INVADERS_Y

_endif_0x056a                     LDW                               _drawInvaders_x
                                  SUBI                              147
                                  BLT                               _elseif_0x057c              ; Main: if x &&>= PLAYER_XEND

                                  LDWI                              -2
                                  STW                               _iflip
                                  BRA                               _endif_0x058b               ; Main: iflip = -2

_elseif_0x057c                    LDW                               _drawInvaders_x
                                  SUBI                              1
                                  BGT                               _endif_0x058b               ; Main: elseif x &&<= 1

                                  LDI                               2
                                  STW                               _iflip                      ; Main: iflip = 2

_endif_0x058b                     INC                               _ii                         ; Main: inc ii

                                  LDW                               _ii
                                  XORI                              10
                                  JumpEQ                            _endif_0x05e8 33            ; Main: if ii &= INVADERS_I

                                  LDI                               0
                                  STW                               _ii                         ; Main: ii = 0

                                  LDW                               _jj
                                  STLW                              0xFE
                                  LDWI                              _page_0x05a0
                                  CALL                              giga_vAC
_page_0x05a0                      LDLW                              0xFE
                                  SUBI                              1
                                  STW                               _jj                         ; Main: dec jj

                                  LDW                               _jj
                                  BGE                               _endif_0x05e8               ; Main: if jj &&< 0

                                  LD                                _imarch
                                  BEQ                               _else_0x05bf
                                  LDI                               0
                                  ST                                _imarch                     ; Main: if &(imarch.lo) then imarch.lo = 0

_else_0x05bf                      LDI                               4
                                  STW                               _jj                         ; Main: jj = INVADERS_J - 1

                                  LDW                               _iflip
                                  XORW                              _xflip
                                  BEQ                               _else_0x05dc                ; Main: if iflip &&<> xflip

                                  LDI                               1
                                  ST                                _imarch                     ; Main: imarch.lo = 1

                                  LDW                               _iyorigin
                                  ADDI                              8
                                  STW                               _iyorigin
                                  BRA                               _endif_0x05e4               ; Main: iyorigin = iyorigin + INVADERS_H

_else_0x05dc                      LDW                               _ixorigin
                                  ADDW                              _iflip
                                  STW                               _ixorigin                   ; Main: ixorigin = ixorigin + iflip

_endif_0x05e4                     LDW                               _iflip
                                  STW                               _xflip                      ; Main: xflip = iflip

_endif_0x05e8                     LD                                _drawInvaders_invader
                                  JumpFalse                         _repeat_0x0463 34           ; Main: until (invader.lo)

                                  Return                                                        ; Main: endproc

_smashBarrier                     PUSH                                                          ; Main: asm

                                  LDWI                              0x0C00                      ; Main: LDWI    0x0C00
                                  STW                               giga_sysArg0                ; Main: STW     giga_sysArg0        'FGBG colour
                                  LDWI                              0xFEFF                      ; Main: LDWI    0xFEFF
                                  ADDW                              _pbxy                       ; Main: ADDW    _pbxy
                                  STW                               giga_sysArg4                ; Main: STW     giga_sysArg4        'offset
                                  LD                                giga_rand0                  ; Main: LD      giga_rand0
                                  ANDI                              0xC0                        ; Main: ANDI    0xC0
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'left damage
                                  INC                               giga_sysArg4                ; Main: INC     giga_sysArg4
                                  STLW                              0xFE
                                  LDWI                              _page_0x0678
                                  CALL                              giga_vAC
_page_0x0678                      LDLW                              0xFE
                                  LDI                               0x00                        ; Main: LDI     0x00
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'center damage
                                  INC                               giga_sysArg4                ; Main: INC     giga_sysArg4
                                  LD                                giga_rand2                  ; Main: LD      giga_rand2
                                  ANDI                              0xC0                        ; Main: ANDI    0xC0
                                  ST                                giga_sysArg2                ; Main: ST      giga_sysArg2
                                  SYS                               134                         ; Main: SYS     134                 'right damage

                                  Return                                                        ; Main: return

_drawBarriers                     PUSH                                                          ; Main: proc drawBarriers

                                  LDI                               20
                                  STW                               _drawBarriers_x
                                  LDI                               90
                                  STW                               _drawBarriers_y             ; Main: x = BARRIER_X : y = BARRIER_Y

                                  LDI                               0
                                  STW                               _drawBarriers_i             ; Main: for i=0 &to NUM_BARRIERS - 1

_next_0x062a                      LDI                               0
                                  STW                               spriteId
                                  LDW                               _drawBarriers_x
                                  ST                                spriteXY
                                  LDW                               _drawBarriers_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, Barrier, x, y

                                  LDW                               _drawBarriers_x
                                  ADDI                              48
                                  STW                               _drawBarriers_x             ; Main: x = x + BARRIER_OFFSET

                                  ForNextInc                        _drawBarriers_i _next_0x062a 2                                                                                              ; Main: next i

                                  Return                                                        ; Main: endproc

_checkInvaders                    PUSH                                                          ; Main: proc checkInvaders

                                  LDW                               _iexplode
                                  BEQ                               _endif_0x0684               ; Main: if &(iexplode)

                                  INC                               _itimer                     ; Main: inc itimer

                                  LDW                               _itimer
                                  XORI                              10
                                  BNE                               _endif_0x0682               ; Main: if itimer &&= 10

                                  LDI                               17
                                  STW                               spriteId
                                  LD                                _iexplode
                                  ST                                spriteXY
                                  LD                                _iexplode + 1
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, InvBlk, iexplode.lo, iexplode.hi

                                  LDI                               0
                                  STW                               _itimer
                                  STW                               _iexplode                   ; Main: itimer = 0 : iexplode = itimer

_endif_0x0682                     Return                                                        ; Main: return

_endif_0x0684                     LD                                _pbullet + 1
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  BEQ                               _else_0x0697
                                  Return                                                        ; Main: if &(pbullet.hi = 0) then return

_else_0x0697                      LD                                _pbxy + 1
                                  SUBI                              11
                                  STW                               0xe8
                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  LDW                               _iyorigin
                                  SUBW                              0xe8
                                  STW                               _checkInvaders_y            ; Main: y = iyorigin - (pbxy.hi - (8 + 3))

                                  LDW                               _checkInvaders_y
                                  BGE                               _else_0x06b2
                                  Return                                                        ; Main: if y &&< 0 then return

_else_0x06b2                      LD                                _pbxy
                                  SUBW                              _ixorigin
                                  STW                               _checkInvaders_x            ; Main: x = pbxy.lo - ixorigin

                                  LDW                               _checkInvaders_x
                                  BGE                               _else_0x06c7
                                  Return                                                        ; Main: if x &&< 0 then return

_else_0x06c7                      LDWI                              1280
                                  ADDW                              _checkInvaders_x
                                  PEEK                              
                                  STW                               _checkInvaders_i            ; Main: i = peek(DIVX + x)

                                  LDW                               _checkInvaders_i
                                  SUBI                              10
                                  BLT                               _else_0x06e2
                                  Return                                                        ; Main: if i &&>= INVADERS_I then return

_else_0x06e2                      LDWI                              1536
                                  ADDW                              _checkInvaders_y
                                  PEEK                              
                                  STW                               0xea
                                  LDI                               4
                                  SUBW                              0xea
                                  STW                               _checkInvaders_j            ; Main: j = (INVADERS_J - 1) - peek(DIVY + y)

                                  LDW                               _checkInvaders_j
                                  SUBI                              5
                                  BLT                               _else_0x0703
                                  Return                                                        ; Main: if j &&>= INVADERS_J then return

_else_0x0703                      LDW                               _checkInvaders_j
                                  BGE                               _else_0x0710
                                  Return                                                        ; Main: if j &&< 0 then return

_else_0x0710                      LDWI                              0x78a5
                                  ADDW                              _checkInvaders_j
                                  ADDW                              _checkInvaders_j
                                  DEEK                              
                                  ADDW                              _checkInvaders_i
                                  ADDW                              _checkInvaders_i
                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  STW                               _checkInvaders_iaddr
                                  PEEK                              
                                  XORI                              0
                                  CALL                              convertEqOpAddr
                                  BEQ                               _else_0x0744
                                  Return                                                        ; Main: iaddr = iaddress(j) + i + i : if &(peek(iaddr) = 0) then return

_else_0x0744                      LDI                               0
                                  POKE                              _checkInvaders_iaddr        ; Main: poke iaddr, 0

                                  LDI                               0
                                  ST                                _pbullet                    ; Main: pbullet.lo = 0

                                  LDW                               _checkInvaders_i
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  STW                               0xea
                                  LDW                               _checkInvaders_i
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              0xea
                                  ADDW                              _ixorigin
                                  STW                               _checkInvaders_x            ; Main: x = ixorigin + ((i LSL 3) + (i LSL 2))  'x = ixorigin + i*INVADERS_X

                                  LDI                               4
                                  SUBW                              _checkInvaders_j
                                  STW                               _checkInvaders_j            ; Main: j = (INVADERS_J - 1) - j

                                  LDW                               _checkInvaders_j
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  ADDW                              _checkInvaders_j
                                  ADDW                              _checkInvaders_j
                                  STW                               0xea
                                  LDW                               _iyorigin
                                  SUBW                              0xea
                                  STW                               _checkInvaders_y            ; Main: y = iyorigin - ((j LSL 3) + j + j)      'y = iyorigin - j*INVADERS_Y;

                                  LDW                               _xflip
                                  JumpGT                            _else_0x07b2 44             ; Main: if xflip &> 0

                                  LDI                               18
                                  STW                               spriteId
                                  LDW                               _checkInvaders_x
                                  ST                                spriteXY
                                  LDW                               _checkInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
                                  DrawSprite                        
                                  LDWI                              _endif_0x07c5
                                  CALL                              giga_vAC                    ; Main: sprite NoFlip, IExplode, x, y

_else_0x07b2                      LDI                               19
                                  STW                               spriteId
                                  LDW                               _checkInvaders_x
                                  ST                                spriteXY
                                  LDW                               _checkInvaders_y
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite FlipX, IExplode + 1, x, y

_endif_0x07c5                     LDI                               0
                                  STW                               _itimer
                                  LD                                _checkInvaders_y
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  ADDW                              _checkInvaders_x
                                  STW                               _iexplode                   ; Main: itimer = 0 : iexplode = x + (y LSL 8)

                                  LD                                _imarch
                                  BEQ                               _endif_0x07fd               ; Main: if &(imarch.lo)

                                  LDI                               17
                                  STW                               spriteId
                                  LDW                               _checkInvaders_x
                                  ST                                spriteXY
                                  LDW                               _checkInvaders_y
                                  SUBI                              10
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite NoFlip, InvBlk, x, y - INVADERS_Y

_endif_0x07fd                     INC                               _icount                     ; Main: inc icount

                                  LDW                               _icount
                                  XORI                              50
                                  BNE                               _endif_0x080e               ; Main: if icount &&= (INVADERS_J * INVADERS_I)

                                  LDI                               1
                                  STW                               _gameOver                   ; Main: gameOver = 1

_endif_0x080e                     Return                                                        ; Main: endproc

                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
_resetLevel                       PUSH                                                          ; Main: proc resetLevel

                                  LDI                               0
                                  STW                               _resetLevel_j               ; Main: for j=0 to INVADERS_J - 1

_next_0x0815                      LDI                               0
                                  STW                               _resetLevel_i               ; Main: for i=0 to INVADERS_I - 1

_next_0x0819                      LDI                               1
                                  STW                               memValue
                                  LDW                               _resetLevel_j
                                  STW                               memIndex0
                                  LDW                               _resetLevel_i
                                  STW                               memIndex1
                                  LDWI                              0x7aa0
                                  CALL                              convert16Arr2dAddr
                                  LDW                               memValue
                                  POKE                              memAddr                     ; Main: invaders(j, i).lo = 1

                                  ForNextFarInc                     _resetLevel_i _next_0x0819 9                                                                                                ; Main: next i

                                  ForNextFarInc                     _resetLevel_j _next_0x0815 4                                                                                                ; Main: next j

                                  ClearVertBlinds                                               ; Main: cls

                                  LDWI                              768
                                  STW                               _livesLevel                 ; Main: livesLevel = 3*256 + 0

                                  LDWI                              32427
                                  STW                               bcdDstAddr
                                  LDI                               0
                                  BcdInt                                                        ; Main: bcdint @scoreBCD, 0

                                  LDI                               1
                                  STW                               _px
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ca0
                                  CALL                              giga_vAC
_page_0x0ca0                      LDLW                              0xFE
                                  LDI                               114
                                  STW                               _py                         ; Main: px = PLAYER_X : py = PLAYER_Y

                                  LDI                               1
                                  STW                               _ixorigin
                                  LDI                               57
                                  STW                               _iyorigin                   ; Main: ixorigin = IORIGIN_X : iyorigin = IORIGIN_Y

                                  LDI                               0
                                  STW                               _ii
                                  LDI                               4
                                  STW                               _jj                         ; Main: ii = 0 : jj = INVADERS_J - 1

                                  LDI                               2
                                  STW                               _iflip
                                  STW                               _xflip                      ; Main: iflip = 2 : xflip = iflip

                                  LDWI                              _drawBarriers
                                  CALL                              giga_vAC                    ; Main: call drawBarriers

                                  Return                                                        ; Main: endproc

_initSystem                       PUSH                                                          ; Main: proc initSystem

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  LDI                               0
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, 0

                                  Return                                                        ; Main: endproc

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x6cac
convertEqOp                       EQU     0x66ec
convert16Arr2d                    EQU     0x6ca0
resetVars                         EQU     0x6ba0
shiftRight1bit                    EQU     0x69a1
scanlineMode                      EQU     0x66f5
waitVBlank                        EQU     0x69b7
waitVBlanks                       EQU     0x6bb0
resetVideoFlags                   EQU     0x69ab
initClearFuncs                    EQU     0x6ab2
clearVertBlinds                   EQU     0x67c9
drawSprite_                       EQU     0x67a1
drawSprite                        EQU     0x6ea2
drawSpriteX                       EQU     0x6aa5
bcdInt                            EQU     0x68a1
bcdDigits                         EQU     0x6da7
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert16Arr2d      ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVars           LDI     0
                    DOKE    varAddress
                    INC     varAddress
                    INC     varAddress
                    LD      varAddress
                    XORI    giga_One                        ; end of user vars
                    BNE     resetVars
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       LDWI    waitVBlank
                    CALL    giga_vAC
                    BRA     waitVB_loop


resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite_         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawS_loop          LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     drawS_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    BRA     drawS_loop
                    
drawS_exit          POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


                    ; create a bcd value from a +ve int, (max 42767)
bcdInt              PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          ; bcdDstAddr must point to >= 5 digit bcd value
                    LDI     0
                    STW     bcdDigit
                    LDWI    10000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDWI    1000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     100
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     10
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LD      bcdValue
                    POKE    bcdDstAddr
                    POP
                    RET


bcdDigits           LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            ; calculate digit
                    BRA     bcdD_index
    
bcdD_cont           LD      bcdDigit
                    POKE    bcdDstAddr                          ; store digit
                    LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDI     0
                    ST      bcdDigit                            ; reset digit
                    
bcdD_exit           RET

