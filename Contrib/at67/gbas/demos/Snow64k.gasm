_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0xffa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_10                               EQU                               0x0231
_20                               EQU                               0x0231
_30                               EQU                               0x0239
_40                               EQU                               0x0242
_50                               EQU                               0x0253
_60                               EQU                               0x025d
_70                               EQU                               0x026e
_80                               EQU                               0x027c
_90                               EQU                               0x0289
_100                              EQU                               0x02a5
_110                              EQU                               0x02de
_120                              EQU                               0x030f
_130                              EQU                               0x0320
_140                              EQU                               0x0338
_150                              EQU                               0x034e
_160                              EQU                               0x0368
_170                              EQU                               0x0372
_180                              EQU                               0x038c
_190                              EQU                               0x03a1
_200                              EQU                               0x03ab
_210                              EQU                               0x03c1
_220                              EQU                               0x03db
_page_0x0300                      EQU                               0x0300

; Global Variables
_I                                EQU                               0x0030
_J                                EQU                               0x0032
_S                                EQU                               0x0034
_y                                EQU                               0x0036
_x                                EQU                               0x0038

; Local Variables

; Arrays
_X_array                          EQU                               0xfa8c
_X_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_Y_array                          EQU                               0xf5d8
_Y_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings

; Constant Strings
_str_0x7fe9                       EQU                               0x7fe9
_str_0x7fe9                       DB                                21 'Merry Christmas 2019!' 0

; Data

; Time

; Define Bytes
def_bytes_0x08a0                  EQU                               0x08a0
def_bytes_0x08a0                  DB                                144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 
def_bytes_0x08b0                  EQU                               0x08b0
def_bytes_0x08b0                  DB                                17 144 67 146 50 18 144 62 145 59 146 43 17 146 50 17 
def_bytes_0x08c0                  EQU                               0x08c0
def_bytes_0x08c0                  DB                                146 55 17 144 62 146 50 9 144 62 8 144 62 145 59 146 
def_bytes_0x08d0                  EQU                               0x08d0
def_bytes_0x08d0                  DB                                43 17 144 71 146 50 17 144 69 146 55 18 144 67 146 50 
def_bytes_0x08e0                  EQU                               0x08e0
def_bytes_0x08e0                  DB                                17 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 
def_bytes_0x08f0                  EQU                               0x08f0
def_bytes_0x08f0                  DB                                17 144 64 145 60 146 45 17 144 72 208 160 9 
def_bytes_0x09a0                  EQU                               0x09a0
def_bytes_0x09a0                  DB                                146 52 18 
def_bytes_0x09a3                  EQU                               0x09a3
def_bytes_0x09a3                  DB                                144 71 146 57 17 144 69 146 52 17 144 66 145 62 146 50 
def_bytes_0x09b3                  EQU                               0x09b3
def_bytes_0x09b3                  DB                                17 146 54 17 146 57 17 146 54 17 144 74 145 66 146 50 
def_bytes_0x09c3                  EQU                               0x09c3
def_bytes_0x09c3                  DB                                18 144 74 146 54 17 144 72 145 66 146 57 17 144 69 146 
def_bytes_0x09d3                  EQU                               0x09d3
def_bytes_0x09d3                  DB                                50 17 144 71 145 67 146 43 17 146 50 17 146 55 17 146 
def_bytes_0x09e3                  EQU                               0x09e3
def_bytes_0x09e3                  DB                                50 18 144 62 145 59 146 43 17 144 71 146 50 17 144 69 
def_bytes_0x09f3                  EQU                               0x09f3
def_bytes_0x09f3                  DB                                146 55 17 144 67 208 160 10 
def_bytes_0x0aa0                  EQU                               0x0aa0
def_bytes_0x0aa0                  DB                                146 50 17 144 62 145 59 146 
def_bytes_0x0aa8                  EQU                               0x0aa8
def_bytes_0x0aa8                  DB                                43 17 146 50 17 146 55 18 144 62 146 50 8 144 62 9 
def_bytes_0x0ab8                  EQU                               0x0ab8
def_bytes_0x0ab8                  DB                                144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 
def_bytes_0x0ac8                  EQU                               0x0ac8
def_bytes_0x0ac8                  DB                                17 144 67 146 50 17 144 64 145 60 146 48 17 146 52 18 
def_bytes_0x0ad8                  EQU                               0x0ad8
def_bytes_0x0ad8                  DB                                146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 146 
def_bytes_0x0ae8                  EQU                               0x0ae8
def_bytes_0x0ae8                  DB                                52 17 144 71 146 57 17 144 69 146 52 17 144 74 208 160 
def_bytes_0x0af8                  EQU                               0x0af8
def_bytes_0x0af8                  DB                                11 
def_bytes_0x0ba0                  EQU                               0x0ba0
def_bytes_0x0ba0                  DB                                145 67 146 47 18 144 74 146 50 17 144 74 145 67 146 
def_bytes_0x0baf                  EQU                               0x0baf
def_bytes_0x0baf                  DB                                55 17 144 74 146 50 17 144 76 145 66 146 45 17 144 74 
def_bytes_0x0bbf                  EQU                               0x0bbf
def_bytes_0x0bbf                  DB                                146 50 17 144 72 145 66 146 54 17 144 69 146 50 18 144 
def_bytes_0x0bcf                  EQU                               0x0bcf
def_bytes_0x0bcf                  DB                                67 145 62 146 43 17 146 50 17 144 74 145 67 146 55 34 
def_bytes_0x0bdf                  EQU                               0x0bdf
def_bytes_0x0bdf                  DB                                144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 
def_bytes_0x0bef                  EQU                               0x0bef
def_bytes_0x0bef                  DB                                18 146 50 17 144 67 145 71 208 160 12 
def_bytes_0x0ca0                  EQU                               0x0ca0
def_bytes_0x0ca0                  DB                                146 55 17 144 67 
def_bytes_0x0ca5                  EQU                               0x0ca5
def_bytes_0x0ca5                  DB                                145 71 17 145 67 144 71 17 146 50 17 144 71 145 67 146 
def_bytes_0x0cb5                  EQU                               0x0cb5
def_bytes_0x0cb5                  DB                                43 17 144 74 146 50 18 144 67 145 64 146 48 147 52 25 
def_bytes_0x0cc5                  EQU                               0x0cc5
def_bytes_0x0cc5                  DB                                144 69 9 144 71 145 62 146 43 131 17 146 50 17 146 55 
def_bytes_0x0cd5                  EQU                               0x0cd5
def_bytes_0x0cd5                  DB                                34 144 72 145 64 146 48 18 144 72 145 64 146 52 17 144 
def_bytes_0x0ce5                  EQU                               0x0ce5
def_bytes_0x0ce5                  DB                                72 145 64 146 55 17 146 52 8 144 72 9 144 72 145 62 
def_bytes_0x0cf5                  EQU                               0x0cf5
def_bytes_0x0cf5                  DB                                146 47 208 160 13 
def_bytes_0x0da0                  EQU                               0x0da0
def_bytes_0x0da0                  DB                                17 144 71 146 50 17 144 71 145 62 146 
def_bytes_0x0dab                  EQU                               0x0dab
def_bytes_0x0dab                  DB                                55 17 144 71 146 50 9 144 71 9 144 71 145 61 146 45 
def_bytes_0x0dbb                  EQU                               0x0dbb
def_bytes_0x0dbb                  DB                                17 144 69 146 52 17 144 69 145 61 146 57 17 144 71 146 
def_bytes_0x0dcb                  EQU                               0x0dcb
def_bytes_0x0dcb                  DB                                52 17 144 69 145 62 146 50 17 146 54 17 144 74 145 66 
def_bytes_0x0ddb                  EQU                               0x0ddb
def_bytes_0x0ddb                  DB                                146 57 18 146 54 17 144 67 145 71 146 43 17 144 67 145 
def_bytes_0x0deb                  EQU                               0x0deb
def_bytes_0x0deb                  DB                                71 17 145 67 144 71 17 146 50 17 144 67 208 160 14 
def_bytes_0x0ea0                  EQU                               0x0ea0
def_bytes_0x0ea0                  DB                                145 
def_bytes_0x0ea1                  EQU                               0x0ea1
def_bytes_0x0ea1                  DB                                71 146 55 17 144 67 145 71 18 145 67 144 71 17 146 50 
def_bytes_0x0eb1                  EQU                               0x0eb1
def_bytes_0x0eb1                  DB                                17 144 71 145 67 146 43 17 144 74 146 50 17 144 67 145 
def_bytes_0x0ec1                  EQU                               0x0ec1
def_bytes_0x0ec1                  DB                                64 146 48 147 52 26 144 69 8 144 71 145 62 146 43 131 
def_bytes_0x0ed1                  EQU                               0x0ed1
def_bytes_0x0ed1                  DB                                18 146 50 17 146 55 34 144 72 145 64 146 48 17 144 72 
def_bytes_0x0ee1                  EQU                               0x0ee1
def_bytes_0x0ee1                  DB                                145 64 146 52 17 144 72 145 64 146 55 17 146 52 9 144 
def_bytes_0x0ef1                  EQU                               0x0ef1
def_bytes_0x0ef1                  DB                                72 9 144 72 145 62 208 160 15 
def_bytes_0x0fa0                  EQU                               0x0fa0
def_bytes_0x0fa0                  DB                                146 47 17 144 71 146 50 
def_bytes_0x0fa7                  EQU                               0x0fa7
def_bytes_0x0fa7                  DB                                17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 8 
def_bytes_0x0fb7                  EQU                               0x0fb7
def_bytes_0x0fb7                  DB                                144 74 145 66 146 45 17 144 74 146 50 17 144 72 145 62 
def_bytes_0x0fc7                  EQU                               0x0fc7
def_bytes_0x0fc7                  DB                                146 54 18 144 69 146 50 17 144 67 145 59 146 43 17 146 
def_bytes_0x0fd7                  EQU                               0x0fd7
def_bytes_0x0fd7                  DB                                50 17 146 55 34 144 62 145 59 146 43 17 144 71 146 50 
def_bytes_0x0fe7                  EQU                               0x0fe7
def_bytes_0x0fe7                  DB                                18 144 69 146 55 17 144 67 146 50 17 144 62 145 59 146 
def_bytes_0x0ff7                  EQU                               0x0ff7
def_bytes_0x0ff7                  DB                                43 208 160 16 
def_bytes_0x10a0                  EQU                               0x10a0
def_bytes_0x10a0                  DB                                17 146 50 17 146 55 17 144 62 146 50 9 
def_bytes_0x10ac                  EQU                               0x10ac
def_bytes_0x10ac                  DB                                144 62 8 144 62 145 59 146 43 18 144 71 146 50 17 144 
def_bytes_0x10bc                  EQU                               0x10bc
def_bytes_0x10bc                  DB                                69 146 55 17 144 67 146 50 17 144 64 145 60 146 48 17 
def_bytes_0x10cc                  EQU                               0x10cc
def_bytes_0x10cc                  DB                                146 52 17 146 55 17 146 52 18 144 64 145 60 146 45 17 
def_bytes_0x10dc                  EQU                               0x10dc
def_bytes_0x10dc                  DB                                144 72 146 52 17 144 71 146 57 17 144 69 146 52 17 144 
def_bytes_0x10ec                  EQU                               0x10ec
def_bytes_0x10ec                  DB                                66 145 62 146 50 17 146 54 17 146 57 208 160 17 
def_bytes_0x11a0                  EQU                               0x11a0
def_bytes_0x11a0                  DB                                18 146 
def_bytes_0x11a2                  EQU                               0x11a2
def_bytes_0x11a2                  DB                                54 17 144 74 145 66 146 50 17 144 74 146 54 17 144 72 
def_bytes_0x11b2                  EQU                               0x11b2
def_bytes_0x11b2                  DB                                145 66 146 57 17 144 69 146 50 17 144 71 145 67 146 43 
def_bytes_0x11c2                  EQU                               0x11c2
def_bytes_0x11c2                  DB                                17 146 50 18 146 55 17 146 50 17 144 62 145 59 146 43 
def_bytes_0x11d2                  EQU                               0x11d2
def_bytes_0x11d2                  DB                                17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 
def_bytes_0x11e2                  EQU                               0x11e2
def_bytes_0x11e2                  DB                                144 62 145 59 146 43 18 146 50 17 146 55 17 144 62 146 
def_bytes_0x11f2                  EQU                               0x11f2
def_bytes_0x11f2                  DB                                50 8 144 62 208 160 18 
def_bytes_0x12a0                  EQU                               0x12a0
def_bytes_0x12a0                  DB                                9 144 62 145 59 146 43 17 144 
def_bytes_0x12a9                  EQU                               0x12a9
def_bytes_0x12a9                  DB                                71 146 50 17 144 69 146 55 17 144 67 146 50 18 144 64 
def_bytes_0x12b9                  EQU                               0x12b9
def_bytes_0x12b9                  DB                                145 60 146 48 17 146 52 17 146 55 17 146 52 17 144 64 
def_bytes_0x12c9                  EQU                               0x12c9
def_bytes_0x12c9                  DB                                145 60 146 45 17 144 72 146 52 17 144 71 146 57 18 144 
def_bytes_0x12d9                  EQU                               0x12d9
def_bytes_0x12d9                  DB                                69 146 52 17 144 74 145 67 146 47 17 144 74 146 50 17 
def_bytes_0x12e9                  EQU                               0x12e9
def_bytes_0x12e9                  DB                                144 74 145 67 146 55 17 144 74 146 50 17 144 76 208 160 
def_bytes_0x12f9                  EQU                               0x12f9
def_bytes_0x12f9                  DB                                19 
def_bytes_0x13a0                  EQU                               0x13a0
def_bytes_0x13a0                  DB                                145 66 146 45 17 144 74 146 50 18 144 72 145 66 146 
def_bytes_0x13af                  EQU                               0x13af
def_bytes_0x13af                  DB                                54 17 144 69 146 50 17 144 67 145 62 146 43 17 146 50 
def_bytes_0x13bf                  EQU                               0x13bf
def_bytes_0x13bf                  DB                                17 144 74 145 67 146 55 34 144 67 145 71 146 43 18 144 
def_bytes_0x13cf                  EQU                               0x13cf
def_bytes_0x13cf                  DB                                67 145 71 17 145 67 144 71 17 146 50 17 144 67 145 71 
def_bytes_0x13df                  EQU                               0x13df
def_bytes_0x13df                  DB                                146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 18 
def_bytes_0x13ef                  EQU                               0x13ef
def_bytes_0x13ef                  DB                                144 71 145 67 146 43 17 144 74 208 160 20 
def_bytes_0x14a0                  EQU                               0x14a0
def_bytes_0x14a0                  DB                                146 50 17 144 
def_bytes_0x14a4                  EQU                               0x14a4
def_bytes_0x14a4                  DB                                67 145 64 146 48 147 52 26 144 69 8 144 71 145 62 146 
def_bytes_0x14b4                  EQU                               0x14b4
def_bytes_0x14b4                  DB                                43 131 17 146 50 17 146 55 35 144 72 145 64 146 48 17 
def_bytes_0x14c4                  EQU                               0x14c4
def_bytes_0x14c4                  DB                                144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 
def_bytes_0x14d4                  EQU                               0x14d4
def_bytes_0x14d4                  DB                                9 144 72 8 144 72 145 62 146 47 17 144 71 146 50 18 
def_bytes_0x14e4                  EQU                               0x14e4
def_bytes_0x14e4                  DB                                144 71 145 62 146 55 17 144 71 146 50 8 144 71 9 144 
def_bytes_0x14f4                  EQU                               0x14f4
def_bytes_0x14f4                  DB                                71 145 61 208 160 21 
def_bytes_0x15a0                  EQU                               0x15a0
def_bytes_0x15a0                  DB                                146 45 17 144 69 146 52 17 144 69 
def_bytes_0x15aa                  EQU                               0x15aa
def_bytes_0x15aa                  DB                                145 61 146 57 17 144 71 146 52 17 144 69 145 62 146 50 
def_bytes_0x15ba                  EQU                               0x15ba
def_bytes_0x15ba                  DB                                18 146 54 17 144 74 145 66 146 57 17 146 54 17 144 67 
def_bytes_0x15ca                  EQU                               0x15ca
def_bytes_0x15ca                  DB                                145 71 146 43 17 144 67 145 71 17 145 67 144 71 17 146 
def_bytes_0x15da                  EQU                               0x15da
def_bytes_0x15da                  DB                                50 18 144 67 145 71 146 55 17 144 67 145 71 17 145 67 
def_bytes_0x15ea                  EQU                               0x15ea
def_bytes_0x15ea                  DB                                144 71 17 146 50 17 144 71 145 67 146 43 208 160 22 
def_bytes_0x16a0                  EQU                               0x16a0
def_bytes_0x16a0                  DB                                17 
def_bytes_0x16a1                  EQU                               0x16a1
def_bytes_0x16a1                  DB                                144 74 146 50 17 144 67 145 64 146 48 147 52 26 144 69 
def_bytes_0x16b1                  EQU                               0x16b1
def_bytes_0x16b1                  DB                                9 144 71 145 62 146 43 131 17 146 50 17 146 55 34 144 
def_bytes_0x16c1                  EQU                               0x16c1
def_bytes_0x16c1                  DB                                72 145 64 146 48 17 144 72 145 64 146 52 18 144 72 145 
def_bytes_0x16d1                  EQU                               0x16d1
def_bytes_0x16d1                  DB                                64 146 55 17 146 52 8 144 72 9 144 72 145 62 146 47 
def_bytes_0x16e1                  EQU                               0x16e1
def_bytes_0x16e1                  DB                                17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 
def_bytes_0x16f1                  EQU                               0x16f1
def_bytes_0x16f1                  DB                                50 9 144 71 8 144 74 208 160 23 
def_bytes_0x17a0                  EQU                               0x17a0
def_bytes_0x17a0                  DB                                145 66 146 45 18 144 
def_bytes_0x17a6                  EQU                               0x17a6
def_bytes_0x17a6                  DB                                74 146 50 17 144 72 145 62 146 54 17 144 69 146 50 17 
def_bytes_0x17b6                  EQU                               0x17b6
def_bytes_0x17b6                  DB                                144 67 145 59 146 43 17 146 50 17 146 55 35 128 129 130 
def_bytes_0x17c6                  EQU                               0x17c6
def_bytes_0x17c6                  DB                                208 160 8 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                        
                                  InitEqOp                        
                                  InitGtOp                        
                                  InitRealTimeStub                
%define TIME_SLICING                                                                            ; Main: INIT

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDWI                              playMidi
                                  STW                               realTimeProc0
                                  LDWI                              setRealTimeProc0
                                  CALL                              giga_vAC                    ; Main: init midi

_20                               LDI                               1
                                  STW                               _I
                                  LDI                               0
                                  STW                               _J                          ; Main: I=1 : J=0

_30                               LDI                               16
                                  ST                                fgbgColour
                                  ClearVertBlinds                                               ; Main: set BG_COLOUR,D : cls

_40                               LDI                               72
                                  ST                                fgbgColour + 1
                                  LDI                               16
                                  ST                                cursorXY
                                  LDI                               96
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; Main: set FG_COLOUR,72 : at 16,96

_50                               PrintString                       _str_0x7fe9                 ; Main: print "Merry Christmas 2019!";

_60                               LDI                               0
                                  STW                               drawHLine_x1
                                  LDI                               119
                                  STW                               drawHLine_y1
                                  LDI                               159
                                  STW                               drawHLine_x2
                                  DrawHLine                                                     ; Main: hline 0, 119, W 'at 0,119 : line W,0

_70                               LDI                               3
                                  ST                                waveType + 1
                                  LDWI                              2208
                                  PlayMidi                                                      ; Main: play midi,&h08a0,3

_80                               LDI                               0
                                  STW                               _S
                                  LDWI                              601
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: for S=0 to N

_90                               TickMidi                          
                                  LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _100 0
                                  LDWI                              _120
                                  CALL                              giga_vAC                    ; Main: tick midi : if Y(S)>0 then goto 120

_100                              Rand                              
                                  ANDI                              63
                                  ADDI                              2
                                  STW                               0xe8
                                  Rand                              
                                  ANDI                              63
                                  ADDW                              0xe8
                                  STW                               0xea
                                  Rand                              
                                  ANDI                              15
                                  ADDW                              0xea
                                  STW                               0xec
                                  Rand                              
                                  ANDI                              15
                                  ADDW                              0xec
                                  STW                               memValue
                                  LDWI                              0xfa8c
                                  ADDW                              _S
                                  ADDW                              _S
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: X(S) = 2 + (rnd(0) AND &h3F) + (rnd(0) AND &h3F) + (rnd(0) AND &h0F) + (rnd(0) AND &h0F) '2+rnd(W-3)

_110                              Rand                              
                                  ANDI                              63
                                  ADDI                              8
                                  STW                               0xe8
                                  LD                                0xe8
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  STW                               memValue
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: Y(S) = (8 + (rnd(0) AND &h3F)) LSL 8 '(8+rnd(60))*256

_120                              LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              256
                                  ADDW                              0xe8
                                  STW                               _y                          ; Main: y=Y(S)+256

_130                              LDWI                              0xfa8c
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  ADDW                              _I
                                  STW                               _x
                                  LDW                               _I
                                  ADDW                              _J
                                  STW                               _I
                                  LDW                               _J
                                  SUBW                              _I
                                  STW                               _J                          ; Main: x=X(S)+I : I=I+J : J=J-I

_140                              LDW                               _y
                                  ADDW                              _x
                                  PEEK                              
                                  SUBI                              63
                                  CALL                              convertGtOpAddr
                                  JumpFalse                         _150 1
                                  LDWI                              _190
                                  CALL                              giga_vAC                    ; Main: if peek(y+x)>C then goto 190

_150                              LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0xfa8c
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  ADDW                              0xe8
                                  STW                               0xea
                                  LDI                               16
                                  POKE                              0xea                        ; Main: poke Y(S)+X(S),D

_160                              LDW                               _x
                                  ADDW                              _y
                                  STW                               0xe8
                                  LDI                               63
                                  POKE                              0xe8                        ; Main: poke x+y,C

_170                              LDWI                              0xfa8c
                                  ADDW                              _S
                                  ADDW                              _S
                                  STW                               memAddr
                                  LDW                               _x
                                  DOKE                              memAddr
                                  LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  STW                               memAddr
                                  LDW                               _y
                                  DOKE                              memAddr                     ; Main: X(S)=x : Y(S)=y

_180                              ForNextFarVarAdd                  _S _90 0xb0 0xb2
                                  LDWI                              _80
                                  CALL                              giga_vAC                    ; Main: next S : goto 80

_190                              LDWI                              0xfa8c
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  STW                               _x                          ; Main: x=X(S)

_200                              LDW                               _x
                                  ADDW                              _y
                                  PEEK                              
                                  XORI                              16
                                  CALL                              convertEqOpAddr
                                  JumpFalse                         _210 2
                                  LDWI                              _150
                                  CALL                              giga_vAC                    ; Main: if peek(x+y)=D then goto 150

_210                              LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  STW                               0xe8
                                  LDWI                              0xfa8c
                                  ADDW                              _S
                                  ADDW                              _S
                                  DEEK                              
                                  ADDW                              0xe8
                                  STW                               0xea
                                  LDI                               127
                                  POKE                              0xea                        ; Main: poke Y(S)+X(S),C+64

_220                              LDWI                              0xf5d8
                                  ADDW                              _S
                                  ADDW                              _S
                                  STW                               memAddr
                                  LDI                               0
                                  DOKE                              memAddr
                                  LDWI                              _180
                                  CALL                              giga_vAC                    ; Main: Y(S)=0 : goto 180

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                      EQU     0xf302
convertEqOp                       EQU     0xf2ce
convertGtOp                       EQU     0xf2c5
setRealTimeProc0                  EQU     0xf2d7
rand16bit                         EQU     0xf2bd
resetVideoFlags                   EQU     0xf401
initClearFuncs                    EQU     0xf314
clearVertBlinds                   EQU     0xf37a
clearCursorRow                    EQU     0xf3b6
drawHLine                         EQU     0xf57b
resetMidi                         EQU     0xf350
playMidi                          EQU     0xf457
midiStartNote                     EQU     0xf40d
printInit                         EQU     0xf2e9
printText                         EQU     0xf505
printChar                         EQU     0xf4a7
atTextCursor                      EQU     0xf32b
newLineScroll                     EQU     0xf51e
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y8        EQU     register2
drawVLine_y2        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15


drawHLine           PUSH
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LDW     drawHLine_x2
                    STW     drawLine_tmp
                    LDW     drawHLine_x1
                    STW     drawHLine_x2
                    LDW     drawLine_tmp
                    STW     drawHLine_x1                    ; if x2 < x1 then swap x2 with x1
                    
drawHL_cont         LD      drawHLine_x1
                    ST      giga_sysArg4
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg5
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    SUBI    4
                    BLT     drawHL_loop1
                    
                    LD      fgbgColour + 1
                    ST      giga_sysArg0
                    ST      giga_sysArg1
                    ST      giga_sysArg2
                    ST      giga_sysArg3                    ; 4 pixels of fg colour
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    
                    LDW     drawHLine_x2        
                    SUBI    3
                    STW     drawHLine_x4                    ; 4 pixel chunks limit

drawHL_loop0        SYS     30
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      giga_sysArg4
                    ADDI    4
                    ST      giga_sysArg4
                    SUBW    drawHLine_x4
                    BLT     drawHL_loop0                    ; all 4 pixel chunks
                    
drawHL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg4
                    LD      giga_sysArg4
                    BEQ     drawHL_exit
                    SUBW    drawHLine_x2
                    BLE     drawHL_loop1                    ; remaining pixels
                    
drawHL_exit         POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


                    ; adds 10*16.66667ms delay between giga_frameCount and midiDelay so that if there ; is substantial processing between resetMidi and playMidi giga_frameCount will
                    ; not overflow past midiDelay and cause an extra initial 256*16.66667ms delay
resetMidi           LDI     0      
                    ST      giga_frameCount
                    ADDI    10
                    STW     midiDelay                       ; instant MIDI startup
                    LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMi_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr    
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMi_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0                     ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDW     midiCommand
                    ANDI    0xF0                    
                    XORI    0x90                            ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            			; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                            ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         			; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                            ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playM_exit1                     ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     midiPtr
                    LDW     midiStream                      ; midi note
                    PEEK
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                            ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                            ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; note address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr                         ; set note
                    
midiSN_exit         LDW     midiStream
                    ADDI    0x01                            ; midiStream++
                    STW     midiStream
                    RET

midiSetVolume       LDI     0xFA
                    ST      midiPtr                         ; wavA address 0x01FA <-> 0x04FA, (midiPtr is still valid from midiStartNote)
                    LDW     midiStream                      ; midi volume
                    PEEK
                    POKE    midiPtr
                    BRA     midiSN_exit                     ; save a few bytes by using midiStartNote's epilogue
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr                         ; end note
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

