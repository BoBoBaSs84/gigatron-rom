_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_10                               EQU                               0x0234
_20                               EQU                               0x024b
_25                               EQU                               0x0254
_30                               EQU                               0x0274
_35                               EQU                               0x0296
_40                               EQU                               0x02af
_45                               EQU                               0x02c6
_50                               EQU                               0x02ca
_100                              EQU                               0x030e
_110                              EQU                               0x038d
_120                              EQU                               0x03a1
_130                              EQU                               0x03b4
_140                              EQU                               0x03cc
_150                              EQU                               0x03dd
_160                              EQU                               0x03ee
_170                              EQU                               0x040f
_200                              EQU                               0x0416
_205                              EQU                               0x0424
_210                              EQU                               0x0431
_215                              EQU                               0x043e
_220                              EQU                               0x044b
_225                              EQU                               0x0458
_230                              EQU                               0x0465
_235                              EQU                               0x0472
_240                              EQU                               0x047f
_245                              EQU                               0x048c
_250                              EQU                               0x0499
_255                              EQU                               0x04a6
_254                              EQU                               0x04b5
_253                              EQU                               0x04ec
_page_0x0300                      EQU                               0x0300
_next_0x0385                      EQU                               0x0336
_page_0x0400                      EQU                               0x0400
_else_0x0544                      EQU                               0x04e1
_page_0x0500                      EQU                               0x0500
_else_0x0583                      EQU                               0x052a

; Global Variables
_K                                EQU                               0x0030
_X                                EQU                               0x0032
_M                                EQU                               0x0034
_N                                EQU                               0x0036
_I                                EQU                               0x0038
_A                                EQU                               0x003a
_B                                EQU                               0x003c
_L                                EQU                               0x003e
_F                                EQU                               0x0040
_U                                EQU                               0x0042
_R                                EQU                               0x0044
_pi                               EQU                               0x0046
_qi                               EQU                               0x0048
_S                                EQU                               0x004a
_C                                EQU                               0x004c
_timer                            EQU                               0x004e
_i                                EQU                               0x0050

; Local Variables

; Arrays
_P_array                          EQU                               0x7df0
_P_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_Q_array                          EQU                               0x7de0
_Q_array                          DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings

; Constant Strings
_str_0x7ddd                       EQU                               0x7ddd
_str_0x7ddd                       DB                                1 ' ' 0
_str_0x7dd8                       EQU                               0x7dd8
_str_0x7dd8                       DB                                3 '/60' 0

; Data

; Time
_timeArray_                       EQU                               0x7dd5
_timeArray_                       DB                                00 00 00
_timeString_                      EQU                               0x7dcb
_timeString_                      DB                                8 '00:00:00' 0

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      LDI                               0x20
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                                                    ; Main: INIT

                                  LDI                               0
                                  STW                               _K
                                  STW                               _X
                                  STW                               _M
                                  STW                               _N
                                  STW                               _I
                                  STW                               _A
                                  STW                               _B
                                  STW                               _L
                                  STW                               _F                          ; Main: K=0:X=K:M=X:N=M:I=N:A=I:B=A:L=B:F=L

                                  LDWI                              16128
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, &h3F00

_10                               LDI                               3
                                  STW                               graphicsMode
                                  ScanlineMode                      
                                  ClearVertBlinds                   
                                  LDI                               48
                                  STW                               _U
                                  LDWI                              _100
                                  CALL                              giga_vAC                    ; Main: MODE 3:CLS:U=48:GOTO 100

_20                               PUSH                              
                                  LDW                               _K
                                  ADDW                              _L
                                  ADDW                              _F
                                  STW                               _R                          ; Main: R=K+L+F

_25                               LDW                               _X
                                  STW                               mathX
                                  LDW                               _R
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  ADDI                              80
                                  STW                               _pi
                                  STW                               memValue
                                  LDWI                              0x7df0
                                  ADDW                              _I
                                  ADDW                              _I
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: pi=80+X/R : P(I)=pi

_30                               LDW                               _M
                                  SUBW                              _N
                                  STW                               mathX
                                  LDW                               _R
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  ADDI                              60
                                  STW                               _qi
                                  STW                               memValue
                                  LDWI                              0x7de0
                                  ADDW                              _I
                                  ADDW                              _I
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: qi=60+(M-N)/R : Q(I)=qi

_35                               LDI                               160
                                  SUBW                              _pi
                                  STW                               memValue
                                  LDW                               _I
                                  ADDI                              4
                                  STW                               memIndex0
                                  LDWI                              0x7df0
                                  ADDW                              memIndex0
                                  ADDW                              memIndex0
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: P(I+4)=160-pi

_40                               LDW                               _qi
                                  STW                               memValue
                                  LDW                               _I
                                  ADDI                              4
                                  STW                               memIndex0
                                  LDWI                              0x7de0
                                  ADDW                              memIndex0
                                  ADDW                              memIndex0
                                  STW                               memAddr
                                  LDW                               memValue
                                  DOKE                              memAddr                     ; Main: Q(I+4)=qi

_45                               INC                               _I
                                  Return                                                        ; Main: INC I : RETURN

_50                               PUSH                              
                                  LDWI                              0x7df0
                                  ADDW                              _A
                                  ADDW                              _A
                                  DEEK                              
                                  STW                               drawLine_x1
                                  LDWI                              0x7de0
                                  ADDW                              _A
                                  ADDW                              _A
                                  DEEK                              
                                  STW                               drawLine_y1
                                  LDWI                              0x7df0
                                  ADDW                              _B
                                  ADDW                              _B
                                  DEEK                              
                                  STW                               drawLine_x2
                                  LDWI                              0x7de0
                                  ADDW                              _B
                                  ADDW                              _B
                                  DEEK                              
                                  STW                               drawLine_y2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  DrawLine                          
                                  TickTime                          
                                  Return                                                        ; Main: LINE P(A), Q(A), P(B), Q(B) : tick time : RETURN

_100                              LDI                               45
                                  STW                               _S
                                  LDI                               45
                                  STW                               _C
                                  LDW                               _U
                                  LSLW                              
                                  LSLW                              
                                  STW                               _F                          ; Main: S=45:C=45:F=U LSL 2

                                  LDWI                              _110
                                  CALL                              giga_vAC                    ; Main: gosub 110

                                  LDI                               0
                                  STW                               timerTick
                                  LDI                               giga_frameCount
                                  STW                               timerPrev
                                  LDWI                              tickTime
                                  STW                               realTimeProc0               ; Main: init time, noupdate

                                  LDI                               0
                                  STW                               _timer                      ; Main: timer=0

                                  LDI                               0
                                  STW                               _i                          ; Main: for i=0 &to 100

_next_0x0385                      LDWI                              _254
                                  CALL                              giga_vAC                    ; Main: gosub 254

                                  ForNextInc                        _i _next_0x0385 100         ; Main: next i

                                  LDW                               timerTick
                                  STW                               _timer                      ; Main: timer = get("TIMER")

                                  LDW                               _timer
                                  STW                               mathX
                                  LDI                               60
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7ddd
                                  LDW                               _timer
                                  STW                               mathX
                                  LDI                               60
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  PrintAcInt16                      
                                  PrintString                       _str_0x7dd8
                                  NewLine                                                       ; Main: print timer/60;" ";timer % 60;"/60"

                                  HALT                                                          ; Main: end

_110                              PUSH                              
                                  LDI                               0
                                  STW                               _I
                                  LDW                               _U
                                  STW                               mathX
                                  LDW                               _U
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               _X                          ; Main: I=0:X=U*U

_120                              LDW                               _S
                                  STW                               _K
                                  LDW                               _U
                                  STW                               mathX
                                  LDW                               _C
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               _M                          ; Main: K=S:M=U*C

_130                              LDW                               _C
                                  STW                               _L
                                  LDW                               _U
                                  STW                               mathX
                                  LDW                               _S
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               _N
                                  LDWI                              _20
                                  CALL                              giga_vAC                    ; Main: L=C:N=U*S:GOSUB 20

_140                              LDI                               0
                                  SUBW                              _L
                                  STW                               _L
                                  LDI                               0
                                  SUBW                              _N
                                  STW                               _N
                                  LDWI                              _20
                                  CALL                              giga_vAC                    ; Main: L=-L:N=-N:GOSUB 20

_150                              LDI                               0
                                  SUBW                              _K
                                  STW                               _K
                                  LDI                               0
                                  SUBW                              _M
                                  STW                               _M
                                  LDWI                              _20
                                  CALL                              giga_vAC                    ; Main: K=-K:M=-M:GOSUB 20

_160                              LDI                               0
                                  SUBW                              _L
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  STW                               _L
                                  LDI                               0
                                  SUBW                              _N
                                  STW                               _N
                                  LDWI                              _20
                                  CALL                              giga_vAC                    ; Main: L=-L:N=-N:GOSUB 20

_170                              LDWI                              _200
                                  CALL                              giga_vAC
                                  Return                                                        ; Main: GOSUB 200:RETURN

_200                              PUSH                              
                                  LDI                               0
                                  STW                               _A
                                  LDI                               1
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=0:B=1:GOSUB 50

_205                              LDI                               1
                                  STW                               _A
                                  LDI                               2
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=1:B=2:GOSUB 50

_210                              LDI                               2
                                  STW                               _A
                                  LDI                               3
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=2:B=3:GOSUB 50

_215                              LDI                               3
                                  STW                               _A
                                  LDI                               0
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=3:B=0:GOSUB 50

_220                              LDI                               4
                                  STW                               _A
                                  LDI                               5
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=4:B=5:GOSUB 50

_225                              LDI                               5
                                  STW                               _A
                                  LDI                               6
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=5:B=6:GOSUB 50

_230                              LDI                               6
                                  STW                               _A
                                  LDI                               7
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=6:B=7:GOSUB 50

_235                              LDI                               7
                                  STW                               _A
                                  LDI                               4
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=7:B=4:GOSUB 50

_240                              LDI                               4
                                  STW                               _A
                                  LDI                               0
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=4:B=0:GOSUB 50

_245                              LDI                               5
                                  STW                               _A
                                  LDI                               1
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=5:B=1:GOSUB 50

_250                              LDI                               6
                                  STW                               _A
                                  LDI                               2
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=6:B=2:GOSUB 50

_255                              LDI                               7
                                  STW                               _A
                                  LDI                               3
                                  STW                               _B
                                  LDWI                              _50
                                  CALL                              giga_vAC                    ; Main: A=7:B=3:GOSUB 50

                                  Return                                                        ; Main: return

_254                              PUSH                              
                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238 'disable video output

                                  LDI                               0
                                  ST                                fgbgColour + 1
                                  LDWI                              _200
                                  CALL                              giga_vAC                    ; Main: set FG_COLOUR, &h00 : gosub 200 'erase cube

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 0 'enable video output

                                  LDW                               _S
                                  ADDI                              5
                                  STW                               _S
                                  SUBI                              45
                                  BLT                               _else_0x0544
                                  LDWI                              -40
                                  STW                               _S                          ; Main: S = S + 5 : if S &&>= 45 then S = -40

_else_0x0544                      LDI                               63
                                  ST                                fgbgColour + 1
                                  LDWI                              _110
                                  CALL                              giga_vAC                    ; Main: set FG_COLOUR, &h3F : gosub 110 'draw cube

                                  Return                                                        ; Main: return

_253                              PUSH                              
                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238 'disable video output

                                  LDI                               0
                                  ST                                fgbgColour + 1
                                  LDWI                              _200
                                  CALL                              giga_vAC                    ; Main: set FG_COLOUR, &h00 : gosub 200 'erase cube

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               0
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 0 'enable video output

                                  LDW                               _S
                                  SUBI                              5
                                  STW                               _S
                                  LDWI                              -45
                                  SUBW                              _S
                                  BLE                               _else_0x0583
                                  LDI                               40
                                  STW                               _S                          ; Main: S = S - 5 : if S &&<= -45 then S = 40

_else_0x0583                      LDI                               63
                                  ST                                fgbgColour + 1
                                  LDWI                              _110
                                  CALL                              giga_vAC                    ; Main: set FG_COLOUR, &h3F : gosub 110 'draw cube

                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x75b0
multiply16bit                     EQU     0x73cb
divide16bit                       EQU     0x7aa8
scanlineMode                      EQU     0x79a0
resetVideoFlags                   EQU     0x78a2
initClearFuncs                    EQU     0x74a2
clearVertBlinds                   EQU     0x74c9
clearCursorRow                    EQU     0x72cf
drawLine                          EQU     0x79aa
drawLineExt                       EQU     0x76c6
drawLineLoop                      EQU     0x77c3
drawLineLoadXY                    EQU     0x7da0
printInit                         EQU     0x74b3
printText                         EQU     0x76ad
printDigit                        EQU     0x77a1
printInt16                        EQU     0x78ae
printChar                         EQU     0x7ba7
newLineScroll                     EQU     0x7ca2
tickTime                          EQU     0x73a1
handleTime                        EQU     0x75c7
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET




drawLine            PUSH                                    ; matches drawLineLoop's POP
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2                     ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2                    ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                               ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h                      ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1                    ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy                     ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2                    ; if(sx < sy) dy2 = -1
    
drawL_ext           LDWI    drawLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawLineExt
                    CALL    giga_vAC



drawLineExt         LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    LDI     0
                    STW     drawLine_dx2                    ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx                     ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawL_num
                    LDI     1
                    STW     drawLine_dy2                    ; if(h > 0) dy2 = 1
    
drawL_num           LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     48
                    ADDI    1
                    STW     drawLine_num                    ; numerator = sx>>1
                    STW     drawLine_count                  ; for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawLineLoadDXY
                    CALL    giga_vAC
                    LDWI    drawLineLoop
                    CALL    giga_vAC


drawLineLoop        LD      fgbgColour + 1
                    POKE    drawLine_xy1                    ; plot start pixel
                    POKE    drawLine_xy2                    ; plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num                    ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawL_flip                      ; if(numerator <= sx) goto flip
                    STW     drawLine_num                    ; numerator -= sx
                    
                    LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1                    ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2                    ; xy2 -= dxy1
                    BRA     drawL_count
                    
drawL_flip          LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1                    ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2                    ; xy2 -= dxy2

%if TIME_SLICING
drawL_count         CALL    realTimeStubAddr
                    LDW     drawLine_count
%else
drawL_count         LDW     drawLine_count
%endif
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawLineLoop
                    POP                                     ;matches drawLine's PUSH
                    RET


drawLineLoadXY      LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_xy1 + 1                ;xy1 = x1 | ((y1+8)<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ADDI    8
                    ST      drawLine_xy2 + 1                ;xy2 = x2 | ((y2+8)<<8)
                    RET
                    
drawLineLoadDXY     LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     28
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1                   ;dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     28
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2                   ;dxy2 = dx2 + (dy2<<8)
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET



timeByte            EQU     register0
timeDigit           EQU     register4
timeArrAddr         EQU     register5
timeStrAddr         EQU     register6
timeTmp             EQU     register7


tickTime            LD      giga_frameCount
                    STW     timeTmp
                    LD      timerPrev
                    XORW    timeTmp
                    BEQ     tickT_exit
                    LDW     timerTick
                    ADDI    1
                    STW     timerTick                           ; 1/60 user timer, (max time = 546.116 seconds)
                    LD      timeTmp
                    ST      timerPrev
                    INC     timerPrev + 1                       ; 1/60 internal counter
                    LD      timerPrev + 1
                    XORI    60
                    BNE     tickT_exit
                    LDI     0
                    ST      timerPrev + 1
                    PUSH
                    LDWI    handleTime                          ; handle time every second
                    CALL    giga_vAC
                    POP

tickT_exit          RET                    


handleTime          LDWI    _timeArray_
                    STW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; seconds
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset seconds
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; minutes
                    XORI    60
                    BNE     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset minutes
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; hours
handleT_mode        XORI    24                                  ; [handleT_mode + 1] = 12 hour/24 hour
                    BNE     handleT_exit
handleT_epoch       LDI     0                                   ; [handleT_epoch + 1] = start hour
                    POKE    timeArrAddr                         ; reset hours

handleT_exit        RET                    

