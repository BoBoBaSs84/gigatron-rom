_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0xffa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x03dc
_254                              EQU                               0x0465
_253                              EQU                               0x0477
_191                              EQU                               0x048d
_127                              EQU                               0x0494
_calcPitch                        EQU                               0x049b
_next_0x0262                      EQU                               0x0251
_endif_0x02a2                     EQU                               0x027f
_else_0x02e2                      EQU                               0x02ad
_endif_0x02e6                     EQU                               0x02b1
_next_0x031d                      EQU                               0x02e0
_page_0x0300                      EQU                               0x0300
_else_0x033a                      EQU                               0x0307
_endif_0x0342                     EQU                               0x030d
_else_0x035d                      EQU                               0x031e
_endif_0x0365                     EQU                               0x0324
_next_0x03c6                      EQU                               0x037f
_endif_0x03e0                     EQU                               0x0393
_next_0x03e4                      EQU                               0x0397
_page_0x0400                      EQU                               0x0400
_next_0x045d                      EQU                               0x0410
_repeat_0x0487                    EQU                               0x0436
_else_0x04e6                      EQU                               0x0475
_else_0x0502                      EQU                               0x048b

; Global Variables
_y                                EQU                               0x0030
_x                                EQU                               0x0032
_i                                EQU                               0x0034
_j                                EQU                               0x0036
_a                                EQU                               0x0038
_pitch                            EQU                               0x003a
_yy                               EQU                               0x003c
_color1                           EQU                               0x003e
_color2                           EQU                               0x0040
_fade                             EQU                               0x0042
_cIndex                           EQU                               0x0044
_decay                            EQU                               0x0046
_p                                EQU                               0x0048
_v                                EQU                               0x004a
_q                                EQU                               0x004c

; Local Variables

; Arrays
_c1_array                         EQU                               0xff3a
_c1_array                         DW                                0x003f 0x002a 0x0015 
_c2_array                         EQU                               0xff34
_c2_array                         DW                                0x0003 0x0002 0x0001 
_sky_array                        EQU                               0xff2e
_sky_array                        DW                                0x0010 0x0020 0x0030 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x8000                  EQU                               0x8000
def_bytes_0x8000                  DB                                144 57 145 33 145 33 144 57 146 45 22 128 129 1 144 55 
def_bytes_0x8010                  EQU                               0x8010
def_bytes_0x8010                  DB                                145 33 145 33 7 144 57 128 130 15 144 33 144 33 129 7 
def_bytes_0x8020                  EQU                               0x8020
def_bytes_0x8020                  DB                                145 57 15 146 55 144 33 144 33 129 8 145 57 130 7 145 
def_bytes_0x8030                  EQU                               0x8030
def_bytes_0x8030                  DB                                55 8 145 57 144 33 144 33 7 145 55 8 145 57 144 33 
def_bytes_0x8040                  EQU                               0x8040
def_bytes_0x8040                  DB                                144 33 7 145 55 8 145 57 144 36 144 36 22 128 129 1 
def_bytes_0x8050                  EQU                               0x8050
def_bytes_0x8050                  DB                                144 55 145 36 145 36 7 144 57 15 145 36 145 36 7 128 
def_bytes_0x8060                  EQU                               0x8060
def_bytes_0x8060                  DB                                1 144 57 14 146 55 145 36 145 36 128 8 144 57 130 7 
def_bytes_0x8070                  EQU                               0x8070
def_bytes_0x8070                  DB                                144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 
def_bytes_0x8080                  EQU                               0x8080
def_bytes_0x8080                  DB                                36 145 36 7 144 55 8 144 57 145 31 145 31 22 128 129 
def_bytes_0x8090                  EQU                               0x8090
def_bytes_0x8090                  DB                                1 144 55 145 31 145 31 7 144 57 15 145 31 145 31 7 
def_bytes_0x80a0                  EQU                               0x80a0
def_bytes_0x80a0                  DB                                128 1 144 57 14 146 55 145 31 145 31 128 8 144 57 130 
def_bytes_0x80b0                  EQU                               0x80b0
def_bytes_0x80b0                  DB                                7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 
def_bytes_0x80c0                  EQU                               0x80c0
def_bytes_0x80c0                  DB                                145 31 145 31 7 144 55 8 144 57 145 33 145 33 22 128 
def_bytes_0x80d0                  EQU                               0x80d0
def_bytes_0x80d0                  DB                                129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 
def_bytes_0x80e0                  EQU                               0x80e0
def_bytes_0x80e0                  DB                                7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 
def_bytes_0x80f0                  EQU                               0x80f0
def_bytes_0x80f0                  DB                                130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 
def_bytes_0x8100                  EQU                               0x8100
def_bytes_0x8100                  DB                                57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 22 
def_bytes_0x8110                  EQU                               0x8110
def_bytes_0x8110                  DB                                128 129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 
def_bytes_0x8120                  EQU                               0x8120
def_bytes_0x8120                  DB                                33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 
def_bytes_0x8130                  EQU                               0x8130
def_bytes_0x8130                  DB                                57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 
def_bytes_0x8140                  EQU                               0x8140
def_bytes_0x8140                  DB                                144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 
def_bytes_0x8150                  EQU                               0x8150
def_bytes_0x8150                  DB                                22 128 129 1 144 55 145 36 145 36 7 144 57 15 145 36 
def_bytes_0x8160                  EQU                               0x8160
def_bytes_0x8160                  DB                                145 36 7 128 1 144 57 14 146 55 145 36 145 36 128 8 
def_bytes_0x8170                  EQU                               0x8170
def_bytes_0x8170                  DB                                144 57 130 7 144 55 8 144 57 145 36 145 36 7 144 55 
def_bytes_0x8180                  EQU                               0x8180
def_bytes_0x8180                  DB                                8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 
def_bytes_0x8190                  EQU                               0x8190
def_bytes_0x8190                  DB                                31 22 128 129 1 144 55 145 31 145 31 7 144 57 15 145 
def_bytes_0x81a0                  EQU                               0x81a0
def_bytes_0x81a0                  DB                                31 145 31 7 128 1 144 57 14 146 55 145 31 145 31 128 
def_bytes_0x81b0                  EQU                               0x81b0
def_bytes_0x81b0                  DB                                8 144 57 130 7 144 55 8 144 57 145 31 145 31 7 144 
def_bytes_0x81c0                  EQU                               0x81c0
def_bytes_0x81c0                  DB                                55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 
def_bytes_0x81d0                  EQU                               0x81d0
def_bytes_0x81d0                  DB                                145 33 22 128 129 1 144 55 145 33 145 33 7 144 57 15 
def_bytes_0x81e0                  EQU                               0x81e0
def_bytes_0x81e0                  DB                                145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 
def_bytes_0x81f0                  EQU                               0x81f0
def_bytes_0x81f0                  DB                                128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 
def_bytes_0x8200                  EQU                               0x8200
def_bytes_0x8200                  DB                                144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 
def_bytes_0x8210                  EQU                               0x8210
def_bytes_0x8210                  DB                                33 145 33 146 69 15 130 146 69 7 128 129 1 144 55 145 
def_bytes_0x8220                  EQU                               0x8220
def_bytes_0x8220                  DB                                33 145 33 146 69 7 144 57 146 72 7 146 69 8 145 33 
def_bytes_0x8230                  EQU                               0x8230
def_bytes_0x8230                  DB                                145 33 146 69 7 128 1 144 57 146 69 7 146 72 7 147 
def_bytes_0x8240                  EQU                               0x8240
def_bytes_0x8240                  DB                                55 145 33 145 33 146 69 128 8 144 57 131 7 144 55 8 
def_bytes_0x8250                  EQU                               0x8250
def_bytes_0x8250                  DB                                144 57 145 33 145 33 146 69 7 144 55 8 144 57 145 33 
def_bytes_0x8260                  EQU                               0x8260
def_bytes_0x8260                  DB                                145 33 7 144 55 8 144 57 145 36 145 36 146 72 15 130 
def_bytes_0x8270                  EQU                               0x8270
def_bytes_0x8270                  DB                                146 72 7 128 129 1 144 55 145 36 145 36 146 72 7 144 
def_bytes_0x8280                  EQU                               0x8280
def_bytes_0x8280                  DB                                57 146 76 7 146 72 8 145 36 145 36 146 72 7 128 1 
def_bytes_0x8290                  EQU                               0x8290
def_bytes_0x8290                  DB                                144 57 146 72 7 146 76 7 147 55 145 36 145 36 146 72 
def_bytes_0x82a0                  EQU                               0x82a0
def_bytes_0x82a0                  DB                                128 8 144 57 131 7 144 55 8 144 57 145 36 145 36 146 
def_bytes_0x82b0                  EQU                               0x82b0
def_bytes_0x82b0                  DB                                72 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 
def_bytes_0x82c0                  EQU                               0x82c0
def_bytes_0x82c0                  DB                                57 145 31 145 31 146 67 15 130 146 67 7 128 129 1 144 
def_bytes_0x82d0                  EQU                               0x82d0
def_bytes_0x82d0                  DB                                55 145 31 145 31 146 67 7 144 57 146 71 7 146 67 8 
def_bytes_0x82e0                  EQU                               0x82e0
def_bytes_0x82e0                  DB                                145 31 145 31 146 67 7 128 1 144 57 146 67 7 146 71 
def_bytes_0x82f0                  EQU                               0x82f0
def_bytes_0x82f0                  DB                                7 147 55 145 31 145 31 146 67 128 8 144 57 131 7 144 
def_bytes_0x8300                  EQU                               0x8300
def_bytes_0x8300                  DB                                55 8 144 57 145 31 145 31 146 67 7 144 55 8 144 57 
def_bytes_0x8310                  EQU                               0x8310
def_bytes_0x8310                  DB                                145 31 145 31 7 144 55 8 144 57 145 33 145 33 146 69 
def_bytes_0x8320                  EQU                               0x8320
def_bytes_0x8320                  DB                                15 130 146 69 7 128 129 1 144 55 145 33 145 33 146 69 
def_bytes_0x8330                  EQU                               0x8330
def_bytes_0x8330                  DB                                7 144 57 146 72 7 146 69 8 145 33 145 33 146 69 7 
def_bytes_0x8340                  EQU                               0x8340
def_bytes_0x8340                  DB                                128 1 144 57 146 69 7 146 72 7 147 55 145 33 145 33 
def_bytes_0x8350                  EQU                               0x8350
def_bytes_0x8350                  DB                                146 69 128 8 144 57 131 7 144 55 8 144 57 145 33 145 
def_bytes_0x8360                  EQU                               0x8360
def_bytes_0x8360                  DB                                33 146 69 7 144 55 8 144 57 145 33 145 33 7 144 55 
def_bytes_0x8370                  EQU                               0x8370
def_bytes_0x8370                  DB                                8 144 57 145 33 145 33 146 69 15 130 146 69 7 128 129 
def_bytes_0x8380                  EQU                               0x8380
def_bytes_0x8380                  DB                                1 144 55 145 33 145 33 146 69 7 144 57 146 72 7 146 
def_bytes_0x8390                  EQU                               0x8390
def_bytes_0x8390                  DB                                69 8 145 33 145 33 146 69 7 128 1 144 57 146 69 7 
def_bytes_0x83a0                  EQU                               0x83a0
def_bytes_0x83a0                  DB                                146 72 7 147 55 145 33 145 33 146 69 128 8 144 57 131 
def_bytes_0x83b0                  EQU                               0x83b0
def_bytes_0x83b0                  DB                                7 144 55 8 144 57 145 33 145 33 146 69 7 144 55 8 
def_bytes_0x83c0                  EQU                               0x83c0
def_bytes_0x83c0                  DB                                144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 
def_bytes_0x83d0                  EQU                               0x83d0
def_bytes_0x83d0                  DB                                146 72 15 130 146 72 7 128 129 1 144 55 145 36 145 36 
def_bytes_0x83e0                  EQU                               0x83e0
def_bytes_0x83e0                  DB                                146 72 7 144 57 146 76 7 146 72 8 145 36 145 36 146 
def_bytes_0x83f0                  EQU                               0x83f0
def_bytes_0x83f0                  DB                                72 7 128 1 144 57 146 72 7 146 76 7 147 55 145 36 
def_bytes_0x8400                  EQU                               0x8400
def_bytes_0x8400                  DB                                145 36 146 72 128 8 144 57 131 7 144 55 8 144 57 145 
def_bytes_0x8410                  EQU                               0x8410
def_bytes_0x8410                  DB                                36 145 36 146 72 7 144 55 8 144 57 145 36 145 36 7 
def_bytes_0x8420                  EQU                               0x8420
def_bytes_0x8420                  DB                                144 55 8 144 57 145 31 145 31 146 67 15 130 146 67 7 
def_bytes_0x8430                  EQU                               0x8430
def_bytes_0x8430                  DB                                128 129 1 144 55 145 31 145 31 146 67 7 144 57 146 71 
def_bytes_0x8440                  EQU                               0x8440
def_bytes_0x8440                  DB                                7 146 67 8 145 31 145 31 146 67 7 128 1 144 57 146 
def_bytes_0x8450                  EQU                               0x8450
def_bytes_0x8450                  DB                                67 7 146 71 7 147 55 145 31 145 31 146 67 128 8 144 
def_bytes_0x8460                  EQU                               0x8460
def_bytes_0x8460                  DB                                57 131 7 144 55 8 144 57 145 31 145 31 146 67 7 144 
def_bytes_0x8470                  EQU                               0x8470
def_bytes_0x8470                  DB                                55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 
def_bytes_0x8480                  EQU                               0x8480
def_bytes_0x8480                  DB                                145 33 146 69 15 130 146 69 7 128 129 1 144 55 145 33 
def_bytes_0x8490                  EQU                               0x8490
def_bytes_0x8490                  DB                                145 33 146 69 7 144 57 146 72 7 146 69 8 145 33 145 
def_bytes_0x84a0                  EQU                               0x84a0
def_bytes_0x84a0                  DB                                33 146 69 7 128 1 144 57 146 69 7 146 72 7 147 55 
def_bytes_0x84b0                  EQU                               0x84b0
def_bytes_0x84b0                  DB                                145 33 145 33 146 69 128 8 144 57 131 7 144 55 8 144 
def_bytes_0x84c0                  EQU                               0x84c0
def_bytes_0x84c0                  DB                                57 145 33 145 33 146 69 7 144 55 8 144 57 145 33 145 
def_bytes_0x84d0                  EQU                               0x84d0
def_bytes_0x84d0                  DB                                33 7 144 55 8 144 33 144 33 145 69 130 15 144 33 144 
def_bytes_0x84e0                  EQU                               0x84e0
def_bytes_0x84e0                  DB                                33 7 129 8 145 69 15 144 33 144 33 7 129 1 144 33 
def_bytes_0x84f0                  EQU                               0x84f0
def_bytes_0x84f0                  DB                                144 33 7 145 69 7 144 33 144 33 145 69 8 144 33 144 
def_bytes_0x8500                  EQU                               0x8500
def_bytes_0x8500                  DB                                33 7 129 8 145 69 22 129 8 144 33 144 33 145 69 15 
def_bytes_0x8510                  EQU                               0x8510
def_bytes_0x8510                  DB                                144 33 144 33 145 69 15 145 69 15 144 33 144 33 145 69 
def_bytes_0x8520                  EQU                               0x8520
def_bytes_0x8520                  DB                                7 144 33 144 33 8 145 69 7 144 33 144 33 8 144 33 
def_bytes_0x8530                  EQU                               0x8530
def_bytes_0x8530                  DB                                144 33 145 69 15 145 69 15 145 69 15 146 57 144 33 144 
def_bytes_0x8540                  EQU                               0x8540
def_bytes_0x8540                  DB                                33 129 22 128 130 1 144 55 145 33 145 33 7 144 57 15 
def_bytes_0x8550                  EQU                               0x8550
def_bytes_0x8550                  DB                                145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 
def_bytes_0x8560                  EQU                               0x8560
def_bytes_0x8560                  DB                                128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 
def_bytes_0x8570                  EQU                               0x8570
def_bytes_0x8570                  DB                                144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 
def_bytes_0x8580                  EQU                               0x8580
def_bytes_0x8580                  DB                                36 145 36 22 128 129 1 144 55 145 36 145 36 7 144 57 
def_bytes_0x8590                  EQU                               0x8590
def_bytes_0x8590                  DB                                15 145 36 145 36 7 128 1 144 57 14 146 55 145 36 145 
def_bytes_0x85a0                  EQU                               0x85a0
def_bytes_0x85a0                  DB                                36 128 8 144 57 130 7 144 55 8 144 57 145 36 145 36 
def_bytes_0x85b0                  EQU                               0x85b0
def_bytes_0x85b0                  DB                                7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 
def_bytes_0x85c0                  EQU                               0x85c0
def_bytes_0x85c0                  DB                                145 31 145 31 22 128 129 1 144 55 145 31 145 31 7 144 
def_bytes_0x85d0                  EQU                               0x85d0
def_bytes_0x85d0                  DB                                57 15 145 31 145 31 7 128 1 144 57 14 146 55 145 31 
def_bytes_0x85e0                  EQU                               0x85e0
def_bytes_0x85e0                  DB                                145 31 128 8 144 57 130 7 144 55 8 144 57 145 31 145 
def_bytes_0x85f0                  EQU                               0x85f0
def_bytes_0x85f0                  DB                                31 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 
def_bytes_0x8600                  EQU                               0x8600
def_bytes_0x8600                  DB                                57 145 33 145 33 22 128 129 1 144 55 145 33 145 33 7 
def_bytes_0x8610                  EQU                               0x8610
def_bytes_0x8610                  DB                                144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 
def_bytes_0x8620                  EQU                               0x8620
def_bytes_0x8620                  DB                                33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 
def_bytes_0x8630                  EQU                               0x8630
def_bytes_0x8630                  DB                                145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 
def_bytes_0x8640                  EQU                               0x8640
def_bytes_0x8640                  DB                                144 57 145 33 145 33 144 57 22 128 129 1 144 55 145 33 
def_bytes_0x8650                  EQU                               0x8650
def_bytes_0x8650                  DB                                145 33 144 55 7 144 57 144 57 15 145 33 145 33 7 128 
def_bytes_0x8660                  EQU                               0x8660
def_bytes_0x8660                  DB                                1 144 57 144 57 14 146 55 145 33 145 33 146 55 128 8 
def_bytes_0x8670                  EQU                               0x8670
def_bytes_0x8670                  DB                                144 57 144 57 130 7 144 55 144 55 8 144 57 145 33 145 
def_bytes_0x8680                  EQU                               0x8680
def_bytes_0x8680                  DB                                33 144 57 7 144 55 144 55 8 144 57 145 33 145 33 144 
def_bytes_0x8690                  EQU                               0x8690
def_bytes_0x8690                  DB                                57 7 144 55 144 55 8 144 57 145 36 145 36 144 57 22 
def_bytes_0x86a0                  EQU                               0x86a0
def_bytes_0x86a0                  DB                                128 129 1 144 55 145 36 145 36 144 55 7 144 57 144 57 
def_bytes_0x86b0                  EQU                               0x86b0
def_bytes_0x86b0                  DB                                15 145 36 145 36 7 128 1 144 57 144 57 14 146 55 145 
def_bytes_0x86c0                  EQU                               0x86c0
def_bytes_0x86c0                  DB                                36 145 36 146 55 128 8 144 57 144 57 130 7 144 55 144 
def_bytes_0x86d0                  EQU                               0x86d0
def_bytes_0x86d0                  DB                                55 8 144 57 145 36 145 36 144 57 7 144 55 144 55 8 
def_bytes_0x86e0                  EQU                               0x86e0
def_bytes_0x86e0                  DB                                144 57 145 36 145 36 144 57 7 144 55 144 55 8 144 57 
def_bytes_0x86f0                  EQU                               0x86f0
def_bytes_0x86f0                  DB                                145 31 145 31 144 57 22 128 129 1 144 55 145 31 145 31 
def_bytes_0x8700                  EQU                               0x8700
def_bytes_0x8700                  DB                                144 55 7 144 57 144 57 15 145 31 145 31 7 128 1 144 
def_bytes_0x8710                  EQU                               0x8710
def_bytes_0x8710                  DB                                57 144 57 14 146 55 145 31 145 31 146 55 128 8 144 57 
def_bytes_0x8720                  EQU                               0x8720
def_bytes_0x8720                  DB                                144 57 130 7 144 55 144 55 8 144 57 145 31 145 31 144 
def_bytes_0x8730                  EQU                               0x8730
def_bytes_0x8730                  DB                                57 7 144 55 144 55 8 144 57 145 31 145 31 144 57 7 
def_bytes_0x8740                  EQU                               0x8740
def_bytes_0x8740                  DB                                144 55 144 55 8 144 33 144 33 145 45 146 57 22 128 1 
def_bytes_0x8750                  EQU                               0x8750
def_bytes_0x8750                  DB                                144 33 144 33 7 145 57 146 45 15 144 33 144 33 15 145 
def_bytes_0x8760                  EQU                               0x8760
def_bytes_0x8760                  DB                                57 146 45 7 144 33 144 33 23 144 33 144 33 145 57 146 
def_bytes_0x8770                  EQU                               0x8770
def_bytes_0x8770                  DB                                45 15 144 33 144 33 15 145 57 144 33 144 33 147 69 129 
def_bytes_0x8780                  EQU                               0x8780
def_bytes_0x8780                  DB                                130 15 131 145 69 7 128 1 144 55 146 33 146 33 145 69 
def_bytes_0x8790                  EQU                               0x8790
def_bytes_0x8790                  DB                                7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 
def_bytes_0x87a0                  EQU                               0x87a0
def_bytes_0x87a0                  DB                                128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 
def_bytes_0x87b0                  EQU                               0x87b0
def_bytes_0x87b0                  DB                                145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 
def_bytes_0x87c0                  EQU                               0x87c0
def_bytes_0x87c0                  DB                                33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 
def_bytes_0x87d0                  EQU                               0x87d0
def_bytes_0x87d0                  DB                                8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 
def_bytes_0x87e0                  EQU                               0x87e0
def_bytes_0x87e0                  DB                                1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 
def_bytes_0x87f0                  EQU                               0x87f0
def_bytes_0x87f0                  DB                                72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 
def_bytes_0x8800                  EQU                               0x8800
def_bytes_0x8800                  DB                                145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 
def_bytes_0x8810                  EQU                               0x8810
def_bytes_0x8810                  DB                                7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 
def_bytes_0x8820                  EQU                               0x8820
def_bytes_0x8820                  DB                                144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 
def_bytes_0x8830                  EQU                               0x8830
def_bytes_0x8830                  DB                                145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 
def_bytes_0x8840                  EQU                               0x8840
def_bytes_0x8840                  DB                                145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 
def_bytes_0x8850                  EQU                               0x8850
def_bytes_0x8850                  DB                                67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 
def_bytes_0x8860                  EQU                               0x8860
def_bytes_0x8860                  DB                                146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 
def_bytes_0x8870                  EQU                               0x8870
def_bytes_0x8870                  DB                                31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 
def_bytes_0x8880                  EQU                               0x8880
def_bytes_0x8880                  DB                                144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 
def_bytes_0x8890                  EQU                               0x8890
def_bytes_0x8890                  DB                                128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 
def_bytes_0x88a0                  EQU                               0x88a0
def_bytes_0x88a0                  DB                                7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 
def_bytes_0x88b0                  EQU                               0x88b0
def_bytes_0x88b0                  DB                                69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 
def_bytes_0x88c0                  EQU                               0x88c0
def_bytes_0x88c0                  DB                                57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 
def_bytes_0x88d0                  EQU                               0x88d0
def_bytes_0x88d0                  DB                                55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 33 
def_bytes_0x88e0                  EQU                               0x88e0
def_bytes_0x88e0                  DB                                146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 
def_bytes_0x88f0                  EQU                               0x88f0
def_bytes_0x88f0                  DB                                146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 
def_bytes_0x8900                  EQU                               0x8900
def_bytes_0x8900                  DB                                33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 
def_bytes_0x8910                  EQU                               0x8910
def_bytes_0x8910                  DB                                146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 
def_bytes_0x8920                  EQU                               0x8920
def_bytes_0x8920                  DB                                57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 
def_bytes_0x8930                  EQU                               0x8930
def_bytes_0x8930                  DB                                33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 
def_bytes_0x8940                  EQU                               0x8940
def_bytes_0x8940                  DB                                72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 
def_bytes_0x8950                  EQU                               0x8950
def_bytes_0x8950                  DB                                145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 
def_bytes_0x8960                  EQU                               0x8960
def_bytes_0x8960                  DB                                57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 
def_bytes_0x8970                  EQU                               0x8970
def_bytes_0x8970                  DB                                8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 
def_bytes_0x8980                  EQU                               0x8980
def_bytes_0x8980                  DB                                7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 
def_bytes_0x8990                  EQU                               0x8990
def_bytes_0x8990                  DB                                146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 
def_bytes_0x89a0                  EQU                               0x89a0
def_bytes_0x89a0                  DB                                146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 
def_bytes_0x89b0                  EQU                               0x89b0
def_bytes_0x89b0                  DB                                31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 
def_bytes_0x89c0                  EQU                               0x89c0
def_bytes_0x89c0                  DB                                147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 
def_bytes_0x89d0                  EQU                               0x89d0
def_bytes_0x89d0                  DB                                8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 
def_bytes_0x89e0                  EQU                               0x89e0
def_bytes_0x89e0                  DB                                31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 
def_bytes_0x89f0                  EQU                               0x89f0
def_bytes_0x89f0                  DB                                129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 
def_bytes_0x8a00                  EQU                               0x8a00
def_bytes_0x8a00                  DB                                144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 
def_bytes_0x8a10                  EQU                               0x8a10
def_bytes_0x8a10                  DB                                1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 
def_bytes_0x8a20                  EQU                               0x8a20
def_bytes_0x8a20                  DB                                69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 
def_bytes_0x8a30                  EQU                               0x8a30
def_bytes_0x8a30                  DB                                145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 
def_bytes_0x8a40                  EQU                               0x8a40
def_bytes_0x8a40                  DB                                144 28 144 28 145 64 130 3 146 52 57 145 67 3 146 55 
def_bytes_0x8a50                  EQU                               0x8a50
def_bytes_0x8a50                  DB                                27 145 69 3 146 57 27 144 26 144 26 145 62 3 130 146 
def_bytes_0x8a60                  EQU                               0x8a60
def_bytes_0x8a60                  DB                                50 57 145 65 3 147 53 130 27 145 67 3 146 55 131 27 
def_bytes_0x8a70                  EQU                               0x8a70
def_bytes_0x8a70                  DB                                144 28 144 28 145 64 3 146 52 57 145 67 3 146 55 27 
def_bytes_0x8a80                  EQU                               0x8a80
def_bytes_0x8a80                  DB                                145 69 3 146 57 27 144 26 144 26 145 62 3 130 146 50 
def_bytes_0x8a90                  EQU                               0x8a90
def_bytes_0x8a90                  DB                                57 145 65 3 147 53 130 27 145 67 3 146 55 131 27 147 
def_bytes_0x8aa0                  EQU                               0x8aa0
def_bytes_0x8aa0                  DB                                57 144 33 144 33 145 69 3 130 12 129 145 69 7 128 131 
def_bytes_0x8ab0                  EQU                               0x8ab0
def_bytes_0x8ab0                  DB                                1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 
def_bytes_0x8ac0                  EQU                               0x8ac0
def_bytes_0x8ac0                  DB                                69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 
def_bytes_0x8ad0                  EQU                               0x8ad0
def_bytes_0x8ad0                  DB                                145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 
def_bytes_0x8ae0                  EQU                               0x8ae0
def_bytes_0x8ae0                  DB                                7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 
def_bytes_0x8af0                  EQU                               0x8af0
def_bytes_0x8af0                  DB                                144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 
def_bytes_0x8b00                  EQU                               0x8b00
def_bytes_0x8b00                  DB                                145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 
def_bytes_0x8b10                  EQU                               0x8b10
def_bytes_0x8b10                  DB                                145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 
def_bytes_0x8b20                  EQU                               0x8b20
def_bytes_0x8b20                  DB                                72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 
def_bytes_0x8b30                  EQU                               0x8b30
def_bytes_0x8b30                  DB                                146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 
def_bytes_0x8b40                  EQU                               0x8b40
def_bytes_0x8b40                  DB                                36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 
def_bytes_0x8b50                  EQU                               0x8b50
def_bytes_0x8b50                  DB                                144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 
def_bytes_0x8b60                  EQU                               0x8b60
def_bytes_0x8b60                  DB                                128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 
def_bytes_0x8b70                  EQU                               0x8b70
def_bytes_0x8b70                  DB                                7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 
def_bytes_0x8b80                  EQU                               0x8b80
def_bytes_0x8b80                  DB                                67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 
def_bytes_0x8b90                  EQU                               0x8b90
def_bytes_0x8b90                  DB                                57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 
def_bytes_0x8ba0                  EQU                               0x8ba0
def_bytes_0x8ba0                  DB                                55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 
def_bytes_0x8bb0                  EQU                               0x8bb0
def_bytes_0x8bb0                  DB                                146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 
def_bytes_0x8bc0                  EQU                               0x8bc0
def_bytes_0x8bc0                  DB                                146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 
def_bytes_0x8bd0                  EQU                               0x8bd0
def_bytes_0x8bd0                  DB                                33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 
def_bytes_0x8be0                  EQU                               0x8be0
def_bytes_0x8be0                  DB                                146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 
def_bytes_0x8bf0                  EQU                               0x8bf0
def_bytes_0x8bf0                  DB                                57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 
def_bytes_0x8c00                  EQU                               0x8c00
def_bytes_0x8c00                  DB                                33 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 
def_bytes_0x8c10                  EQU                               0x8c10
def_bytes_0x8c10                  DB                                69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 
def_bytes_0x8c20                  EQU                               0x8c20
def_bytes_0x8c20                  DB                                145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 
def_bytes_0x8c30                  EQU                               0x8c30
def_bytes_0x8c30                  DB                                57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 
def_bytes_0x8c40                  EQU                               0x8c40
def_bytes_0x8c40                  DB                                8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 
def_bytes_0x8c50                  EQU                               0x8c50
def_bytes_0x8c50                  DB                                7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 
def_bytes_0x8c60                  EQU                               0x8c60
def_bytes_0x8c60                  DB                                146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 
def_bytes_0x8c70                  EQU                               0x8c70
def_bytes_0x8c70                  DB                                146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 
def_bytes_0x8c80                  EQU                               0x8c80
def_bytes_0x8c80                  DB                                36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 
def_bytes_0x8c90                  EQU                               0x8c90
def_bytes_0x8c90                  DB                                147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 
def_bytes_0x8ca0                  EQU                               0x8ca0
def_bytes_0x8ca0                  DB                                8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 
def_bytes_0x8cb0                  EQU                               0x8cb0
def_bytes_0x8cb0                  DB                                36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 
def_bytes_0x8cc0                  EQU                               0x8cc0
def_bytes_0x8cc0                  DB                                129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 
def_bytes_0x8cd0                  EQU                               0x8cd0
def_bytes_0x8cd0                  DB                                144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 
def_bytes_0x8ce0                  EQU                               0x8ce0
def_bytes_0x8ce0                  DB                                1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 
def_bytes_0x8cf0                  EQU                               0x8cf0
def_bytes_0x8cf0                  DB                                67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 
def_bytes_0x8d00                  EQU                               0x8d00
def_bytes_0x8d00                  DB                                145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 
def_bytes_0x8d10                  EQU                               0x8d10
def_bytes_0x8d10                  DB                                144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 
def_bytes_0x8d20                  EQU                               0x8d20
def_bytes_0x8d20                  DB                                144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 
def_bytes_0x8d30                  EQU                               0x8d30
def_bytes_0x8d30                  DB                                8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 
def_bytes_0x8d40                  EQU                               0x8d40
def_bytes_0x8d40                  DB                                72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 
def_bytes_0x8d50                  EQU                               0x8d50
def_bytes_0x8d50                  DB                                144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 
def_bytes_0x8d60                  EQU                               0x8d60
def_bytes_0x8d60                  DB                                57 146 33 146 33 7 144 55 8 144 33 144 33 145 69 130 
def_bytes_0x8d70                  EQU                               0x8d70
def_bytes_0x8d70                  DB                                22 129 8 145 69 22 129 8 144 33 144 33 145 69 7 145 
def_bytes_0x8d80                  EQU                               0x8d80
def_bytes_0x8d80                  DB                                69 15 129 8 145 69 22 129 8 144 33 144 33 145 69 15 
def_bytes_0x8d90                  EQU                               0x8d90
def_bytes_0x8d90                  DB                                145 69 15 145 69 15 145 69 15 144 33 144 33 145 69 15 
def_bytes_0x8da0                  EQU                               0x8da0
def_bytes_0x8da0                  DB                                145 69 15 145 69 15 145 69 15 144 33 144 33 145 69 22 
def_bytes_0x8db0                  EQU                               0x8db0
def_bytes_0x8db0                  DB                                129 8 145 69 22 129 8 144 33 144 33 145 69 7 145 69 
def_bytes_0x8dc0                  EQU                               0x8dc0
def_bytes_0x8dc0                  DB                                15 129 8 145 69 22 129 8 144 33 144 33 145 69 15 145 
def_bytes_0x8dd0                  EQU                               0x8dd0
def_bytes_0x8dd0                  DB                                69 15 145 69 15 145 69 15 144 33 144 33 145 69 7 128 
def_bytes_0x8de0                  EQU                               0x8de0
def_bytes_0x8de0                  DB                                8 129 45 144 28 144 28 145 64 3 146 52 57 145 67 3 
def_bytes_0x8df0                  EQU                               0x8df0
def_bytes_0x8df0                  DB                                146 55 27 145 69 3 146 57 27 144 26 144 26 145 62 3 
def_bytes_0x8e00                  EQU                               0x8e00
def_bytes_0x8e00                  DB                                130 146 50 57 145 65 3 147 53 130 27 145 67 3 146 55 
def_bytes_0x8e10                  EQU                               0x8e10
def_bytes_0x8e10                  DB                                131 27 144 28 144 28 145 64 3 146 52 57 145 67 3 146 
def_bytes_0x8e20                  EQU                               0x8e20
def_bytes_0x8e20                  DB                                55 27 145 69 3 146 57 27 144 26 144 26 145 62 3 130 
def_bytes_0x8e30                  EQU                               0x8e30
def_bytes_0x8e30                  DB                                146 50 57 145 65 3 147 53 130 27 145 67 3 146 55 131 
def_bytes_0x8e40                  EQU                               0x8e40
def_bytes_0x8e40                  DB                                27 144 33 144 33 129 3 130 57 144 33 144 33 60 144 33 
def_bytes_0x8e50                  EQU                               0x8e50
def_bytes_0x8e50                  DB                                144 33 60 144 33 144 33 30 145 57 146 45 30 144 33 144 
def_bytes_0x8e60                  EQU                               0x8e60
def_bytes_0x8e60                  DB                                33 129 130 22 128 1 144 33 144 33 22 144 33 144 33 22 
def_bytes_0x8e70                  EQU                               0x8e70
def_bytes_0x8e70                  DB                                144 33 144 33 23 144 33 144 33 15 144 33 144 33 15 144 
def_bytes_0x8e80                  EQU                               0x8e80
def_bytes_0x8e80                  DB                                36 144 36 22 128 1 144 36 144 36 22 144 36 144 36 22 
def_bytes_0x8e90                  EQU                               0x8e90
def_bytes_0x8e90                  DB                                144 36 144 36 23 144 36 144 36 15 144 36 144 36 15 144 
def_bytes_0x8ea0                  EQU                               0x8ea0
def_bytes_0x8ea0                  DB                                31 144 31 22 128 1 144 31 144 31 22 144 31 144 31 22 
def_bytes_0x8eb0                  EQU                               0x8eb0
def_bytes_0x8eb0                  DB                                144 31 144 31 23 144 31 144 31 15 144 31 144 31 15 144 
def_bytes_0x8ec0                  EQU                               0x8ec0
def_bytes_0x8ec0                  DB                                33 144 33 22 128 1 144 33 144 33 22 144 33 144 33 22 
def_bytes_0x8ed0                  EQU                               0x8ed0
def_bytes_0x8ed0                  DB                                144 33 144 33 23 144 33 144 33 15 144 33 144 33 15 145 
def_bytes_0x8ee0                  EQU                               0x8ee0
def_bytes_0x8ee0                  DB                                57 144 33 144 33 22 128 129 1 144 55 145 33 145 33 7 
def_bytes_0x8ef0                  EQU                               0x8ef0
def_bytes_0x8ef0                  DB                                144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 
def_bytes_0x8f00                  EQU                               0x8f00
def_bytes_0x8f00                  DB                                33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 
def_bytes_0x8f10                  EQU                               0x8f10
def_bytes_0x8f10                  DB                                145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 
def_bytes_0x8f20                  EQU                               0x8f20
def_bytes_0x8f20                  DB                                144 57 145 36 145 36 22 128 129 1 144 55 145 36 145 36 
def_bytes_0x8f30                  EQU                               0x8f30
def_bytes_0x8f30                  DB                                7 144 57 15 145 36 145 36 7 128 1 144 57 14 146 55 
def_bytes_0x8f40                  EQU                               0x8f40
def_bytes_0x8f40                  DB                                145 36 145 36 128 8 144 57 130 7 144 55 8 144 57 145 
def_bytes_0x8f50                  EQU                               0x8f50
def_bytes_0x8f50                  DB                                36 145 36 7 144 55 8 144 57 145 36 145 36 7 144 55 
def_bytes_0x8f60                  EQU                               0x8f60
def_bytes_0x8f60                  DB                                8 144 57 145 31 145 31 22 128 129 1 144 55 145 31 145 
def_bytes_0x8f70                  EQU                               0x8f70
def_bytes_0x8f70                  DB                                31 7 144 57 15 145 31 145 31 7 128 1 144 57 14 146 
def_bytes_0x8f80                  EQU                               0x8f80
def_bytes_0x8f80                  DB                                55 145 31 145 31 128 8 144 57 130 7 144 55 8 144 57 
def_bytes_0x8f90                  EQU                               0x8f90
def_bytes_0x8f90                  DB                                145 31 145 31 7 144 55 8 144 57 145 31 145 31 7 144 
def_bytes_0x8fa0                  EQU                               0x8fa0
def_bytes_0x8fa0                  DB                                55 8 144 33 144 33 145 45 146 57 22 128 1 144 33 144 
def_bytes_0x8fb0                  EQU                               0x8fb0
def_bytes_0x8fb0                  DB                                33 7 145 57 146 45 15 144 33 144 33 15 145 57 146 45 
def_bytes_0x8fc0                  EQU                               0x8fc0
def_bytes_0x8fc0                  DB                                7 144 33 144 33 23 144 33 144 33 145 57 146 45 15 144 
def_bytes_0x8fd0                  EQU                               0x8fd0
def_bytes_0x8fd0                  DB                                33 144 33 15 145 57 144 33 144 33 147 69 129 130 15 131 
def_bytes_0x8fe0                  EQU                               0x8fe0
def_bytes_0x8fe0                  DB                                145 69 7 128 1 144 55 146 33 146 33 145 69 7 144 57 
def_bytes_0x8ff0                  EQU                               0x8ff0
def_bytes_0x8ff0                  DB                                145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 
def_bytes_0x9000                  EQU                               0x9000
def_bytes_0x9000                  DB                                57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 
def_bytes_0x9010                  EQU                               0x9010
def_bytes_0x9010                  DB                                8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 
def_bytes_0x9020                  EQU                               0x9020
def_bytes_0x9020                  DB                                7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 
def_bytes_0x9030                  EQU                               0x9030
def_bytes_0x9030                  DB                                146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 
def_bytes_0x9040                  EQU                               0x9040
def_bytes_0x9040                  DB                                146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 
def_bytes_0x9050                  EQU                               0x9050
def_bytes_0x9050                  DB                                36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 
def_bytes_0x9060                  EQU                               0x9060
def_bytes_0x9060                  DB                                147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 
def_bytes_0x9070                  EQU                               0x9070
def_bytes_0x9070                  DB                                8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 
def_bytes_0x9080                  EQU                               0x9080
def_bytes_0x9080                  DB                                36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 
def_bytes_0x9090                  EQU                               0x9090
def_bytes_0x9090                  DB                                129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 
def_bytes_0x90a0                  EQU                               0x90a0
def_bytes_0x90a0                  DB                                144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 
def_bytes_0x90b0                  EQU                               0x90b0
def_bytes_0x90b0                  DB                                1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 
def_bytes_0x90c0                  EQU                               0x90c0
def_bytes_0x90c0                  DB                                67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 
def_bytes_0x90d0                  EQU                               0x90d0
def_bytes_0x90d0                  DB                                145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 
def_bytes_0x90e0                  EQU                               0x90e0
def_bytes_0x90e0                  DB                                144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 
def_bytes_0x90f0                  EQU                               0x90f0
def_bytes_0x90f0                  DB                                144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 
def_bytes_0x9100                  EQU                               0x9100
def_bytes_0x9100                  DB                                8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 
def_bytes_0x9110                  EQU                               0x9110
def_bytes_0x9110                  DB                                72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 
def_bytes_0x9120                  EQU                               0x9120
def_bytes_0x9120                  DB                                144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 
def_bytes_0x9130                  EQU                               0x9130
def_bytes_0x9130                  DB                                57 146 33 146 33 7 144 55 8 144 57 146 33 146 33 145 
def_bytes_0x9140                  EQU                               0x9140
def_bytes_0x9140                  DB                                69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 
def_bytes_0x9150                  EQU                               0x9150
def_bytes_0x9150                  DB                                69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 
def_bytes_0x9160                  EQU                               0x9160
def_bytes_0x9160                  DB                                7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 
def_bytes_0x9170                  EQU                               0x9170
def_bytes_0x9170                  DB                                33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 
def_bytes_0x9180                  EQU                               0x9180
def_bytes_0x9180                  DB                                146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 
def_bytes_0x9190                  EQU                               0x9190
def_bytes_0x9190                  DB                                55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 
def_bytes_0x91a0                  EQU                               0x91a0
def_bytes_0x91a0                  DB                                130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 
def_bytes_0x91b0                  EQU                               0x91b0
def_bytes_0x91b0                  DB                                145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 
def_bytes_0x91c0                  EQU                               0x91c0
def_bytes_0x91c0                  DB                                7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 
def_bytes_0x91d0                  EQU                               0x91d0
def_bytes_0x91d0                  DB                                131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 
def_bytes_0x91e0                  EQU                               0x91e0
def_bytes_0x91e0                  DB                                8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 
def_bytes_0x91f0                  EQU                               0x91f0
def_bytes_0x91f0                  DB                                31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 
def_bytes_0x9200                  EQU                               0x9200
def_bytes_0x9200                  DB                                31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 
def_bytes_0x9210                  EQU                               0x9210
def_bytes_0x9210                  DB                                145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 
def_bytes_0x9220                  EQU                               0x9220
def_bytes_0x9220                  DB                                31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 
def_bytes_0x9230                  EQU                               0x9230
def_bytes_0x9230                  DB                                146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 
def_bytes_0x9240                  EQU                               0x9240
def_bytes_0x9240                  DB                                7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 
def_bytes_0x9250                  EQU                               0x9250
def_bytes_0x9250                  DB                                7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 
def_bytes_0x9260                  EQU                               0x9260
def_bytes_0x9260                  DB                                72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 
def_bytes_0x9270                  EQU                               0x9270
def_bytes_0x9270                  DB                                145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 
def_bytes_0x9280                  EQU                               0x9280
def_bytes_0x9280                  DB                                144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 
def_bytes_0x9290                  EQU                               0x9290
def_bytes_0x9290                  DB                                144 55 8 144 57 146 33 146 33 7 144 55 8 144 33 144 
def_bytes_0x92a0                  EQU                               0x92a0
def_bytes_0x92a0                  DB                                33 129 130 15 144 33 144 33 15 144 33 144 33 15 144 33 
def_bytes_0x92b0                  EQU                               0x92b0
def_bytes_0x92b0                  DB                                144 33 15 144 33 144 33 15 128 208 0 128 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_numericLabs                  EQU                               0xff24
_lut_numericLabs                  DW                                254 253 191 127 0x0000
_lut_numericAddrs                 EQU                               0xff1c
_lut_numericAddrs                 DW                                0x0465 0x0477 0x048d 0x0494 

; Code
_entryPoint_                      Initialise                        
                                  InitRealTimeStub                
%define TIME_SLICING                                                                            ; Main: INIT

                                  LD                                0x21
                                  ORI                               3
                                  ST                                33                          ; Main: poke &h21, peek(&h21) OR 3

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDI                               238
                                  POKE                              register0                   ; Main: set VIDEO_TOP, 238 'disables video output, cls becomes almost instant

                                  ClearVertBlinds                                               ; Main: cls

                                  LDI                               0
                                  STW                               _y
                                  STW                               _x
                                  STW                               _i
                                  STW                               _j
                                  STW                               _a
                                  STW                               _pitch
                                  STW                               _yy                         ; Main: y=0 : x=y : i=x : j=i : a=j : pitch=a : yy=pitch

                                  LDI                               63
                                  STW                               _color1
                                  LDI                               3
                                  STW                               _color2                     ; Main: color1 = &h3F : color2 = &h03

                                  LDI                               0
                                  STW                               _fade
                                  STW                               _cIndex
                                  LDI                               54
                                  STW                               _decay                      ; Main: fade=0 : cIndex=fade : decay=54

                                  LDI                               119
                                  STW                               _y                          ; Main: for y=119 downto horizonY

_next_0x0262                      LDWI                              0xff3a
                                  ADDW                              _cIndex
                                  ADDW                              _cIndex
                                  DEEK                              
                                  STW                               _color1
                                  LDWI                              0xff34
                                  ADDW                              _cIndex
                                  ADDW                              _cIndex
                                  DEEK                              
                                  STW                               _color2                     ; Main: color1 = c1(cIndex) : color2 = c2(cIndex)

                                  INC                               _fade                       ; Main: inc fade

                                  LDW                               _fade
                                  XORW                              _decay
                                  BNE                               _endif_0x02a2               ; Main: if fade &&= decay

                                  INC                               _cIndex                     ; Main: inc cIndex

                                  LDI                               0
                                  STW                               _fade                       ; Main: fade = 0

                                  LDW                               _decay
                                  STW                               mathShift
                                  ShiftRight1bit                    
                                  STW                               _decay                      ; Main: decay = decay LSR 1

_endif_0x02a2                     LDW                               _y
                                  STW                               _yy                         ; Main: yy = y

                                  LDWI                              _calcPitch
                                  CALL                              giga_vAC                    ; Main: gosub calcPitch

                                  LDW                               _y
                                  SUBI                              32
                                  ADDI                              40
                                  STW                               0xe8
                                  LDWI                              400
                                  STW                               mathX
                                  LDW                               0xe8
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  ANDI                              1
                                  XORI                              0
                                  BNE                               _else_0x02e2                ; Main: if((400 / (y-horizonY+40)) AND 1) &&= 0

                                  LDW                               _color1
                                  XORW                              _color2
                                  STW                               _j
                                  BRA                               _endif_0x02e6               ; Main: j = color1 XOR color2

_else_0x02e2                      LDI                               0
                                  STW                               _j                          ; Main: j = 0

_endif_0x02e6                     LDI                               80
                                  STW                               mathX
                                  LDW                               _pitch
                                  STW                               mathY
                                  LDWI                              divide16bit
                                  CALL                              giga_vAC
                                  LDW                               mathRem
                                  STW                               _i                          ; Main: i = 80 % pitch

                                  LDW                               _y
                                  ADDI                              8
                                  STW                               0xe8
                                  LD                                0xe8
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  STW                               _a                          ; Main: a = ((y + 8) LSL 8)

                                  LDI                               0
                                  STW                               _x
                                  LDW                               _pitch
                                  ADDI                              159
                                  STW                               0xb4
                                  LDI                               1
                                  STW                               0xb6                        ; Main: for x=0 to pitch + 159

_next_0x031d                      LDW                               _i
                                  XORI                              0
                                  JumpEQ                            _else_0x033a 3              ; Main: if i &= 0

                                  LDW                               _pitch
                                  SUBI                              1
                                  STW                               _i
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  LDWI                              _endif_0x0342
                                  CALL                              giga_vAC                    ; Main: i = pitch - 1

_else_0x033a                      LDW                               _i
                                  SUBI                              1
                                  STW                               _i                          ; Main: i = i - 1

_endif_0x0342                     LDW                               _i
                                  ADDW                              _i
                                  SUBW                              _pitch
                                  BLT                               _else_0x035d                ; Main: if i+i &&>= pitch

                                  LDW                               _color1
                                  XORW                              _j
                                  STW                               _p
                                  BRA                               _endif_0x0365               ; Main: p = color1 XOR j

_else_0x035d                      LDW                               _color2
                                  XORW                              _j
                                  STW                               _p                          ; Main: p = color2 XOR j

_endif_0x0365                     LDW                               _a
                                  ADDW                              _x
                                  STW                               0xe8
                                  LDW                               _p
                                  POKE                              0xe8                        ; Main: poke a+x, p

                                  ForNextFarVarAdd                  _x _next_0x031d 0xb4 0xb6   ; Main: next x

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDW                               _y
                                  ADDW                              _y
                                  POKE                              register0                   ; Main: set VIDEO_TOP, y+y

                                  ForNextFarDec                     _y _next_0x0262 32          ; Main: next y

                                  LDWI                              playMidi
                                  STW                               realTimeProc0
                                  LDWI                              setRealTimeProc0
                                  CALL                              giga_vAC                    ; Main: init midi

                                  LDI                               3
                                  ST                                waveType + 1
                                  LDWI                              -32768
                                  PlayMidi                                                      ; Main: play midi,&h8000,3

                                  LDI                               0
                                  STW                               _fade
                                  STW                               _cIndex
                                  LDI                               5
                                  STW                               _decay                      ; Main: fade=0 : cIndex=fade : decay = 5

                                  LDI                               31
                                  STW                               _y                          ; Main: for y=horizonY-1 &downto 0

_next_0x03c6                      INC                               _fade                       ; Main: inc fade

                                  LDW                               _fade
                                  XORW                              _decay
                                  BNE                               _endif_0x03e0               ; Main: if fade &&= decay

                                  INC                               _cIndex                     ; Main: inc cIndex

                                  LDI                               0
                                  STW                               _fade                       ; Main: fade = 0

                                  LDW                               _decay
                                  LSLW                              
                                  STW                               _decay                      ; Main: decay = decay LSL 1

_endif_0x03e0                     LDI                               0
                                  STW                               _x                          ; Main: for x=0 &to 159

_next_0x03e4                      LDW                               _y
                                  ADDI                              8
                                  STW                               0xe8
                                  LD                                0xe8
                                  ST                                giga_vAC + 1
                                  ORI                               0xFF
                                  XORI                              0xFF
                                  STW                               _a                          ; Main: a = ((y + 8) LSL 8)

                                  LDW                               _a
                                  ADDW                              _x
                                  STW                               0xe8
                                  LDWI                              0xff2e
                                  ADDW                              _cIndex
                                  ADDW                              _cIndex
                                  DEEK                              
                                  POKE                              0xe8                        ; Main: poke a+x, sky(cIndex)

                                  ForNextInc                        _x _next_0x03e4 159         ; Main: next x

                                  LDWI                              giga_videoTop
                                  STW                               register0
                                  LDW                               _y
                                  ADDW                              _y
                                  POKE                              register0                   ; Main: set VIDEO_TOP, y+y

                                  ForNextDecZero                    _y _next_0x03c6             ; Main: next y

                                  LDI                               0
                                  STW                               _x
                                  LDI                               8
                                  STW                               _v                          ; Main: x=0 : v=8

_loop                             LDW                               _x
                                  ANDI                              255
                                  STW                               _i                          ; Main: i = x AND 255

                                  LDI                               0
                                  STW                               _j                          ; Main: j = 0

                                  LDWI                              496
                                  STW                               _q                          ; Main: q = &h0100 + 240

                                  LDI                               32
                                  STW                               _yy                         ; Main: yy = horizonY

                                  LDWI                              _calcPitch
                                  STLW                              0xFE
                                  LDWI                              _page_0x0400
                                  CALL                              giga_vAC
_page_0x0400                      LDLW                              0xFE
                                  CALL                              giga_vAC                    ; Main: gosub calcPitch

                                  LDI                               0
                                  STW                               _y
                                  LDW                               _pitch
                                  STW                               0xb0
                                  LDI                               1
                                  STW                               0xb2                        ; Main: for y=0 to pitch

_next_0x045d                      LDW                               _j
                                  ADDW                              _i
                                  STW                               _j                          ; Main: j = j + i

                                  ForNextFarVarAdd                  _y _next_0x045d 0xb0 0xb2   ; Main: next y

                                  LDW                               _i
                                  ADDW                              _i
                                  STW                               _i                          ; Main: i = i + i

                                  LDWI                              321
                                  STW                               _p                          ; Main: p = &h0101 + horizonY + horizonY

                                  WaitVBlank                                                    ; Main: wait

_repeat_0x0487                    LD                                _j + 1
                                  POKE                              _p                          ; Main: poke p, j LSR 8

                                  LDW                               _j
                                  ANDI                              255
                                  ADDW                              _i
                                  STW                               _j                          ; Main: j = i + (j AND 255)

                                  LDW                               _p
                                  ADDI                              4
                                  STW                               _p
                                  SUBW                              _q
                                  BLT                               _repeat_0x0487              ; Main: p = p + 4 : until p &&>= q

                                  LD                                giga_buttonState
                                  STW                               numericLabel
                                  LDI                               0
                                  STW                               defaultLabel
                                  GosubNumeric                                                  ; Main: gosub get("BUTTON_STATE")

                                  LDW                               _x
                                  ADDW                              _v
                                  STW                               _x                          ; Main: x = x + v

                                  LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: goto loop

_254                              PUSH                              
                                  LDW                               _v
                                  ADDI                              1
                                  STW                               _v
                                  SUBI                              32
                                  BLE                               _else_0x04e6
                                  LDI                               32
                                  STW                               _v                          ; Main: v = v + 1 : if v &&> 32 then v = 32

_else_0x04e6                      Return                                                        ; Main: return

_253                              PUSH                              
                                  LDW                               _v
                                  SUBI                              1
                                  STW                               _v
                                  LDWI                              -32
                                  SUBW                              _v
                                  BLT                               _else_0x0502
                                  LDWI                              -32
                                  STW                               _v                          ; Main: v = v - 1 : if v &&< -32 then v = -32

_else_0x0502                      Return                                                        ; Main: return

_191                              PUSH                              
                                  LDI                               0
                                  STW                               _v
                                  Return                                                        ; Main: v = 0 : return

_127                              PUSH                              
                                  LDI                               0
                                  STW                               _v
                                  Return                                                        ; Main: v = 0 : return

_calcPitch                        PUSH                              
                                  LDWI                              -23
                                  ADDW                              _yy
                                  STW                               _pitch                      ; Main: pitch = yy + (96 - 120 + 1)

                                  LDW                               _pitch
                                  ADDI                              1
                                  STW                               0xe8
                                  LDWI                              0xfffe
                                  ANDW                              0xe8
                                  STW                               _pitch                      ; Main: pitch = (pitch + 1) AND &hfffe

                                  Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                      EQU     0xfd55
setRealTimeProc0                  EQU     0xfd43
divide16bit                       EQU     0xfea8
shiftRight1bit                    EQU     0xfd2d
gosubNumericLabel                 EQU     0xfd91
waitVBlank                        EQU     0xfe02
resetVideoFlags                   EQU     0xfd37
initClearFuncs                    EQU     0xff05
clearVertBlinds                   EQU     0xfdc3
resetMidi                         EQU     0xfd67
playMidi                          EQU     0xfe58
midiStartNote                     EQU     0xfe0e
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y8        EQU     register2
drawVLine_y2        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


                    ; adds 10*16.66667ms delay between giga_frameCount and midiDelay so that if there ; is substantial processing between resetMidi and playMidi giga_frameCount will
                    ; not overflow past midiDelay and cause an extra initial 256*16.66667ms delay
resetMidi           LDI     0      
                    ST      giga_frameCount
                    ADDI    10
                    STW     midiDelay                       ; instant MIDI startup
                    LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMi_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr    
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMi_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0                     ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDW     midiCommand
                    ANDI    0xF0                    
                    XORI    0x90                            ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            			; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                            ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         			; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                            ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playM_exit1                     ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable - 22            ; giga_notesTable + (midi - 11)*2
                    STW     midiPtr
                    LDW     midiStream                      ; midi note
                    PEEK
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                            ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                            ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; note address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr                         ; set note
                    
midiSN_exit         LDW     midiStream
                    ADDI    0x01                            ; midiStream++
                    STW     midiStream
                    RET

midiSetVolume       LDI     0xFA
                    ST      midiPtr                         ; wavA address 0x01FA <-> 0x04FA, (midiPtr is still valid from midiStartNote)
                    LDW     midiStream                      ; midi volume
                    PEEK
                    POKE    midiPtr
                    BRA     midiSN_exit                     ; save a few bytes by using midiStartNote's epilogue
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr                         ; end note
                    RET

