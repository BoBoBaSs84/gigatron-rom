_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x0217
_ellipse                          EQU                               0x027f
_else_0x025d                      EQU                               0x0247
_endif_0x0261                     EQU                               0x024b
_while_0x0318                     EQU                               0x02da
_page_0x0300                      EQU                               0x0300
_else_0x0355                      EQU                               0x0317
_endif_0x0373                     EQU                               0x032f
_wend_0x03a8                      EQU                               0x0360

; Global Variables
_color                            EQU                               0x0030
_a                                EQU                               0x0032
_b                                EQU                               0x0034
_t                                EQU                               0x0036
_mx                               EQU                               0x0038
_my                               EQU                               0x003a
_pixel                            EQU                               0x003c
_mx1                              EQU                               0x003e
_my1                              EQU                               0x0040
_mx2                              EQU                               0x0042
_my2                              EQU                               0x0044
_aa                               EQU                               0x0046
_dx                               EQU                               0x0048
_bb                               EQU                               0x004a
_dy                               EQU                               0x004c
_r                                EQU                               0x004e
_rx                               EQU                               0x0050
_ry                               EQU                               0x0052
_x                                EQU                               0x0054

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  ClearVertBlinds                                               ; Main: cls

_loop                             Rand                              
                                  ANDI                              63
                                  STW                               _color                      ; Main: color = rnd(0) AND &h3F

                                  LDI                               0x27
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _a
                                  LDI                               0x27
                                  RandMod                           
                                  ADDI                              1
                                  STW                               _b                          ; Main: a = rnd(39) + 1 : b = rnd(39) + 1

                                  LDW                               _a
                                  SUBW                              _b
                                  BLE                               _else_0x025d                ; Main: if a &&> b

                                  LDW                               _a
                                  STW                               _t
                                  BRA                               _endif_0x0261               ; Main: t = a

_else_0x025d                      LDW                               _b
                                  STW                               _t                          ; Main: t = b

_endif_0x0261                     LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDI                               160
                                  SUBW                              0xea
                                  RandMod                           
                                  ADDW                              _t
                                  STW                               _mx                         ; Main: mx = rnd(160 - (t LSL 1)) + t

                                  LDW                               _t
                                  LSLW                              
                                  STW                               0xea
                                  LDI                               120
                                  SUBW                              0xea
                                  RandMod                           
                                  ADDW                              _t
                                  STW                               _my                         ; Main: my = rnd(120 - (t LSL 1)) + t

                                  LDWI                              _ellipse
                                  CALL                              giga_vAC                    ; Main: gosub ellipse

                                  LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: goto loop

                                  HALT                                                          ; Main: end

_ellipse                          PUSH                              
                                  LDW                               _mx
                                  ST                                _pixel
                                  LDW                               _my
                                  ADDI                              8
                                  ST                                _pixel + 1                  ; Main: pixel.lo = mx : pixel.hi = my + 8

                                  LDW                               _pixel
                                  ADDW                              _a
                                  STW                               0xe8
                                  LDW                               _color
                                  POKE                              0xe8                        ; Main: poke pixel + a, color

                                  LDW                               _pixel
                                  SUBW                              _a
                                  STW                               0xe8
                                  LDW                               _color
                                  POKE                              0xe8                        ; Main: poke pixel - a, color

                                  LDW                               _mx
                                  SUBW                              _a
                                  STW                               _mx1
                                  LDW                               _my
                                  STW                               _my1                        ; Main: mx1 = mx - a : my1 = my

                                  LDW                               _mx
                                  ADDW                              _a
                                  STW                               _mx2
                                  LDW                               _my
                                  STW                               _my2                        ; Main: mx2 = mx + a : my2 = my

                                  LDW                               _a
                                  STW                               _aa
                                  LSLW                              
                                  STW                               _dx                         ; Main: aa = a      : dx = aa LSL 1

                                  LDW                               _b
                                  STW                               _bb
                                  LSLW                              
                                  STW                               _dy                         ; Main: bb = b      : dy = bb LSL 1

                                  LDW                               _a
                                  STW                               mathX
                                  LDW                               _bb
                                  STW                               mathY
                                  LDWI                              multiply16bit
                                  CALL                              giga_vAC
                                  STW                               _r
                                  LSLW                              
                                  STW                               _rx                         ; Main: r  = a * bb : rx = r  LSL 1

                                  LDI                               0
                                  STW                               _ry                         ; Main: ry = 0

                                  LDW                               _a
                                  STW                               _x                          ; Main: x  = a

_while_0x0318                     LDW                               _x
                                  JumpGT                            _wend_0x03a8 4              ; Main: while x &> 0

                                  LDW                               _r
                                  JumpGT                            _else_0x0355 2              ; Main: if r &> 0

                                  INC                               _my1
                                  LDW                               _my2
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  SUBI                              1
                                  STW                               _my2                        ; Main: inc my1 : dec my2

                                  LDW                               _ry
                                  ADDW                              _dx
                                  STW                               _ry
                                  LDW                               _r
                                  SUBW                              _ry
                                  STW                               _r
                                  LDWI                              _endif_0x0373
                                  CALL                              giga_vAC                    ; Main: ry = ry + dx : r = r - ry

_else_0x0355                      LDW                               _x
                                  SUBI                              1
                                  STW                               _x
                                  INC                               _mx1
                                  LDW                               _mx2
                                  SUBI                              1
                                  STW                               _mx2                        ; Main: dec x : inc mx1 : dec mx2

                                  LDW                               _rx
                                  SUBW                              _dy
                                  STW                               _rx
                                  ADDW                              _r
                                  STW                               _r                          ; Main: rx = rx - dy : r = rx + r

_endif_0x0373                     LDW                               _my1
                                  ADDI                              8
                                  ST                                _pixel + 1                  ; Main: pixel.hi = my1 + 8

                                  LDW                               _mx1
                                  ST                                _pixel
                                  LDW                               _color
                                  POKE                              _pixel                      ; Main: pixel.lo = mx1 : poke pixel, color

                                  LDW                               _mx2
                                  ST                                _pixel
                                  LDW                               _color
                                  POKE                              _pixel                      ; Main: pixel.lo = mx2 : poke pixel, color

                                  LDW                               _my2
                                  ADDI                              8
                                  ST                                _pixel + 1                  ; Main: pixel.hi = my2 + 8

                                  LDW                               _mx1
                                  ST                                _pixel
                                  LDW                               _color
                                  POKE                              _pixel                      ; Main: pixel.lo = mx1 : poke pixel, color

                                  LDW                               _mx2
                                  ST                                _pixel
                                  LDW                               _color
                                  POKE                              _pixel                      ; Main: pixel.lo = mx2 : poke pixel, color

                                  LDWI                              _while_0x0318
                                  CALL                              giga_vAC                    ; Main: wend

_wend_0x03a8                      Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

multiply16bit                     EQU     0x7bcb
divide16bit                       EQU     0x7da8
rand16bit                         EQU     0x7da0
randMod16bit                      EQU     0x7bb8
resetVideoFlags                   EQU     0x7ca0
initClearFuncs                    EQU     0x7cac
clearVertBlinds                   EQU     0x7cc3
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

%if TIME_SLICING
multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
%else
multiply16_exit     LDW     mathSum
%endif
                    RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top

%if TIME_SLICING
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
%else
clearVB_loop        LD      top
%endif
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

