_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x02c0
_page_0x0300                      EQU                               0x0300
_else_0x0377                      EQU                               0x033e

; Global Variables
_x                                EQU                               0x0030
_y                                EQU                               0x0032
_c                                EQU                               0x0034

; Local Variables

; Arrays

; Strings

; Constant Strings
_str_0x7de5                       EQU                               0x7de5
_str_0x7de5                       DB                                25 '_________________________' 0
_str_0x7dca                       EQU                               0x7dca
_str_0x7dca                       DB                                25 '  Random Pixel Flipping  ' 0
_str_0x7daf                       EQU                               0x7daf
_str_0x7daf                       DB                                25 '1234567890987654321012345' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      LDI                               0x20
                                  STW                               romType
                                  RomCheck                          
                                  Initialise                                                    ; Main: INIT

                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  LDWI                              8224
                                  STW                               fgbgColour                  ; Main: set fgbg_colour, &h2020

                                  LDI                               0
                                  STW                               drawRectF_x1
                                  LDI                               0
                                  STW                               drawRectF_y1
                                  LDI                               159
                                  STW                               drawRectF_x2
                                  LDI                               59
                                  STW                               drawRectF_y2
                                  DrawRectF                                                     ; Main: rectf 0, 0, 159, 59

                                  LDI                               0
                                  ST                                fgbgColour + 1              ; Main: set fg_colour, &h00

                                  LDI                               0
                                  STW                               drawRectF_x1
                                  LDI                               60
                                  STW                               drawRectF_y1
                                  LDI                               159
                                  STW                               drawRectF_x2
                                  LDI                               119
                                  STW                               drawRectF_y2
                                  DrawRectF                                                     ; Main: rectf 0, 60, 159, 119

                                  LDI                               3
                                  ST                                fgbgColour + 1              ; Main: set fg_colour, &h03

                                  PrintString                       _str_0x7de5
                                  NewLine                                                       ; Main: print "_________________________"

                                  NewLine                                                       ; Main: print

                                  LDI                               12
                                  ST                                fgbgColour + 1              ; Main: set fg_colour, &h0C

                                  PrintString                       _str_0x7dca
                                  NewLine                                                       ; Main: print "  Random Pixel Flipping  "

                                  LDI                               15
                                  ST                                fgbgColour + 1              ; Main: set fg_colour, &h0F

                                  PrintString                       _str_0x7de5
                                  NewLine                                                       ; Main: print "_________________________"

                                  NewLine                                                       ; Main: print

                                  LDI                               51
                                  ST                                fgbgColour + 1              ; Main: set fg_colour, &h33

                                  PrintString                       _str_0x7daf
                                  NewLine                                                       ; Main: print "1234567890987654321012345"

                                  LDI                               60
                                  ST                                fgbgColour + 1              ; Main: set fg_colour, &h3C

                                  PrintString                       _str_0x7de5
                                  NewLine                                                       ; Main: print "_________________________"

_loop                             Rand                              
                                  ANDI                              127
                                  STW                               0xe8
                                  Rand                              
                                  ANDI                              31
                                  ADDW                              0xe8
                                  STW                               0xea
                                  Rand                              
                                  ANDI                              1
                                  ADDW                              0xea
                                  STW                               _x                          ; Main: x = (rnd(0) AND &h7F) + (rnd(0) AND &h1F) + (rnd(0) AND &h01)

                                  Rand                              
                                  ANDI                              31
                                  STW                               0xe8
                                  Rand                              
                                  ANDI                              7
                                  ADDW                              0xe8
                                  STW                               0xea
                                  STLW                              0xFE
                                  LDWI                              _page_0x0300
                                  CALL                              giga_vAC
_page_0x0300                      LDLW                              0xFE
                                  Rand                              
                                  ANDI                              7
                                  ADDW                              0xea
                                  STW                               0xec
                                  Rand                              
                                  ANDI                              7
                                  ADDW                              0xec
                                  STW                               0xee
                                  Rand                              
                                  ANDI                              7
                                  ADDW                              0xee
                                  STW                               _y                          ; Main: y = (rnd(0) AND &h1F) + (rnd(0) AND &h07) + (rnd(0) AND &h07) + (rnd(0) AND &h07) + (rnd(0) AND &h07)

                                  LDW                               _x
                                  ST                                readPixel_xy
                                  LDW                               _y
                                  ST                                readPixel_xy + 1
                                  ReadPixel                         
                                  STW                               _c
                                  ANDI                              128
                                  XORI                              128
                                  BNE                               _else_0x0377
                                  LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: c = point(x, y) : if(c AND 0x80) &&= 0x80 then goto loop

_else_0x0377                      LDI                               159
                                  SUBW                              _x
                                  ST                                drawPixel_xy
                                  LDI                               119
                                  SUBW                              _y
                                  ST                                drawPixel_xy + 1
                                  LDW                               _c
                                  ST                                fgbgColour + 1
                                  DrawPixel                                                     ; Main: pset 159-x, 119-y, c

                                  LDW                               _x
                                  ST                                drawPixel_xy
                                  LDW                               _y
                                  ST                                drawPixel_xy + 1
                                  LDI                               128
                                  ST                                fgbgColour + 1
                                  DrawPixel                                                     ; Main: pset x, y, &h80 'c OR &h80 AND &b10101010

                                  LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: goto loop

                                  HALT                                                          ; Main: end

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x79a7
rand16bit                         EQU     0x78bf
scanlineMode                      EQU     0x78c7
resetVideoFlags                   EQU     0x78dd
clearCursorRow                    EQU     0x7acf
readPixel                         EQU     0x78d1
drawPixel                         EQU     0x7da2
drawHLine                         EQU     0x7aa2
drawRectF                         EQU     0x79d7
printInit                         EQU     0x78e9
printText                         EQU     0x79be
printChar                         EQU     0x7ba7
newLineScroll                     EQU     0x7ca2
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET


readPixel           LD      readPixel_xy + 1                ; pixel = peek(peek(256 + 2*y)*256 + x)
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      readPixel_xy + 1
                    LDW     readPixel_xy
                    PEEK
                    RET


drawPixel           LD      drawPixel_xy + 1                ; poke peek(256 + 2*y)*256 + x, fg_colour
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      drawPixel_xy + 1
                    LD      fgbgColour + 1
                    POKE    drawPixel_xy
                    RET



drawHLine           PUSH
                    LD      drawHLine_x1
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LD      drawHLine_x2
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x1
                    SUBW    drawHLine_x2
                    
drawHL_cont         ADDI    1
                    ST      giga_sysArg0                    ; count
                    LD      fgbgColour + 1
                    ST      giga_sysArg1                    ; fill value
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg3                    ; high start address
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    SYS     54                              ; fill memory
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    POP
                    RET


drawRectF           PUSH
                    LDW     drawRectF_y2
                    SUBW    drawRectF_y1
                    BGE     drawRF_loop
                    LDW     drawRectF_y2
                    STW     drawLine_tmp
                    LDW     drawRectF_y1
                    STW     drawRectF_y2
                    LDW     drawLine_tmp
                    STW     drawRectF_y1                    ;if y2 < y1 then swap y2 with y1
                    
drawRF_loop         LDW     drawRectF_y1
                    STW     drawHLine_y1
                    LDWI    drawHLine
                    CALL    giga_vAC
                    INC     drawRectF_y1
                    LDW     drawRectF_y1
                    SUBW    drawRectF_y2
                    BLE     drawRF_loop

                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

