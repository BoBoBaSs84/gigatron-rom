_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x06a0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x0216
_repeat_0x023d                    EQU                               0x0239

; Global Variables
_x                                EQU                               0x0030
_p                                EQU                               0x0032
_x2                               EQU                               0x0034
_nx2                              EQU                               0x0036

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                      Initialise                                                    ; Main: INIT

                                  LDI                               0
                                  STW                               _x                          ; Main: x = 0

_loop                             LDI                               1
                                  STW                               waitVBlankNum
                                  WaitVBlanks                                                   ; Main: wait 1

                                  LDWI                              257
                                  STW                               register0
                                  LDW                               _x
                                  POKE                              register0                   ; Main: poke &h0101, x

                                  LDWI                              273
                                  STW                               _p                          ; Main: p = &h0111

                                  LDW                               _x
                                  ADDW                              _x
                                  STW                               _x2                         ; Main: x2 = x + x

                                  LDI                               0
                                  SUBW                              _x2
                                  STW                               _nx2                        ; Main: nx2 = -x2

_repeat_0x023d                    LDW                               _nx2
                                  POKE                              _p                          ; Main: poke p, nx2

                                  LDW                               _p
                                  ADDI                              16
                                  STW                               0xe8
                                  LDW                               _x2
                                  POKE                              0xe8                        ; Main: poke p + 16, x2

                                  LDW                               _p
                                  ADDI                              32
                                  STW                               _p                          ; Main: p = p + 32

                                  LDWI                              465
                                  SUBW                              _p
                                  BGE                               _repeat_0x023d              ; Main: until p &&>= &h01D1

                                  INC                               _x                          ; Main: inc x

                                  BRA                               _loop                       ; Main: goto &loop

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

waitVBlank                        EQU     0x0621
waitVBlanks                       EQU     0x062d
resetVideoFlags                   EQU     0x0615
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4



; do *NOT* use register4 to register7 during time slicing
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y8        EQU     register2
drawVLine_y2        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       LDWI    waitVBlank
                    CALL    giga_vAC
                    BRA     waitVB_loop


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET

