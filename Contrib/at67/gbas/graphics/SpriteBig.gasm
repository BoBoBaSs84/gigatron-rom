_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT                 EQU                               0x0001
ON_BOTTOM_ROW_BIT                 EQU                               0x0002
ENABLE_SCROLL_MSK                 EQU                               0xfffe
ON_BOTTOM_ROW_MSK                 EQU                               0xfffd

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                               0x0200
_loop                             EQU                               0x08a7
_bullets0                         EQU                               0x09f1
_bullets1                         EQU                               0x0aeb
_page_0x0500                      EQU                               0x0500
_page_0x0600                      EQU                               0x0600
_page_0x08a0                      EQU                               0x08a0
_next_0x023a                      EQU                               0x08b3
_page_0x09a0                      EQU                               0x09a0
_next_0x028a                      EQU                               0x09aa
_page_0x0aa0                      EQU                               0x0aa0
_else_0x0304                      EQU                               0x0ac2
_else_0x0333                      EQU                               0x0ae9
_page_0x0ba0                      EQU                               0x0ba0
_else_0x0365                      EQU                               0x0bbd
_else_0x0393                      EQU                               0x0be3

; Global Variables
_x0                               EQU                               0x0030
_x1                               EQU                               0x0032
_x                                EQU                               0x0034

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Sprites
def_sprites_0x061b                EQU                               0x061b
def_sprites_0x061b                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 16 37 0 0 0 0 37 16 0 0 0 0 16 37 0 21 0 0 16 16 0 21 21 0 16 16 0 0 21 21 0 16 0 0 32 52 52 52 0 32 52 52 52 48 0 0 16 58 58 63 0 0 37 37 63 63 0 0 16 58 58 63 0 0 37 37 63 63 0 0 16 37 37 63 0 0 16 2 23 2 0 0 0 16 2 2 0 0 0 0 16 16 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 16 0 0 0 0 0 16 0 0 0 0 16 37 0 0 0 0 16 16 0 0 0 0 16 58 0 0 0 16 2 2 0 0 0 16 16 2 0 0 0 16 37 58 0 0 0 37 37 58 0 0 16 16 58 37 0 0 16 37 37 58 0 0 37 16 58 37 0 16 32 36 52 58 0 16 37 16 36 52 0 16 16 23 3 2 0 0 23 3 2 2 0 0 0 0 0 0 218 
def_sprites_0x051b                EQU                               0x051b
def_sprites_0x051b                DB                                0 0 0 0 0 0 16 63 63 63 37 37 37 37 63 63 63 58 16 37 37 63 16 0 37 16 58 16 16 2 16 58 16 58 32 21 58 16 58 58 37 37 16 16 58 63 63 37 36 32 37 16 58 58 52 52 48 36 16 58 36 37 63 37 37 21 16 63 58 0 0 42 58 0 0 21 42 63 16 21 21 63 63 42 37 0 21 21 42 0 3 2 16 0 16 37 23 63 63 37 58 16 37 63 58 63 58 37 37 37 58 37 37 16 0 0 0 52 16 16 36 16 21 42 63 63 16 58 0 42 42 63 37 37 63 21 63 42 37 63 63 0 21 63 58 63 63 16 0 0 58 63 16 16 0 16 23 3 16 0 0 0 2 23 0 0 0 0 63 16 0 0 0 0 58 16 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 58 0 0 0 0 0 2 0 0 0 0 0 2 2 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 218 
def_sprites_0x0415                EQU                               0x0415
def_sprites_0x0415                DB                                0 0 0 0 0 0 0 0 0 0 0 0 58 0 0 0 0 0 0 58 0 0 0 0 2 16 0 0 0 0 0 36 0 0 0 0 63 63 0 0 21 0 16 16 0 21 21 0 16 0 21 21 0 0 52 52 52 36 21 21 21 21 63 63 63 42 21 42 21 63 42 63 63 63 42 21 21 21 21 63 63 42 16 37 37 16 2 2 58 37 58 63 58 37 16 16 58 58 63 16 0 0 37 58 58 37 0 0 37 32 16 0 0 0 16 16 16 0 0 0 63 16 36 16 0 0 42 21 37 37 0 0 42 63 63 16 16 0 21 63 63 58 16 0 37 37 63 58 58 16 16 37 37 63 63 2 0 16 37 37 2 3 0 0 16 23 2 37 0 0 0 16 37 37 0 0 0 37 37 63 0 0 0 16 58 58 0 0 0 37 37 58 0 0 0 16 58 37 0 0 0 36 32 52 0 0 0 16 58 32 0 0 0 37 37 23 0 0 0 16 23 3 0 0 0 0 0 0 218 
def_sprites_0x0315                EQU                               0x0315
def_sprites_0x0315                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 21 21 21 42 42 42 21 63 21 63 42 42 37 16 37 42 42 37 37 63 37 21 0 37 63 58 58 0 0 52 37 58 16 0 0 16 36 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 2 0 0 0 0 0 16 0 0 0 0 0 37 16 0 0 0 0 63 37 0 0 0 0 63 16 0 0 0 0 58 58 16 0 0 0 63 63 37 0 0 0 37 63 16 0 0 0 52 3 2 0 0 0 3 2 2 2 0 0 2 2 2 2 2 0 0 0 0 0 0 0 218 
def_sprites_0x0215                EQU                               0x0215
def_sprites_0x0215                DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 21 0 0 42 42 42 63 0 0 63 42 63 21 21 0 42 42 42 21 0 0 21 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 218 
def_sprites_0x7df3                EQU                               0x7df3
def_sprites_0x7df3                DB                                0 0 2 3 7 7 0 0 2 3 7 7 254 
def_sprites_0x7de6                EQU                               0x7de6
def_sprites_0x7de6                DB                                7 11 11 31 0 0 7 11 11 31 0 0 254 

; Define Fonts

; Lookup Tables
_spriteLut_0x7dd0                 EQU                               0x7dd0
_spriteLut_0x7dd0                 DW                                0x061b 0x0000 0x051b 0x0006 0x0415 0x000c 0x0315 0x0012 0x0215 0x0018 0x0000
_spriteLut_0x7dba                 EQU                               0x7dba
_spriteLut_0x7dba                 DW                                0x061b 0x0018 0x051b 0x0012 0x0415 0x000c 0x0315 0x0006 0x0215 0x0000 0x0000
_spriteLut_0x7da4                 EQU                               0x7da4
_spriteLut_0x7da4                 DW                                0x061b 0x2500 0x051b 0x2506 0x0415 0x250c 0x0315 0x2512 0x0215 0x2518 0x0000
_spriteLut_0x7cea                 EQU                               0x7cea
_spriteLut_0x7cea                 DW                                0x061b 0x2518 0x051b 0x2512 0x0415 0x250c 0x0315 0x2506 0x0215 0x2500 0x0000
_spriteLut_0x7ce0                 EQU                               0x7ce0
_spriteLut_0x7ce0                 DW                                0x7df3 0x0000 0x7de6 0x0006 0x0000
_spriteLut_0x7cd6                 EQU                               0x7cd6
_spriteLut_0x7cd6                 DW                                0x7df3 0x0006 0x7de6 0x0000 0x0000
_spritesLut_                      EQU                               0x7cca
_spritesLut_                      DW                                0x7dd0 0x7dba 0x7da4 0x7cea 0x7ce0 0x7cd6 

; Code
_entryPoint_                      LDI                               0x28
                                  STW                               romType
                                  RomCheck                          
                                  STLW                              0xFE
                                  LDWI                              _page_0x0500
                                  CALL                              giga_vAC
_page_0x0500                      LDLW                              0xFE
                                  Initialise                                                    ; Main: INIT

                                  STLW                              0xFE
                                  LDWI                              _page_0x0600
                                  CALL                              giga_vAC
_page_0x0600                      LDLW                              0xFE
                                  LDI                               2
                                  STW                               graphicsMode
                                  ScanlineMode                                                  ; Main: mode 2

                                  LDWI                              16128
                                  STW                               fgbgColour                  ; Main: set FGBG_COLOUR, &h3F00

                                  STLW                              0xFE
                                  LDWI                              _page_0x08a0
                                  CALL                              giga_vAC
_page_0x08a0                      LDLW                              0xFE
                                  ClearVertBlinds                                               ; Main: cls

_loop                             LDI                               28
                                  STW                               _x0                         ; Main: x0 = 28

                                  LDI                               120
                                  STW                               _x1                         ; Main: x1 = 120

                                  LDI                               0
                                  STW                               _x                          ; Main: for x=0 to 130

_next_0x023a                      WaitVBlank                                                    ; Main: wait

                                  LDI                               0
                                  STW                               spriteId
                                  LDW                               _x
                                  ST                                spriteXY
                                  LDI                               15
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite noFlip, 0, x, 15

                                  LDI                               1
                                  STW                               spriteId
                                  LDI                               130
                                  SUBW                              _x
                                  ST                                spriteXY
                                  LDI                               65
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite flipX, 1, 130-x, 65

                                  LDWI                              _bullets0
                                  CALL                              giga_vAC                    ; Main: gosub bullets0

                                  ForNextFarInc                     _x _next_0x023a 130         ; Main: next x

                                  LDI                               28
                                  STW                               _x1                         ; Main: x1 = 28

                                  STLW                              0xFE
                                  LDWI                              _page_0x09a0
                                  CALL                              giga_vAC
_page_0x09a0                      LDLW                              0xFE
                                  LDI                               120
                                  STW                               _x0                         ; Main: x0 = 120

                                  LDI                               129
                                  STW                               _x                          ; Main: for x=129 downto 1

_next_0x028a                      WaitVBlank                                                    ; Main: wait

                                  LDI                               1
                                  STW                               spriteId
                                  LDW                               _x
                                  ST                                spriteXY
                                  LDI                               15
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite flipX, 1, x, 15

                                  LDI                               0
                                  STW                               spriteId
                                  LDI                               130
                                  SUBW                              _x
                                  ST                                spriteXY
                                  LDI                               65
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite noFlip, 0, 130-x, 65

                                  LDWI                              _bullets1
                                  CALL                              giga_vAC                    ; Main: gosub bullets1

                                  ForNextFarDec                     _x _next_0x028a 1           ; Main: next x

                                  LDWI                              _loop
                                  CALL                              giga_vAC                    ; Main: goto loop

_bullets0                         PUSH                              
                                  LDI                               5
                                  STW                               spriteId
                                  LDW                               _x0
                                  STLW                              0xFE
                                  LDWI                              _page_0x0aa0
                                  CALL                              giga_vAC
_page_0x0aa0                      LDLW                              0xFE
                                  ST                                spriteXY
                                  LDI                               24
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite flipX, 5, x0, 24

                                  LDW                               _x0
                                  ADDI                              2
                                  STW                               _x0                         ; Main: x0 = x0 + 2

                                  LDW                               _x0
                                  SUBI                              159
                                  BLE                               _else_0x0304
                                  LDW                               _x
                                  ADDI                              28
                                  STW                               _x0                         ; Main: if x0 &&> 159 then x0 = x + 28

_else_0x0304                      LDI                               4
                                  STW                               spriteId
                                  LDW                               _x1
                                  ST                                spriteXY
                                  LDI                               74
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite noFlip, 4, x1, 74

                                  LDW                               _x1
                                  SUBI                              2
                                  STW                               _x1                         ; Main: x1 = x1 - 2

                                  LDWI                              -12
                                  SUBW                              _x1
                                  BLT                               _else_0x0333
                                  LDI                               120
                                  SUBW                              _x
                                  STW                               _x1                         ; Main: if x1 &&< -12 then x1 = 120-x

_else_0x0333                      Return                                                        ; Main: return

_bullets1                         PUSH                              
                                  LDI                               4
                                  STW                               spriteId
                                  LDW                               _x0
                                  ST                                spriteXY
                                  LDI                               24
                                  ADDI                              8
                                  STLW                              0xFE
                                  LDWI                              _page_0x0ba0
                                  CALL                              giga_vAC
_page_0x0ba0                      LDLW                              0xFE
                                  ST                                spriteXY + 1
                                  DrawSprite                                                    ; Main: sprite noFlip, 4, x0, 24

                                  LDW                               _x0
                                  SUBI                              2
                                  STW                               _x0                         ; Main: x0 = x0 - 2

                                  LDWI                              -12
                                  SUBW                              _x0
                                  BLT                               _else_0x0365
                                  LDW                               _x
                                  SUBI                              10
                                  STW                               _x0                         ; Main: if x0 &&< -12 then x0 = x - 10

_else_0x0365                      LDI                               5
                                  STW                               spriteId
                                  LDW                               _x1
                                  ST                                spriteXY
                                  LDI                               74
                                  ADDI                              8
                                  ST                                spriteXY + 1
                                  DrawSpriteX                                                   ; Main: sprite flipX, 5, x1, 74

                                  LDW                               _x1
                                  ADDI                              2
                                  STW                               _x1                         ; Main: x1 = x1 + 2

                                  LDW                               _x1
                                  SUBI                              159
                                  BLE                               _else_0x0393
                                  LDI                               158
                                  SUBW                              _x
                                  STW                               _x1                         ; Main: if x1 &&> 159 then x1 = 158-x

_else_0x0393                      Return                                                        ; Main: return

                                  HALT                                                          ; Main: END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x7bb2
scanlineMode                      EQU     0x7ac3
waitVBlank                        EQU     0x7ad9
resetVideoFlags                   EQU     0x7acd
initClearFuncs                    EQU     0x7ba1
clearVertBlinds                   EQU     0x7bc9
drawSprite_                       EQU     0x7ca2
drawSprite                        EQU     0x7af2
drawSpriteX                       EQU     0x7ae5
convertEqOpAddr                   EQU     0x00c0
convertNeOpAddr                   EQU     0x00c2
convertLeOpAddr                   EQU     0x00c4
convertGeOpAddr                   EQU     0x00c6
convertLtOpAddr                   EQU     0x00c8
convertGtOpAddr                   EQU     0x00ca
convert8Arr2dAddr                 EQU     0x00cc
convert8Arr3dAddr                 EQU     0x00ce
convert16Arr2dAddr                EQU     0x00d0
convert16Arr3dAddr                EQU     0x00d2
realTimeStubAddr                  EQU     0x00d4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
    

resetVideoFlags     LDI     giga_CursorX                    ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             ; setup fill memory SYS routine
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LD      top
                    ST      giga_sysArg3                    ; top line
                    SYS     54                              ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    ; bottom line
                    SYS     54                              ; fill memory
                    INC     top                             ; next top line
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite_         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawS_loop          LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     drawS_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    BRA     drawS_loop
                    
drawS_exit          POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    LDWI    drawSprite_
                    CALL    giga_vAC
                    POP
                    RET

